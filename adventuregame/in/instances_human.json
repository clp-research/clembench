{
  "experiments": [
    {
      "name": "home_deliver_three_basic_easy",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put mop on table",
            "put book on table",
            "go kitchen",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go living room",
            "put pillow on table",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go living room",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go living room",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_preexplore_easy",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put mop on table",
            "put book on table",
            "go kitchen",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go living room",
            "put pillow on table",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go living room",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go living room",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_easy_invlimittwo",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put mop on table",
            "put book on table",
            "go kitchen",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go living room",
            "put pillow on table",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go living room",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go living room",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_hard",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the counter, the book on the shelf and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,bedroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,counter1)",
            "on(book1,shelf1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "counter1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "take book",
            "go kitchen",
            "put pillow on counter",
            "go hallway",
            "go bedroom",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich in the freezer, the plate on the shelf and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "on(plate1,shelf1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "open refrigerator",
            "open cupboard",
            "go pantry",
            "put mop on table",
            "open freezer",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on shelf",
            "go kitchen",
            "take sandwich",
            "go pantry",
            "put sandwich in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the banana in the freezer, the book on the side table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(banana1,freezer1)",
            "on(book1,sidetable1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "banana1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open refrigerator",
            "take banana",
            "go pantry",
            "put banana in freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the apple in the freezer, the plate on the side table and the mop on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,freezer1)",
            "on(plate1,sidetable1)",
            "on(mop1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "shelf1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "apple1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "open cupboard",
            "open refrigerator",
            "take apple",
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put mop on shelf",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put apple in freezer",
            "go kitchen",
            "go living room",
            "go bedroom",
            "put plate on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow in the refrigerator, the book in the wardrobe and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,kitchen1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,cupboard1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,refrigerator1)",
            "in(book1,wardrobe1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put pillow in refrigerator",
            "go kitchen",
            "take plate",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "put plate on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_preexplore_hard",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the counter, the book on the shelf and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,bedroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,counter1)",
            "on(book1,shelf1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "counter1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "take book",
            "go kitchen",
            "put pillow on counter",
            "go hallway",
            "go bedroom",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go bedroom",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich in the freezer, the plate on the shelf and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "on(plate1,shelf1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "open refrigerator",
            "open cupboard",
            "go pantry",
            "put mop on table",
            "open freezer",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on shelf",
            "go kitchen",
            "take sandwich",
            "go pantry",
            "put sandwich in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the banana in the freezer, the book on the side table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(banana1,freezer1)",
            "on(book1,sidetable1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "banana1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open refrigerator",
            "take banana",
            "go pantry",
            "put banana in freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room",
            "go bedroom"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the apple in the freezer, the plate on the side table and the mop on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,freezer1)",
            "on(plate1,sidetable1)",
            "on(mop1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "shelf1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "apple1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "open cupboard",
            "open refrigerator",
            "take apple",
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put mop on shelf",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put apple in freezer",
            "go kitchen",
            "go living room",
            "go bedroom",
            "put plate on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow in the refrigerator, the book in the wardrobe and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,kitchen1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,cupboard1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,refrigerator1)",
            "in(book1,wardrobe1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put pillow in refrigerator",
            "go kitchen",
            "take plate",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "put plate on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go kitchen",
            "go pantry"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_hard_invlimittwo",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the counter, the book on the shelf and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,bedroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,counter1)",
            "on(book1,shelf1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "counter1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "take book",
            "go kitchen",
            "put pillow on counter",
            "go hallway",
            "go bedroom",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the sandwich in the freezer, the plate on the shelf and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "on(plate1,shelf1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "open refrigerator",
            "open cupboard",
            "go pantry",
            "put mop on table",
            "open freezer",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on shelf",
            "go kitchen",
            "take sandwich",
            "go pantry",
            "put sandwich in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the banana in the freezer, the book on the side table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(banana1,freezer1)",
            "on(book1,sidetable1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "banana1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open refrigerator",
            "take banana",
            "go pantry",
            "put banana in freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on side table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the apple in the freezer, the plate on the side table and the mop on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,freezer1)",
            "on(plate1,sidetable1)",
            "on(mop1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "shelf1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "apple1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "open cupboard",
            "open refrigerator",
            "take apple",
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put mop on shelf",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put apple in freezer",
            "go kitchen",
            "go living room",
            "go bedroom",
            "put plate on side table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow in the refrigerator, the book in the wardrobe and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,kitchen1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,cupboard1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,refrigerator1)",
            "in(book1,wardrobe1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put pillow in refrigerator",
            "go kitchen",
            "take plate",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "put plate on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        }
      ]
    },
    {
      "name": "new-words_home-delivery_easy_basic_easy",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can maten. To maten is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the uness on the table, the potted plant on the cally and the peach on the cally.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(unree1floor1,unree1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(cally1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,unree1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,unree1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(uness1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,unree1)",
            "at(apple1,unree1)",
            "at(iness1,unree1)",
            "at(orange1,unree1)",
            "at(peach1,unree1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(unree1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(cally1,cally)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(uness1,uness)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(iness1,iness)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(unree1,unree)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(unree1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(cally1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(uness1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(iness1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,unree1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(unree1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(cally1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(uness1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(iness1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(uness1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(iness1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(uness1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(iness1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(uness1,table1)",
            "on(pottedplant1,cally1)",
            "on(peach1,cally1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "uness1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "uness1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "unree1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pottedplant1",
              "cally1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "peach1",
              "cally1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take uness",
            "go hallway",
            "take potted plant",
            "go kitchen",
            "go living room",
            "put uness on table",
            "go kitchen",
            "go unree",
            "open refrigerator",
            "take peach",
            "go kitchen",
            "go living room",
            "put potted plant on cally",
            "go kitchen",
            "go living room",
            "put peach on cally"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"maten\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To maten is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "maten",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "unree",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "unree",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "unree"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "unree",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "uness"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "cally",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "cally"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "unree",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "unree"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "uness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "uness"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "iness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "iness"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "unree",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "cally",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "cally",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "cally",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can diale. To diale is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the subst on the table, the book on the scont and the plate on the scont.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(unsust1floor1,unsust1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(scont1,kitchen1)",
            "at(refrigerator1,unsust1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,unsust1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(dente1,broomcloset1)",
            "at(sandwich1,unsust1)",
            "at(apple1,unsust1)",
            "at(banana1,unsust1)",
            "at(orange1,unsust1)",
            "at(peach1,unsust1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(subst1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(unsust1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(scont1,scont)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(dente1,dente)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(subst1,subst)",
            "room(kitchen1,kitchen)",
            "room(unsust1,unsust)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(unsust1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(scont1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(subst1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(dente1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,unsust1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(unsust1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(scont1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(dente1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(subst1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(dente1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(subst1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(dente1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(subst1)"
          ],
          "goal_state": [
            "on(subst1,table1)",
            "on(book1,scont1)",
            "on(plate1,scont1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "book1"
            ],
            [
              "take",
              "subst1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "scont1"
            ],
            [
              "put",
              "plate1",
              "scont1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "subst1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take book",
            "take subst",
            "go hallway",
            "go kitchen",
            "put book on scont",
            "put plate on scont",
            "go living room",
            "put subst on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"diale\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To diale is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "diale",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "scont",
                "table"
              ],
              "exit_targets": [
                "unsust",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "unsust",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "unsust"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "unsust",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "scont",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "scont"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "unsust",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "unsust"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "dente",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "dente"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "subst",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "subst"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "unsust",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "scont",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "scont",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "scont",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can inate. To inate is to remove or block an opening of something, and make its contents unavailable for use or interaction.\n\nYour goal for this game is: Put the mical on the pante, the mop on the pante and the broom on the pante.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(sness1floor1,sness1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(pante1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,sness1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,sness1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(eness1,sness1)",
            "at(apple1,sness1)",
            "at(banana1,sness1)",
            "at(orange1,sness1)",
            "at(peach1,sness1)",
            "at(mical1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(sness1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(pante1,pante)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(eness1,eness)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(mical1,mical)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(sness1,sness)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(sness1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(pante1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(mical1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(eness1,refrigerator1)",
            "exit(kitchen1,sness1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(sness1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(pante1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(eness1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(mical1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(eness1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(mical1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(eness1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(mical1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(mical1,pante1)",
            "on(mop1,pante1)",
            "on(broom1,pante1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "broom1",
              "pante1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "pante1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "mical1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mical1",
              "pante1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take broom",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put broom on pante",
            "go kitchen",
            "go living room",
            "put mop on pante",
            "go kitchen",
            "take mical",
            "go living room",
            "put mical on pante"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"inate\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To inate is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "inate",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "pante"
              ],
              "exit_targets": [
                "sness",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "sness",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "sness"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "sness",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "pante",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "pante",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "pante"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "sness",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "sness"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "eness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "eness"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "mical",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "mical"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "sness",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "pante",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "pante",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "pante",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can aphon. To aphon is to physically place something somewhere.\n\nYour goal for this game is: Put the decte on the table, the plate on the stord and the mop on the stord.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(enticed1floor1,enticed1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,enticed1)",
            "at(stord1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,enticed1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(exper1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(decte1,enticed1)",
            "at(pillow1,enticed1)",
            "at(player1,enticed1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(enticed1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(stord1,stord)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(exper1,exper)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(decte1,decte)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(enticed1,enticed)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(enticed1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(stord1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(decte1,enticed1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(exper1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(enticed1,hallway1)",
            "exit(hallway1,enticed1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(stord1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(exper1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(decte1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(exper1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(decte1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(exper1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(decte1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(decte1,table1)",
            "on(plate1,stord1)",
            "on(mop1,stord1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "take",
              "decte1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "decte1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "stord1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "stord1"
            ]
          ],
          "optimal_commands": [
            "take decte",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put decte on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on stord",
            "go kitchen",
            "go living room",
            "put mop on stord"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"aphon\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To aphon is to physically place something somewhere.",
              "new_word": "aphon",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "stord",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "enticed",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "enticed"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "stord",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "livingroom"
              ],
              "type_name": "stord"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "enticed"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "exper",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "exper"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "decte",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "decte"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "enticed"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "stord",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "stord",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "stord",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can remic. To remic is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the gaticed on the table, the unbal on the table and the peach in the raticed.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(mator1floor1,mator1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,mator1)",
            "at(refrigerator1,pantry1)",
            "at(raticed1,mator1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(unbal1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(gaticed1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,mator1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(mator1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(raticed1,raticed)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(unbal1,unbal)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(gaticed1,gaticed)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(mator1,mator)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(mator1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,mator1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(gaticed1,broomcloset1floor1)",
            "on(unbal1,hallway1floor1)",
            "container(refrigerator1)",
            "container(raticed1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(mator1,pantry1)",
            "exit(mator1,livingroom1)",
            "exit(mator1,hallway1)",
            "exit(pantry1,mator1)",
            "exit(hallway1,mator1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,mator1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(raticed1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(raticed1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(raticed1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(unbal1)",
            "takeable(gaticed1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(unbal1)",
            "movable(gaticed1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(unbal1)",
            "needs_support(gaticed1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(gaticed1,table1)",
            "on(unbal1,table1)",
            "in(peach1,raticed1)"
          ],
          "max_turns": 50,
          "optimal_turns": 17,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "gaticed1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "unbal1"
            ],
            [
              "go",
              "mator1"
            ],
            [
              "open",
              "raticed1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "mator1"
            ],
            [
              "put",
              "peach1",
              "raticed1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "gaticed1",
              "table1"
            ],
            [
              "go",
              "mator1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "unbal1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take gaticed",
            "go hallway",
            "take unbal",
            "go mator",
            "open raticed",
            "go pantry",
            "open refrigerator",
            "take peach",
            "go mator",
            "put peach in raticed",
            "go living room",
            "put gaticed on table",
            "go mator",
            "go living room",
            "put unbal on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"remic\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To remic is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "remic",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "mator",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "mator"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "mator",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "unbal"
              ],
              "exit_targets": [
                "mator",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "unbal",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "mator",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "gaticed"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "mator",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "mator"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "raticed",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "mator"
              ],
              "type_name": "raticed"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "mator",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "unbal",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "unbal"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "gaticed",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "gaticed"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "mator",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "unbal",
                  "chair",
                  "bed",
                  "couch",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "unbal",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "unbal",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "unbal",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "new-words_home-delivery_medium_basic_medium",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can inate, pante and eness.\n\nYour goal for this game is: Put the subst in the unsust, the mical on the table and the maten on the dente.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(uness1floor1,uness1)",
            "at(iness1floor1,iness1)",
            "at(unree1floor1,unree1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(dente1,livingroom1)",
            "at(counter1,uness1)",
            "at(unsust1,iness1)",
            "at(cupboard1,uness1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,iness1)",
            "at(sness1,unree1)",
            "at(chair1,livingroom1)",
            "at(scont1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(maten1,broomcloset1)",
            "at(mical1,broomcloset1)",
            "at(sandwich1,iness1)",
            "at(apple1,iness1)",
            "at(cally1,iness1)",
            "at(diale1,iness1)",
            "at(peach1,iness1)",
            "at(subst1,uness1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(uness1floor1,floor)",
            "type(iness1floor1,floor)",
            "type(unree1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(dente1,dente)",
            "type(counter1,counter)",
            "type(unsust1,unsust)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(sness1,sness)",
            "type(chair1,chair)",
            "type(scont1,scont)",
            "type(couch1,couch)",
            "type(maten1,maten)",
            "type(mical1,mical)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(cally1,cally)",
            "type(diale1,diale)",
            "type(peach1,peach)",
            "type(subst1,subst)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(uness1,uness)",
            "room(iness1,iness)",
            "room(unree1,unree)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(uness1floor1)",
            "support(iness1floor1)",
            "support(unree1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(dente1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(scont1)",
            "support(couch1)",
            "on(pillow1,scont1)",
            "on(book1,bedroom1floor1)",
            "on(subst1,uness1floor1)",
            "on(mical1,broomcloset1floor1)",
            "on(maten1,broomcloset1floor1)",
            "on(sness1,unree1floor1)",
            "container(unsust1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,unsust1)",
            "in(diale1,unsust1)",
            "in(cally1,unsust1)",
            "in(apple1,unsust1)",
            "in(sandwich1,unsust1)",
            "exit(uness1,iness1)",
            "exit(uness1,livingroom1)",
            "exit(uness1,unree1)",
            "exit(iness1,uness1)",
            "exit(unree1,uness1)",
            "exit(unree1,broomcloset1)",
            "exit(livingroom1,uness1)",
            "exit(broomcloset1,unree1)",
            "exit(bedroom1,unree1)",
            "exit(unree1,bedroom1)",
            "receptacle(table1)",
            "receptacle(dente1)",
            "receptacle(counter1)",
            "receptacle(unsust1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(scont1)",
            "receptacle(couch1)",
            "openable(unsust1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(unsust1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(sness1)",
            "takeable(maten1)",
            "takeable(mical1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(cally1)",
            "takeable(diale1)",
            "takeable(peach1)",
            "takeable(subst1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(sness1)",
            "movable(maten1)",
            "movable(mical1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(cally1)",
            "movable(diale1)",
            "movable(peach1)",
            "movable(subst1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(sness1)",
            "needs_support(maten1)",
            "needs_support(mical1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(cally1)",
            "needs_support(diale1)",
            "needs_support(peach1)",
            "needs_support(subst1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(subst1,unsust1)",
            "on(mical1,table1)",
            "on(maten1,dente1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "unree1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mical1"
            ],
            [
              "take",
              "maten1"
            ],
            [
              "go",
              "unree1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mical1",
              "table1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "take",
              "subst1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "maten1",
              "dente1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "go",
              "iness1"
            ],
            [
              "open",
              "unsust1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "go",
              "iness1"
            ],
            [
              "put",
              "subst1",
              "unsust1"
            ]
          ],
          "optimal_commands": [
            "go unree",
            "go broom closet",
            "take mical",
            "take maten",
            "go unree",
            "go uness",
            "go living room",
            "put mical on table",
            "go uness",
            "take subst",
            "go living room",
            "put maten on dente",
            "go uness",
            "go iness",
            "open unsust",
            "go uness",
            "go iness",
            "put subst in unsust"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"inate\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To inate is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "inate",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"eness\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To eness is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "eness",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"pante\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To pante is to physically place something somewhere.",
              "new_word": "pante",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "uness",
              "standard_content": [
                "unsust",
                "counter",
                "table"
              ],
              "exit_targets": [
                "iness",
                "livingroom",
                "unree"
              ],
              "max_connections": 3,
              "type_name": "uness"
            },
            {
              "repr_str": "iness",
              "standard_content": [
                "unsust",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "uness",
                "unree"
              ],
              "max_connections": 1,
              "type_name": "iness"
            },
            {
              "repr_str": "unree",
              "standard_content": [
                "sness"
              ],
              "exit_targets": [
                "uness",
                "iness",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "unree"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "sness",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "uness",
                "unree"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "maten"
              ],
              "exit_targets": [
                "unree"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "scont",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "unree"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uness",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "dente",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "dente"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uness"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "unsust",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "unsust"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uness"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uness",
                "iness",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "iness"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "sness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "unree",
                "bedroom"
              ],
              "type_name": "sness"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "scont",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "scont"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "maten",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "maten"
            },
            {
              "repr_str": "mical",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mical"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "cally",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "cally"
            },
            {
              "repr_str": "diale",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "diale"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "subst",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness"
              ],
              "type_name": "subst"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "uness",
                  "iness",
                  "unree",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "dente",
                  "counter",
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "sness",
                  "chair",
                  "scont",
                  "couch",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "dente",
                  "counter",
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "scont",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "dente",
                  "counter",
                  "shelf",
                  "chair",
                  "scont",
                  "couch"
                ],
                "openable": [
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "sness",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "sness",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "sness",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can natin, perce and trion.\n\nYour goal for this game is: Put the aphon in the mator, the book on the remiced and the proart on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(exper1floor1,exper1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(decte1floor1,decte1)",
            "at(enticed1floor1,enticed1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(remiced1,exper1)",
            "at(mator1,pantry1)",
            "at(uner1,exper1)",
            "at(wardrobe1,enticed1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(raticed1,hallway1)",
            "at(unbal1,livingroom1)",
            "at(bed1,enticed1)",
            "at(couch1,livingroom1)",
            "at(broom1,decte1)",
            "at(stord1,decte1)",
            "at(gaticed1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(proart1,exper1)",
            "at(book1,enticed1)",
            "at(aphon1,enticed1)",
            "at(player1,enticed1)",
            "type(exper1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(decte1floor1,floor)",
            "type(enticed1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(remiced1,remiced)",
            "type(mator1,mator)",
            "type(uner1,uner)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(raticed1,raticed)",
            "type(unbal1,unbal)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(stord1,stord)",
            "type(gaticed1,gaticed)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(proart1,proart)",
            "type(book1,book)",
            "type(aphon1,aphon)",
            "room(exper1,exper)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(decte1,decte)",
            "room(enticed1,enticed)",
            "support(exper1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(decte1floor1)",
            "support(enticed1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(remiced1)",
            "support(shelf1)",
            "support(unbal1)",
            "support(bed1)",
            "support(couch1)",
            "on(aphon1,bed1)",
            "on(book1,enticed1floor1)",
            "on(proart1,exper1floor1)",
            "on(stord1,decte1floor1)",
            "on(broom1,decte1floor1)",
            "on(raticed1,hallway1floor1)",
            "container(mator1)",
            "container(uner1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,mator1)",
            "in(orange1,mator1)",
            "in(banana1,mator1)",
            "in(apple1,mator1)",
            "in(gaticed1,mator1)",
            "exit(exper1,pantry1)",
            "exit(exper1,livingroom1)",
            "exit(exper1,hallway1)",
            "exit(pantry1,exper1)",
            "exit(hallway1,exper1)",
            "exit(hallway1,decte1)",
            "exit(livingroom1,exper1)",
            "exit(decte1,hallway1)",
            "exit(enticed1,hallway1)",
            "exit(hallway1,enticed1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(remiced1)",
            "receptacle(mator1)",
            "receptacle(uner1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(unbal1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(mator1)",
            "openable(uner1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(mator1)",
            "closed(uner1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(raticed1)",
            "takeable(broom1)",
            "takeable(stord1)",
            "takeable(gaticed1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(proart1)",
            "takeable(book1)",
            "takeable(aphon1)",
            "movable(raticed1)",
            "movable(broom1)",
            "movable(stord1)",
            "movable(gaticed1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(proart1)",
            "movable(book1)",
            "movable(aphon1)",
            "needs_support(raticed1)",
            "needs_support(broom1)",
            "needs_support(stord1)",
            "needs_support(gaticed1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(proart1)",
            "needs_support(book1)",
            "needs_support(aphon1)"
          ],
          "goal_state": [
            "in(aphon1,mator1)",
            "on(book1,remiced1)",
            "on(proart1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "take",
              "aphon1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "exper1"
            ],
            [
              "take",
              "proart1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "proart1",
              "table1"
            ],
            [
              "go",
              "exper1"
            ],
            [
              "put",
              "book1",
              "remiced1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "mator1"
            ],
            [
              "go",
              "exper1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "aphon1",
              "mator1"
            ]
          ],
          "optimal_commands": [
            "take aphon",
            "take book",
            "go hallway",
            "go exper",
            "take proart",
            "go living room",
            "put proart on table",
            "go exper",
            "put book on remiced",
            "go pantry",
            "open mator",
            "go exper",
            "go pantry",
            "put aphon in mator"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"perce\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To perce is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "perce",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"trion\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To trion is to get something into one's hands, possession or control.",
              "new_word": "trion",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"natin\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To natin is to physically place something somewhere.",
              "new_word": "natin",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "exper",
              "standard_content": [
                "mator",
                "remiced",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "exper"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "mator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "exper",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "raticed"
              ],
              "exit_targets": [
                "exper",
                "pantry",
                "livingroom",
                "decte"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "raticed",
                "table",
                "unbal",
                "couch"
              ],
              "exit_targets": [
                "exper",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "decte",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "decte"
            },
            {
              "repr_str": "enticed",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "enticed"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "exper",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "remiced",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "exper"
              ],
              "type_name": "remiced"
            },
            {
              "repr_str": "mator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "mator"
            },
            {
              "repr_str": "uner",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "exper"
              ],
              "type_name": "uner"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "exper",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "raticed",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "enticed"
              ],
              "type_name": "raticed"
            },
            {
              "repr_str": "unbal",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "unbal"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "decte"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "stord",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "decte"
              ],
              "type_name": "stord"
            },
            {
              "repr_str": "gaticed",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "gaticed"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "proart",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper"
              ],
              "type_name": "proart"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "aphon",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "aphon"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "exper",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "decte",
                  "enticed"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "remiced",
                  "mator",
                  "uner",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "raticed",
                  "unbal",
                  "bed",
                  "couch",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ],
                "container": [
                  "inventory",
                  "mator",
                  "uner",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "remiced",
                  "mator",
                  "uner",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "unbal",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "remiced",
                  "shelf",
                  "unbal",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "mator",
                  "uner",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "raticed",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ],
                "movable": [
                  "raticed",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ],
                "needs_support": [
                  "raticed",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can aling, vater and nogia.\n\nYour goal for this game is: Put the secti in the imped, the inet on the table and the broom on the rably.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(unpish1floor1,unpish1)",
            "at(nolog1floor1,nolog1)",
            "at(livingroom1floor1,livingroom1)",
            "at(ation1floor1,ation1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(imped1,unpish1)",
            "at(stism1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(trionee1,unpish1)",
            "at(pottedplant1,nolog1)",
            "at(rably1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(nond1,livingroom1)",
            "at(broom1,ation1)",
            "at(inet1,ation1)",
            "at(trateler1,unpish1)",
            "at(apple1,unpish1)",
            "at(torish1,unpish1)",
            "at(orange1,unpish1)",
            "at(peach1,unpish1)",
            "at(secti1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(unpish1floor1,floor)",
            "type(nolog1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(ation1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(imped1,imped)",
            "type(stism1,stism)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(trionee1,trionee)",
            "type(pottedplant1,pottedplant)",
            "type(rably1,rably)",
            "type(bed1,bed)",
            "type(nond1,nond)",
            "type(broom1,broom)",
            "type(inet1,inet)",
            "type(trateler1,trateler)",
            "type(apple1,apple)",
            "type(torish1,torish)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(secti1,secti)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(unpish1,unpish)",
            "room(nolog1,nolog)",
            "room(livingroom1,livingroom)",
            "room(ation1,ation)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(unpish1floor1)",
            "support(nolog1floor1)",
            "support(livingroom1floor1)",
            "support(ation1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(rably1)",
            "support(bed1)",
            "support(nond1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(secti1,kitchen1floor1)",
            "on(inet1,ation1floor1)",
            "on(broom1,ation1floor1)",
            "on(pottedplant1,nolog1floor1)",
            "container(imped1)",
            "container(stism1)",
            "container(wardrobe1)",
            "container(trionee1)",
            "in(peach1,imped1)",
            "in(orange1,imped1)",
            "in(torish1,imped1)",
            "in(apple1,imped1)",
            "in(trateler1,imped1)",
            "exit(kitchen1,unpish1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,nolog1)",
            "exit(unpish1,kitchen1)",
            "exit(nolog1,kitchen1)",
            "exit(nolog1,ation1)",
            "exit(livingroom1,kitchen1)",
            "exit(ation1,nolog1)",
            "exit(bedroom1,nolog1)",
            "exit(nolog1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(imped1)",
            "receptacle(stism1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(trionee1)",
            "receptacle(rably1)",
            "receptacle(bed1)",
            "receptacle(nond1)",
            "openable(imped1)",
            "openable(stism1)",
            "openable(wardrobe1)",
            "openable(trionee1)",
            "closed(imped1)",
            "closed(stism1)",
            "closed(wardrobe1)",
            "closed(trionee1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(inet1)",
            "takeable(trateler1)",
            "takeable(apple1)",
            "takeable(torish1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(secti1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(inet1)",
            "movable(trateler1)",
            "movable(apple1)",
            "movable(torish1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(secti1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(inet1)",
            "needs_support(trateler1)",
            "needs_support(apple1)",
            "needs_support(torish1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(secti1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(secti1,imped1)",
            "on(inet1,table1)",
            "on(broom1,rably1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "nolog1"
            ],
            [
              "go",
              "ation1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "take",
              "inet1"
            ],
            [
              "go",
              "nolog1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "inet1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "broom1",
              "rably1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "secti1"
            ],
            [
              "go",
              "unpish1"
            ],
            [
              "open",
              "imped1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "unpish1"
            ],
            [
              "put",
              "secti1",
              "imped1"
            ]
          ],
          "optimal_commands": [
            "go nolog",
            "go ation",
            "take broom",
            "take inet",
            "go nolog",
            "go kitchen",
            "go living room",
            "put inet on table",
            "go kitchen",
            "go living room",
            "put broom on rably",
            "go kitchen",
            "take secti",
            "go unpish",
            "open imped",
            "go kitchen",
            "go unpish",
            "put secti in imped"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"vater\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To vater is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "vater",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"nogia\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To nogia is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "nogia",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"aling\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To aling is to get something into one's hands, possession or control.",
              "new_word": "aling",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "imped",
                "counter",
                "table"
              ],
              "exit_targets": [
                "unpish",
                "livingroom",
                "nolog"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "unpish",
              "standard_content": [
                "imped",
                "shelf",
                "trionee"
              ],
              "exit_targets": [
                "kitchen",
                "nolog"
              ],
              "max_connections": 1,
              "type_name": "unpish"
            },
            {
              "repr_str": "nolog",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "unpish",
                "livingroom",
                "ation"
              ],
              "max_connections": 4,
              "type_name": "nolog"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "rably",
                "nond"
              ],
              "exit_targets": [
                "kitchen",
                "nolog"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "ation",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "nolog"
              ],
              "max_connections": 1,
              "type_name": "ation"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "nolog"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "imped",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "imped"
            },
            {
              "repr_str": "stism",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "stism"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "unpish",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "trionee",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "unpish"
              ],
              "type_name": "trionee"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "nolog",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "rably",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "rably"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "nond",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "nond"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ation"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "inet",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ation"
              ],
              "type_name": "inet"
            },
            {
              "repr_str": "trateler",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "trateler"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "torish",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "torish"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "secti",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "secti"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "unpish",
                  "nolog",
                  "livingroom",
                  "ation",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "imped",
                  "stism",
                  "wardrobe",
                  "shelf",
                  "trionee",
                  "pottedplant",
                  "rably",
                  "bed",
                  "nond",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "imped",
                  "stism",
                  "wardrobe",
                  "trionee"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "imped",
                  "stism",
                  "wardrobe",
                  "shelf",
                  "trionee",
                  "rably",
                  "bed",
                  "nond"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "rably",
                  "bed",
                  "nond"
                ],
                "openable": [
                  "imped",
                  "stism",
                  "wardrobe",
                  "trionee"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can ortid, enerk and alism.\n\nYour goal for this game is: Put the delly in the thot, the plate on the micon and the penol on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(het1floor1,het1)",
            "at(ousnee1floor1,ousnee1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(ationee1floor1,ationee1)",
            "at(table1,ousnee1)",
            "at(micon1,ousnee1)",
            "at(ceoust1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(thot1,kitchen1)",
            "at(wardrobe1,ationee1)",
            "at(shelf1,ousnee1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,het1)",
            "at(chair1,ousnee1)",
            "at(bed1,ationee1)",
            "at(couch1,ousnee1)",
            "at(catint1,broomcloset1)",
            "at(penol1,broomcloset1)",
            "at(soriced1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(unalin1,pantry1)",
            "at(fress1,pantry1)",
            "at(plate1,kitchen1)",
            "at(delly1,ationee1)",
            "at(pillow1,ationee1)",
            "at(player1,ationee1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(het1floor1,floor)",
            "type(ousnee1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(ationee1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(micon1,micon)",
            "type(ceoust1,ceoust)",
            "type(refrigerator1,refrigerator)",
            "type(thot1,thot)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(catint1,catint)",
            "type(penol1,penol)",
            "type(soriced1,soriced)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(unalin1,unalin)",
            "type(fress1,fress)",
            "type(plate1,plate)",
            "type(delly1,delly)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(het1,het)",
            "room(ousnee1,ousnee)",
            "room(broomcloset1,broomcloset)",
            "room(ationee1,ationee)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(het1floor1)",
            "support(ousnee1floor1)",
            "support(broomcloset1floor1)",
            "support(ationee1floor1)",
            "support(table1)",
            "support(micon1)",
            "support(ceoust1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(delly1,ationee1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(penol1,broomcloset1floor1)",
            "on(catint1,broomcloset1floor1)",
            "on(pottedplant1,het1floor1)",
            "container(refrigerator1)",
            "container(thot1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(fress1,refrigerator1)",
            "in(unalin1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(soriced1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,ousnee1)",
            "exit(kitchen1,het1)",
            "exit(pantry1,kitchen1)",
            "exit(het1,kitchen1)",
            "exit(het1,broomcloset1)",
            "exit(ousnee1,kitchen1)",
            "exit(broomcloset1,het1)",
            "exit(ationee1,het1)",
            "exit(het1,ationee1)",
            "receptacle(table1)",
            "receptacle(micon1)",
            "receptacle(ceoust1)",
            "receptacle(refrigerator1)",
            "receptacle(thot1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(thot1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(thot1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(catint1)",
            "takeable(penol1)",
            "takeable(soriced1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(unalin1)",
            "takeable(fress1)",
            "takeable(plate1)",
            "takeable(delly1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(catint1)",
            "movable(penol1)",
            "movable(soriced1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(unalin1)",
            "movable(fress1)",
            "movable(plate1)",
            "movable(delly1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(catint1)",
            "needs_support(penol1)",
            "needs_support(soriced1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(unalin1)",
            "needs_support(fress1)",
            "needs_support(plate1)",
            "needs_support(delly1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(delly1,thot1)",
            "on(plate1,micon1)",
            "on(penol1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "take",
              "delly1"
            ],
            [
              "go",
              "het1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "penol1"
            ],
            [
              "go",
              "het1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "open",
              "thot1"
            ],
            [
              "go",
              "ousnee1"
            ],
            [
              "put",
              "plate1",
              "micon1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "delly1",
              "thot1"
            ],
            [
              "go",
              "ousnee1"
            ],
            [
              "put",
              "penol1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take delly",
            "go het",
            "go broom closet",
            "take penol",
            "go het",
            "go kitchen",
            "take plate",
            "open thot",
            "go ousnee",
            "put plate on micon",
            "go kitchen",
            "put delly in thot",
            "go ousnee",
            "put penol on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"alism\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To alism is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "alism",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ortid\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ortid is to get something into one's hands, possession or control.",
              "new_word": "ortid",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"enerk\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To enerk is to physically place something somewhere.",
              "new_word": "enerk",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "ceoust",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "ousnee",
                "het"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "het"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "het",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "ousnee",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "het"
            },
            {
              "repr_str": "ousnee",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "het"
              ],
              "max_connections": 2,
              "type_name": "ousnee"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "catint"
              ],
              "exit_targets": [
                "het"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "ationee",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "ousnee",
                "het"
              ],
              "max_connections": 1,
              "type_name": "ationee"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "ousnee"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "micon",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "ousnee",
                "ationee"
              ],
              "type_name": "micon"
            },
            {
              "repr_str": "ceoust",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "ceoust"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "thot",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "thot"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "ousnee"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "ousnee",
                "het",
                "ationee"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "ousnee"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "ousnee"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "catint",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "catint"
            },
            {
              "repr_str": "penol",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "penol"
            },
            {
              "repr_str": "soriced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "soriced"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "unalin",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "unalin"
            },
            {
              "repr_str": "fress",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "fress"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "delly",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ousnee",
                "ationee"
              ],
              "type_name": "delly"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "het",
                  "ousnee",
                  "broomcloset",
                  "ationee"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "micon",
                  "ceoust",
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "micon",
                  "ceoust",
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "micon",
                  "ceoust",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can tedne, sulphy and derman.\n\nYour goal for this game is: Put the sioust in the reele, the pacia on the table and the inging on the menny.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(uncest1floor1,uncest1)",
            "at(pantry1floor1,pantry1)",
            "at(unflued1floor1,unflued1)",
            "at(livingroom1floor1,livingroom1)",
            "at(tulacy1floor1,tulacy1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,uncest1)",
            "at(refrigerator1,pantry1)",
            "at(reele1,uncest1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(rist1,pantry1)",
            "at(pacia1,unflued1)",
            "at(menny1,livingroom1)",
            "at(prust1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(sioust1,tulacy1)",
            "at(mop1,tulacy1)",
            "at(logal1,pantry1)",
            "at(ramiced1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(inging1,pantry1)",
            "at(plate1,uncest1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(uncest1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(unflued1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(tulacy1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(reele1,reele)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(rist1,rist)",
            "type(pacia1,pacia)",
            "type(menny1,menny)",
            "type(prust1,prust)",
            "type(couch1,couch)",
            "type(sioust1,sioust)",
            "type(mop1,mop)",
            "type(logal1,logal)",
            "type(ramiced1,ramiced)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(inging1,inging)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(uncest1,uncest)",
            "room(pantry1,pantry)",
            "room(unflued1,unflued)",
            "room(livingroom1,livingroom)",
            "room(tulacy1,tulacy)",
            "room(bedroom1,bedroom)",
            "support(uncest1floor1)",
            "support(pantry1floor1)",
            "support(unflued1floor1)",
            "support(livingroom1floor1)",
            "support(tulacy1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(menny1)",
            "support(prust1)",
            "support(couch1)",
            "on(pillow1,prust1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,uncest1floor1)",
            "on(mop1,tulacy1floor1)",
            "on(sioust1,tulacy1floor1)",
            "on(pacia1,unflued1floor1)",
            "container(refrigerator1)",
            "container(reele1)",
            "container(wardrobe1)",
            "container(rist1)",
            "in(inging1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(ramiced1,refrigerator1)",
            "in(logal1,refrigerator1)",
            "exit(uncest1,pantry1)",
            "exit(uncest1,livingroom1)",
            "exit(uncest1,unflued1)",
            "exit(pantry1,uncest1)",
            "exit(unflued1,uncest1)",
            "exit(unflued1,tulacy1)",
            "exit(livingroom1,uncest1)",
            "exit(tulacy1,unflued1)",
            "exit(bedroom1,unflued1)",
            "exit(unflued1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(reele1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(rist1)",
            "receptacle(menny1)",
            "receptacle(prust1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(reele1)",
            "openable(wardrobe1)",
            "openable(rist1)",
            "closed(refrigerator1)",
            "closed(reele1)",
            "closed(wardrobe1)",
            "closed(rist1)",
            "takeable(pacia1)",
            "takeable(sioust1)",
            "takeable(mop1)",
            "takeable(logal1)",
            "takeable(ramiced1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(inging1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pacia1)",
            "movable(sioust1)",
            "movable(mop1)",
            "movable(logal1)",
            "movable(ramiced1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(inging1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pacia1)",
            "needs_support(sioust1)",
            "needs_support(mop1)",
            "needs_support(logal1)",
            "needs_support(ramiced1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(inging1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sioust1,reele1)",
            "on(pacia1,table1)",
            "on(inging1,menny1)"
          ],
          "max_turns": 50,
          "optimal_turns": 17,
          "optimal_solution": [
            [
              "go",
              "unflued1"
            ],
            [
              "go",
              "tulacy1"
            ],
            [
              "take",
              "sioust1"
            ],
            [
              "go",
              "unflued1"
            ],
            [
              "take",
              "pacia1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "open",
              "reele1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pacia1",
              "table1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "put",
              "sioust1",
              "reele1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "inging1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "inging1",
              "menny1"
            ]
          ],
          "optimal_commands": [
            "go unflued",
            "go tulacy",
            "take sioust",
            "go unflued",
            "take pacia",
            "go uncest",
            "open reele",
            "go living room",
            "put pacia on table",
            "go uncest",
            "put sioust in reele",
            "go pantry",
            "open refrigerator",
            "take inging",
            "go uncest",
            "go living room",
            "put inging on menny"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"sulphy\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To sulphy is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "sulphy",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"tedne\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To tedne is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "tedne",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"derman\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To derman is to get something into one's hands, possession or control.",
              "new_word": "derman",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "uncest",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "unflued"
              ],
              "max_connections": 3,
              "type_name": "uncest"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "rist"
              ],
              "exit_targets": [
                "uncest",
                "unflued"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "unflued",
              "standard_content": [
                "pacia"
              ],
              "exit_targets": [
                "uncest",
                "pantry",
                "livingroom",
                "tulacy"
              ],
              "max_connections": 4,
              "type_name": "unflued"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pacia",
                "table",
                "menny",
                "couch"
              ],
              "exit_targets": [
                "uncest",
                "unflued"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "tulacy",
              "standard_content": [
                "sioust"
              ],
              "exit_targets": [
                "unflued"
              ],
              "max_connections": 1,
              "type_name": "tulacy"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "prust",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "unflued"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uncest",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "reele",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "reele"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uncest",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "rist",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "rist"
            },
            {
              "repr_str": "pacia",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "unflued",
                "bedroom"
              ],
              "type_name": "pacia"
            },
            {
              "repr_str": "menny",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "menny"
            },
            {
              "repr_str": "prust",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "prust"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "sioust",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tulacy"
              ],
              "type_name": "sioust"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tulacy"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "logal",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "logal"
            },
            {
              "repr_str": "ramiced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "ramiced"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "inging",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "inging"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "uncest",
                  "pantry",
                  "unflued",
                  "livingroom",
                  "tulacy",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "shelf",
                  "rist",
                  "pacia",
                  "menny",
                  "prust",
                  "couch",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "rist"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "shelf",
                  "rist",
                  "menny",
                  "prust",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "menny",
                  "prust",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "rist"
                ],
                "takeable": [
                  "pacia",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pacia",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pacia",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "new-words_created_basic_hard",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can mator, unbal, gatic, remic, ratic and proar.\n\nYour goal for this game is: Make the inat mateny, the diale unsust and the subst dented.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(decte1,unree1)",
            "at(enticed1,iness1)",
            "at(inat1,cally1)",
            "at(pante1,cally1)",
            "at(eness1,cally1)",
            "at(mical1,cally1)",
            "at(sness1,cally1)",
            "at(diale1,uness1)",
            "at(scont1,unree1)",
            "at(subst1,cally1)",
            "at(player1,cally1)",
            "type(player1,player)",
            "type(subst1,subst)",
            "type(scont1,scont)",
            "type(diale1,diale)",
            "type(sness1,sness)",
            "type(mical1,mical)",
            "type(eness1,eness)",
            "type(pante1,pante)",
            "type(inat1,inat)",
            "type(enticed1,enticed)",
            "type(decte1,decte)",
            "room(unree1,unree)",
            "room(iness1,iness)",
            "room(uness1,uness)",
            "room(cally1,cally)",
            "unsust(enticed1)",
            "unsust(pante1)",
            "unsust(eness1)",
            "unsust(mical1)",
            "exper(sness1)",
            "exper(diale1)",
            "mateny(decte1)",
            "stord(sness1)",
            "aphoned(inat1)",
            "exit(unree1,iness1)",
            "exit(iness1,unree1)",
            "exit(uness1,iness1)",
            "exit(cally1,unree1)",
            "exit(unree1,cally1)",
            "exit(iness1,uness1)",
            "dented_able(subst1)",
            "dented_able(scont1)",
            "dented_able(diale1)",
            "dented_able(mical1)",
            "dented_able(inat1)",
            "dented_able(enticed1)",
            "unsust_able(diale1)",
            "unsust_able(sness1)",
            "unsust_able(mical1)",
            "unsust_able(eness1)",
            "unsust_able(pante1)",
            "unsust_able(enticed1)",
            "mateny_able(sness1)",
            "mateny_able(inat1)",
            "mateny_able(decte1)"
          ],
          "goal_state": [
            "dented(subst1)",
            "unsust(diale1)",
            "mateny(inat1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "mator",
              "subst1"
            ],
            [
              "proar",
              "inat1"
            ],
            [
              "go",
              "unree1"
            ],
            [
              "go",
              "iness1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "gatic",
              "diale1"
            ]
          ],
          "optimal_commands": [
            "mator subst",
            "proar inat",
            "go unree",
            "go iness",
            "go uness",
            "gatic diale"
          ],
          "action_definitions": [
            {
              "lark": "mator: MATOR thing\nMATOR.1: \"mator\" WS",
              "pddl": "(:action MATOR\n    :parameters (?e - dented_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (dented ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not dented-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now dented.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To mator is to make something dented_able dented.",
              "asp": "{ action_t(TURN,mator,THING):at_t(TURN,THING,ROOM),dented_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ndented_t(TURN+1,THING) :- action_t(TURN,mator,THING).\ndented_t(TURN+1,THING) :- turn(TURN), dented_t(TURN,THING).",
              "type_name": "mator"
            },
            {
              "lark": "unbal: UNBAL thing\nUNBAL.1: \"unbal\" WS",
              "pddl": "(:action UNBAL\n    :parameters (?e - unsust_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (unsust ?e)\n        )\n    :effect (and\n        (exper ?e)\n        (not (unsust ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not unsust-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not unsust.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now exper.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To unbal is to make something unsust_able and unsust be exper.",
              "asp": "{ action_t(TURN,unbal,THING):at_t(TURN,THING,ROOM),unsust_able(THING),unsust_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nexper_t(TURN+1,THING) :- action_t(TURN,unbal,THING).\nunsust_t(TURN+1,THING) :- turn(TURN), unsust_t(TURN,THING), not action_t(TURN,unbal,THING).",
              "type_name": "unbal"
            },
            {
              "lark": "gatic: GATIC thing\nGATIC.1: \"gatic\" WS",
              "pddl": "(:action GATIC\n    :parameters (?e - unsust_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (exper ?e)\n        )\n    :effect (and\n        (unsust ?e)\n        (not (exper ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not unsust-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not exper.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now unsust.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To gatic is to make something unsust_able and exper be unsust.",
              "asp": "{ action_t(TURN,gatic,THING):at_t(TURN,THING,ROOM),unsust_able(THING),exper_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nunsust_t(TURN+1,THING) :- action_t(TURN,gatic,THING).\nexper_t(TURN+1,THING) :- turn(TURN), exper_t(TURN,THING), not action_t(TURN,gatic,THING).",
              "type_name": "gatic"
            },
            {
              "lark": "ratic: RATIC thing\nRATIC.1: \"ratic\" WS",
              "pddl": "(:action RATIC\n    :parameters (?e - mateny_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (mateny ?e)\n        )\n    :effect (and\n        (stord ?e)\n        (not (mateny ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mateny-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not mateny.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now stord.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ratic is to make something mateny_able and mateny be stord.",
              "asp": "{ action_t(TURN,ratic,THING):at_t(TURN,THING,ROOM),mateny_able(THING),mateny_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nstord_t(TURN+1,THING) :- action_t(TURN,ratic,THING).\nmateny_t(TURN+1,THING) :- turn(TURN), mateny_t(TURN,THING), not action_t(TURN,ratic,THING).",
              "type_name": "ratic"
            },
            {
              "lark": "remic: REMIC thing\nREMIC.1: \"remic\" WS",
              "pddl": "(:action REMIC\n    :parameters (?e - mateny_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (stord ?e)\n        )\n    :effect (and\n        (aphoned ?e)\n        (not (stord ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mateny-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not stord.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now aphoned.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To remic is to make something mateny_able and stord be aphoned.",
              "asp": "{ action_t(TURN,remic,THING):at_t(TURN,THING,ROOM),mateny_able(THING),stord_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naphoned_t(TURN+1,THING) :- action_t(TURN,remic,THING).\nstord_t(TURN+1,THING) :- turn(TURN), stord_t(TURN,THING), not action_t(TURN,remic,THING).",
              "type_name": "remic"
            },
            {
              "lark": "proar: PROAR thing\nPROAR.1: \"proar\" WS",
              "pddl": "(:action PROAR\n    :parameters (?e - mateny_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aphoned ?e)\n        )\n    :effect (and\n        (mateny ?e)\n        (not (aphoned ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mateny-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not aphoned.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now mateny.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To proar is to make something mateny_able and aphoned be mateny.",
              "asp": "{ action_t(TURN,proar,THING):at_t(TURN,THING,ROOM),mateny_able(THING),aphoned_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nmateny_t(TURN+1,THING) :- action_t(TURN,proar,THING).\naphoned_t(TURN+1,THING) :- turn(TURN), aphoned_t(TURN,THING), not action_t(TURN,proar,THING).",
              "type_name": "proar"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "unree",
              "exit_targets": [
                "uness",
                "iness"
              ],
              "max_connections": 1,
              "type_name": "unree"
            },
            {
              "repr_str": "iness",
              "exit_targets": [
                "unree"
              ],
              "max_connections": 3,
              "type_name": "iness"
            },
            {
              "repr_str": "uness",
              "exit_targets": [
                "iness",
                "cally"
              ],
              "max_connections": 2,
              "type_name": "uness"
            },
            {
              "repr_str": "cally",
              "exit_targets": [
                "uness",
                "iness",
                "unree"
              ],
              "max_connections": 2,
              "type_name": "cally"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "subst",
              "traits": [
                "dented_able"
              ],
              "standard_locations": [
                "iness",
                "cally"
              ],
              "type_name": "subst"
            },
            {
              "repr_str": "scont",
              "traits": [
                "dented_able"
              ],
              "standard_locations": [
                "unree"
              ],
              "type_name": "scont"
            },
            {
              "repr_str": "diale",
              "traits": [
                "unsust_able",
                "dented_able"
              ],
              "standard_locations": [
                "cally",
                "uness"
              ],
              "type_name": "diale"
            },
            {
              "repr_str": "sness",
              "traits": [
                "unsust_able",
                "mateny_able"
              ],
              "standard_locations": [
                "cally"
              ],
              "type_name": "sness"
            },
            {
              "repr_str": "mical",
              "traits": [
                "unsust_able",
                "dented_able"
              ],
              "standard_locations": [
                "cally",
                "iness"
              ],
              "type_name": "mical"
            },
            {
              "repr_str": "eness",
              "traits": [
                "unsust_able"
              ],
              "standard_locations": [
                "unree",
                "cally"
              ],
              "type_name": "eness"
            },
            {
              "repr_str": "pante",
              "traits": [
                "unsust_able"
              ],
              "standard_locations": [
                "cally"
              ],
              "type_name": "pante"
            },
            {
              "repr_str": "inat",
              "traits": [
                "mateny_able",
                "dented_able"
              ],
              "standard_locations": [
                "cally"
              ],
              "type_name": "inat"
            },
            {
              "repr_str": "enticed",
              "traits": [
                "dented_able",
                "unsust_able"
              ],
              "standard_locations": [
                "iness"
              ],
              "type_name": "enticed"
            },
            {
              "repr_str": "decte",
              "traits": [
                "mateny_able"
              ],
              "standard_locations": [
                "unree",
                "uness"
              ],
              "type_name": "decte"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "unree",
                  "iness",
                  "uness",
                  "cally"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "subst",
                  "scont",
                  "diale",
                  "sness",
                  "mical",
                  "eness",
                  "pante",
                  "inat",
                  "enticed",
                  "decte",
                  "player",
                  "inventory",
                  "floor"
                ],
                "dented_able": [
                  "subst",
                  "scont",
                  "diale",
                  "mical",
                  "inat",
                  "enticed"
                ],
                "unsust_able": [
                  "diale",
                  "sness",
                  "mical",
                  "eness",
                  "pante",
                  "enticed"
                ],
                "mateny_able": [
                  "sness",
                  "inat",
                  "decte"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "dented",
                  "variable": "e",
                  "mutability": "dented_able"
                },
                {
                  "predicate_id": "unsust",
                  "variable": "e",
                  "mutability": "unsust_able"
                },
                {
                  "predicate_id": "exper",
                  "variable": "e",
                  "mutability": "unsust_able"
                },
                {
                  "predicate_id": "mateny",
                  "variable": "e",
                  "mutability": "mateny_able"
                },
                {
                  "predicate_id": "stord",
                  "variable": "e",
                  "mutability": "mateny_able"
                },
                {
                  "predicate_id": "aphoned",
                  "variable": "e",
                  "mutability": "mateny_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can delly, heted, ousne, unalin, thoty and ceous.\n\nYour goal for this game is: Make the secti unpish, the rably nolog and the imped atory.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(nogia1,uner1)",
            "at(trionee1,natin1)",
            "at(rably1,perced1)",
            "at(stism1,perced1)",
            "at(torish1,perced1)",
            "at(inet1,perced1)",
            "at(nond1,perced1)",
            "at(imped1,trion1)",
            "at(trateler1,uner1)",
            "at(secti1,perced1)",
            "at(player1,perced1)",
            "type(player1,player)",
            "type(secti1,secti)",
            "type(trateler1,trateler)",
            "type(imped1,imped)",
            "type(nond1,nond)",
            "type(inet1,inet)",
            "type(torish1,torish)",
            "type(stism1,stism)",
            "type(rably1,rably)",
            "type(trionee1,trionee)",
            "type(nogia1,nogia)",
            "room(uner1,uner)",
            "room(natin1,natin)",
            "room(trion1,trion)",
            "room(perced1,perced)",
            "atory(trionee1)",
            "atory(stism1)",
            "atory(torish1)",
            "atory(inet1)",
            "aling(nond1)",
            "aling(imped1)",
            "nolog(nogia1)",
            "vater(nond1)",
            "atione(rably1)",
            "exit(uner1,natin1)",
            "exit(natin1,uner1)",
            "exit(trion1,natin1)",
            "exit(perced1,uner1)",
            "exit(uner1,perced1)",
            "exit(natin1,trion1)",
            "unpish_able(secti1)",
            "unpish_able(trateler1)",
            "unpish_able(imped1)",
            "unpish_able(inet1)",
            "unpish_able(rably1)",
            "unpish_able(trionee1)",
            "atory_able(imped1)",
            "atory_able(nond1)",
            "atory_able(inet1)",
            "atory_able(torish1)",
            "atory_able(stism1)",
            "atory_able(trionee1)",
            "nolog_able(nond1)",
            "nolog_able(rably1)",
            "nolog_able(nogia1)"
          ],
          "goal_state": [
            "unpish(secti1)",
            "atory(imped1)",
            "nolog(rably1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "ousne",
              "secti1"
            ],
            [
              "ceous",
              "rably1"
            ],
            [
              "go",
              "uner1"
            ],
            [
              "go",
              "natin1"
            ],
            [
              "go",
              "trion1"
            ],
            [
              "delly",
              "imped1"
            ]
          ],
          "optimal_commands": [
            "ousne secti",
            "ceous rably",
            "go uner",
            "go natin",
            "go trion",
            "delly imped"
          ],
          "action_definitions": [
            {
              "lark": "ousne: OUSNE thing\nOUSNE.1: \"ousne\" WS",
              "pddl": "(:action OUSNE\n    :parameters (?e - unpish_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (unpish ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not unpish-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now unpish.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ousne is to make something unpish_able unpish.",
              "asp": "{ action_t(TURN,ousne,THING):at_t(TURN,THING,ROOM),unpish_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nunpish_t(TURN+1,THING) :- action_t(TURN,ousne,THING).\nunpish_t(TURN+1,THING) :- turn(TURN), unpish_t(TURN,THING).",
              "type_name": "ousne"
            },
            {
              "lark": "heted: HETED thing\nHETED.1: \"heted\" WS",
              "pddl": "(:action HETED\n    :parameters (?e - atory_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (atory ?e)\n        )\n    :effect (and\n        (aling ?e)\n        (not (atory ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not atory-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not atory.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now aling.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To heted is to make something atory_able and atory be aling.",
              "asp": "{ action_t(TURN,heted,THING):at_t(TURN,THING,ROOM),atory_able(THING),atory_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naling_t(TURN+1,THING) :- action_t(TURN,heted,THING).\natory_t(TURN+1,THING) :- turn(TURN), atory_t(TURN,THING), not action_t(TURN,heted,THING).",
              "type_name": "heted"
            },
            {
              "lark": "delly: DELLY thing\nDELLY.1: \"delly\" WS",
              "pddl": "(:action DELLY\n    :parameters (?e - atory_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aling ?e)\n        )\n    :effect (and\n        (atory ?e)\n        (not (aling ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not atory-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not aling.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now atory.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To delly is to make something atory_able and aling be atory.",
              "asp": "{ action_t(TURN,delly,THING):at_t(TURN,THING,ROOM),atory_able(THING),aling_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\natory_t(TURN+1,THING) :- action_t(TURN,delly,THING).\naling_t(TURN+1,THING) :- turn(TURN), aling_t(TURN,THING), not action_t(TURN,delly,THING).",
              "type_name": "delly"
            },
            {
              "lark": "unalin: UNALIN thing\nUNALIN.1: \"unalin\" WS",
              "pddl": "(:action UNALIN\n    :parameters (?e - nolog_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (nolog ?e)\n        )\n    :effect (and\n        (vater ?e)\n        (not (nolog ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nolog-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not nolog.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now vater.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To unalin is to make something nolog_able and nolog be vater.",
              "asp": "{ action_t(TURN,unalin,THING):at_t(TURN,THING,ROOM),nolog_able(THING),nolog_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nvater_t(TURN+1,THING) :- action_t(TURN,unalin,THING).\nnolog_t(TURN+1,THING) :- turn(TURN), nolog_t(TURN,THING), not action_t(TURN,unalin,THING).",
              "type_name": "unalin"
            },
            {
              "lark": "thoty: THOTY thing\nTHOTY.1: \"thoty\" WS",
              "pddl": "(:action THOTY\n    :parameters (?e - nolog_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (vater ?e)\n        )\n    :effect (and\n        (atione ?e)\n        (not (vater ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nolog-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not vater.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now atione.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To thoty is to make something nolog_able and vater be atione.",
              "asp": "{ action_t(TURN,thoty,THING):at_t(TURN,THING,ROOM),nolog_able(THING),vater_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\natione_t(TURN+1,THING) :- action_t(TURN,thoty,THING).\nvater_t(TURN+1,THING) :- turn(TURN), vater_t(TURN,THING), not action_t(TURN,thoty,THING).",
              "type_name": "thoty"
            },
            {
              "lark": "ceous: CEOUS thing\nCEOUS.1: \"ceous\" WS",
              "pddl": "(:action CEOUS\n    :parameters (?e - nolog_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (atione ?e)\n        )\n    :effect (and\n        (nolog ?e)\n        (not (atione ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nolog-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not atione.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now nolog.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ceous is to make something nolog_able and atione be nolog.",
              "asp": "{ action_t(TURN,ceous,THING):at_t(TURN,THING,ROOM),nolog_able(THING),atione_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nnolog_t(TURN+1,THING) :- action_t(TURN,ceous,THING).\natione_t(TURN+1,THING) :- turn(TURN), atione_t(TURN,THING), not action_t(TURN,ceous,THING).",
              "type_name": "ceous"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "uner",
              "exit_targets": [
                "trion",
                "natin"
              ],
              "max_connections": 1,
              "type_name": "uner"
            },
            {
              "repr_str": "natin",
              "exit_targets": [
                "uner"
              ],
              "max_connections": 3,
              "type_name": "natin"
            },
            {
              "repr_str": "trion",
              "exit_targets": [
                "natin",
                "perced"
              ],
              "max_connections": 2,
              "type_name": "trion"
            },
            {
              "repr_str": "perced",
              "exit_targets": [
                "trion",
                "natin",
                "uner"
              ],
              "max_connections": 2,
              "type_name": "perced"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "secti",
              "traits": [
                "unpish_able"
              ],
              "standard_locations": [
                "natin",
                "perced"
              ],
              "type_name": "secti"
            },
            {
              "repr_str": "trateler",
              "traits": [
                "unpish_able"
              ],
              "standard_locations": [
                "uner"
              ],
              "type_name": "trateler"
            },
            {
              "repr_str": "imped",
              "traits": [
                "atory_able",
                "unpish_able"
              ],
              "standard_locations": [
                "perced",
                "trion"
              ],
              "type_name": "imped"
            },
            {
              "repr_str": "nond",
              "traits": [
                "atory_able",
                "nolog_able"
              ],
              "standard_locations": [
                "perced"
              ],
              "type_name": "nond"
            },
            {
              "repr_str": "inet",
              "traits": [
                "atory_able",
                "unpish_able"
              ],
              "standard_locations": [
                "perced",
                "natin"
              ],
              "type_name": "inet"
            },
            {
              "repr_str": "torish",
              "traits": [
                "atory_able"
              ],
              "standard_locations": [
                "uner",
                "perced"
              ],
              "type_name": "torish"
            },
            {
              "repr_str": "stism",
              "traits": [
                "atory_able"
              ],
              "standard_locations": [
                "perced"
              ],
              "type_name": "stism"
            },
            {
              "repr_str": "rably",
              "traits": [
                "nolog_able",
                "unpish_able"
              ],
              "standard_locations": [
                "perced"
              ],
              "type_name": "rably"
            },
            {
              "repr_str": "trionee",
              "traits": [
                "unpish_able",
                "atory_able"
              ],
              "standard_locations": [
                "natin"
              ],
              "type_name": "trionee"
            },
            {
              "repr_str": "nogia",
              "traits": [
                "nolog_able"
              ],
              "standard_locations": [
                "uner",
                "trion"
              ],
              "type_name": "nogia"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "uner",
                  "natin",
                  "trion",
                  "perced"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "secti",
                  "trateler",
                  "imped",
                  "nond",
                  "inet",
                  "torish",
                  "stism",
                  "rably",
                  "trionee",
                  "nogia",
                  "player",
                  "inventory",
                  "floor"
                ],
                "unpish_able": [
                  "secti",
                  "trateler",
                  "imped",
                  "inet",
                  "rably",
                  "trionee"
                ],
                "atory_able": [
                  "imped",
                  "nond",
                  "inet",
                  "torish",
                  "stism",
                  "trionee"
                ],
                "nolog_able": [
                  "nond",
                  "rably",
                  "nogia"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "unpish",
                  "variable": "e",
                  "mutability": "unpish_able"
                },
                {
                  "predicate_id": "atory",
                  "variable": "e",
                  "mutability": "atory_able"
                },
                {
                  "predicate_id": "aling",
                  "variable": "e",
                  "mutability": "atory_able"
                },
                {
                  "predicate_id": "nolog",
                  "variable": "e",
                  "mutability": "nolog_able"
                },
                {
                  "predicate_id": "vater",
                  "variable": "e",
                  "mutability": "nolog_able"
                },
                {
                  "predicate_id": "atione",
                  "variable": "e",
                  "mutability": "nolog_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can latory, tedne, derman, tuate, chross and sulphy.\n\nYour goal for this game is: Make the tulacy enerk, the menny soriced and the ortid alism.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(reele1,penol1)",
            "at(inging1,micon1)",
            "at(menny1,catint1)",
            "at(rist1,catint1)",
            "at(sioust1,catint1)",
            "at(pacia1,catint1)",
            "at(unflued1,catint1)",
            "at(tulacy1,fress1)",
            "at(uncest1,penol1)",
            "at(ortid1,catint1)",
            "at(player1,catint1)",
            "type(player1,player)",
            "type(ortid1,ortid)",
            "type(uncest1,uncest)",
            "type(tulacy1,tulacy)",
            "type(unflued1,unflued)",
            "type(pacia1,pacia)",
            "type(sioust1,sioust)",
            "type(rist1,rist)",
            "type(menny1,menny)",
            "type(inging1,inging)",
            "type(reele1,reele)",
            "room(penol1,penol)",
            "room(micon1,micon)",
            "room(fress1,fress)",
            "room(catint1,catint)",
            "enerk(inging1)",
            "enerk(rist1)",
            "enerk(sioust1)",
            "enerk(pacia1)",
            "prustic(unflued1)",
            "prustic(tulacy1)",
            "soriced(reele1)",
            "logal(unflued1)",
            "ramiced(menny1)",
            "exit(penol1,micon1)",
            "exit(micon1,penol1)",
            "exit(fress1,micon1)",
            "exit(catint1,penol1)",
            "exit(penol1,catint1)",
            "exit(micon1,fress1)",
            "alism_able(ortid1)",
            "alism_able(uncest1)",
            "alism_able(tulacy1)",
            "alism_able(pacia1)",
            "alism_able(menny1)",
            "alism_able(inging1)",
            "enerk_able(tulacy1)",
            "enerk_able(unflued1)",
            "enerk_able(pacia1)",
            "enerk_able(sioust1)",
            "enerk_able(rist1)",
            "enerk_able(inging1)",
            "soriced_able(unflued1)",
            "soriced_able(menny1)",
            "soriced_able(reele1)"
          ],
          "goal_state": [
            "alism(ortid1)",
            "enerk(tulacy1)",
            "soriced(menny1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "sulphy",
              "ortid1"
            ],
            [
              "latory",
              "menny1"
            ],
            [
              "go",
              "penol1"
            ],
            [
              "go",
              "micon1"
            ],
            [
              "go",
              "fress1"
            ],
            [
              "tedne",
              "tulacy1"
            ]
          ],
          "optimal_commands": [
            "sulphy ortid",
            "latory menny",
            "go penol",
            "go micon",
            "go fress",
            "tedne tulacy"
          ],
          "action_definitions": [
            {
              "lark": "sulphy: SULPHY thing\nSULPHY.1: \"sulphy\" WS",
              "pddl": "(:action SULPHY\n    :parameters (?e - alism_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (alism ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not alism-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now alism.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To sulphy is to make something alism_able alism.",
              "asp": "{ action_t(TURN,sulphy,THING):at_t(TURN,THING,ROOM),alism_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nalism_t(TURN+1,THING) :- action_t(TURN,sulphy,THING).\nalism_t(TURN+1,THING) :- turn(TURN), alism_t(TURN,THING).",
              "type_name": "sulphy"
            },
            {
              "lark": "derman: DERMAN thing\nDERMAN.1: \"derman\" WS",
              "pddl": "(:action DERMAN\n    :parameters (?e - enerk_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (enerk ?e)\n        )\n    :effect (and\n        (prustic ?e)\n        (not (enerk ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not enerk-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not enerk.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now prustic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To derman is to make something enerk_able and enerk be prustic.",
              "asp": "{ action_t(TURN,derman,THING):at_t(TURN,THING,ROOM),enerk_able(THING),enerk_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nprustic_t(TURN+1,THING) :- action_t(TURN,derman,THING).\nenerk_t(TURN+1,THING) :- turn(TURN), enerk_t(TURN,THING), not action_t(TURN,derman,THING).",
              "type_name": "derman"
            },
            {
              "lark": "tedne: TEDNE thing\nTEDNE.1: \"tedne\" WS",
              "pddl": "(:action TEDNE\n    :parameters (?e - enerk_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (prustic ?e)\n        )\n    :effect (and\n        (enerk ?e)\n        (not (prustic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not enerk-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not prustic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now enerk.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tedne is to make something enerk_able and prustic be enerk.",
              "asp": "{ action_t(TURN,tedne,THING):at_t(TURN,THING,ROOM),enerk_able(THING),prustic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nenerk_t(TURN+1,THING) :- action_t(TURN,tedne,THING).\nprustic_t(TURN+1,THING) :- turn(TURN), prustic_t(TURN,THING), not action_t(TURN,tedne,THING).",
              "type_name": "tedne"
            },
            {
              "lark": "tuate: TUATE thing\nTUATE.1: \"tuate\" WS",
              "pddl": "(:action TUATE\n    :parameters (?e - soriced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (soriced ?e)\n        )\n    :effect (and\n        (logal ?e)\n        (not (soriced ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not soriced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not soriced.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now logal.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tuate is to make something soriced_able and soriced be logal.",
              "asp": "{ action_t(TURN,tuate,THING):at_t(TURN,THING,ROOM),soriced_able(THING),soriced_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nlogal_t(TURN+1,THING) :- action_t(TURN,tuate,THING).\nsoriced_t(TURN+1,THING) :- turn(TURN), soriced_t(TURN,THING), not action_t(TURN,tuate,THING).",
              "type_name": "tuate"
            },
            {
              "lark": "chross: CHROSS thing\nCHROSS.1: \"chross\" WS",
              "pddl": "(:action CHROSS\n    :parameters (?e - soriced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (logal ?e)\n        )\n    :effect (and\n        (ramiced ?e)\n        (not (logal ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not soriced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not logal.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ramiced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To chross is to make something soriced_able and logal be ramiced.",
              "asp": "{ action_t(TURN,chross,THING):at_t(TURN,THING,ROOM),soriced_able(THING),logal_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nramiced_t(TURN+1,THING) :- action_t(TURN,chross,THING).\nlogal_t(TURN+1,THING) :- turn(TURN), logal_t(TURN,THING), not action_t(TURN,chross,THING).",
              "type_name": "chross"
            },
            {
              "lark": "latory: LATORY thing\nLATORY.1: \"latory\" WS",
              "pddl": "(:action LATORY\n    :parameters (?e - soriced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ramiced ?e)\n        )\n    :effect (and\n        (soriced ?e)\n        (not (ramiced ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not soriced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ramiced.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now soriced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To latory is to make something soriced_able and ramiced be soriced.",
              "asp": "{ action_t(TURN,latory,THING):at_t(TURN,THING,ROOM),soriced_able(THING),ramiced_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nsoriced_t(TURN+1,THING) :- action_t(TURN,latory,THING).\nramiced_t(TURN+1,THING) :- turn(TURN), ramiced_t(TURN,THING), not action_t(TURN,latory,THING).",
              "type_name": "latory"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "penol",
              "exit_targets": [
                "fress",
                "micon"
              ],
              "max_connections": 1,
              "type_name": "penol"
            },
            {
              "repr_str": "micon",
              "exit_targets": [
                "penol"
              ],
              "max_connections": 3,
              "type_name": "micon"
            },
            {
              "repr_str": "fress",
              "exit_targets": [
                "micon",
                "catint"
              ],
              "max_connections": 2,
              "type_name": "fress"
            },
            {
              "repr_str": "catint",
              "exit_targets": [
                "fress",
                "micon",
                "penol"
              ],
              "max_connections": 2,
              "type_name": "catint"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "ortid",
              "traits": [
                "alism_able"
              ],
              "standard_locations": [
                "micon",
                "catint"
              ],
              "type_name": "ortid"
            },
            {
              "repr_str": "uncest",
              "traits": [
                "alism_able"
              ],
              "standard_locations": [
                "penol"
              ],
              "type_name": "uncest"
            },
            {
              "repr_str": "tulacy",
              "traits": [
                "enerk_able",
                "alism_able"
              ],
              "standard_locations": [
                "catint",
                "fress"
              ],
              "type_name": "tulacy"
            },
            {
              "repr_str": "unflued",
              "traits": [
                "enerk_able",
                "soriced_able"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "unflued"
            },
            {
              "repr_str": "pacia",
              "traits": [
                "enerk_able",
                "alism_able"
              ],
              "standard_locations": [
                "catint",
                "micon"
              ],
              "type_name": "pacia"
            },
            {
              "repr_str": "sioust",
              "traits": [
                "enerk_able"
              ],
              "standard_locations": [
                "penol",
                "catint"
              ],
              "type_name": "sioust"
            },
            {
              "repr_str": "rist",
              "traits": [
                "enerk_able"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "rist"
            },
            {
              "repr_str": "menny",
              "traits": [
                "soriced_able",
                "alism_able"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "menny"
            },
            {
              "repr_str": "inging",
              "traits": [
                "alism_able",
                "enerk_able"
              ],
              "standard_locations": [
                "micon"
              ],
              "type_name": "inging"
            },
            {
              "repr_str": "reele",
              "traits": [
                "soriced_able"
              ],
              "standard_locations": [
                "penol",
                "fress"
              ],
              "type_name": "reele"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "penol",
                  "micon",
                  "fress",
                  "catint"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "ortid",
                  "uncest",
                  "tulacy",
                  "unflued",
                  "pacia",
                  "sioust",
                  "rist",
                  "menny",
                  "inging",
                  "reele",
                  "player",
                  "inventory",
                  "floor"
                ],
                "alism_able": [
                  "ortid",
                  "uncest",
                  "tulacy",
                  "pacia",
                  "menny",
                  "inging"
                ],
                "enerk_able": [
                  "tulacy",
                  "unflued",
                  "pacia",
                  "sioust",
                  "rist",
                  "inging"
                ],
                "soriced_able": [
                  "unflued",
                  "menny",
                  "reele"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "alism",
                  "variable": "e",
                  "mutability": "alism_able"
                },
                {
                  "predicate_id": "enerk",
                  "variable": "e",
                  "mutability": "enerk_able"
                },
                {
                  "predicate_id": "prustic",
                  "variable": "e",
                  "mutability": "enerk_able"
                },
                {
                  "predicate_id": "soriced",
                  "variable": "e",
                  "mutability": "soriced_able"
                },
                {
                  "predicate_id": "logal",
                  "variable": "e",
                  "mutability": "soriced_able"
                },
                {
                  "predicate_id": "ramiced",
                  "variable": "e",
                  "mutability": "soriced_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can seash, andect, lotis, belity, irear and deint.\n\nYour goal for this game is: Make the prolly lingly, the proark incry and the acion arliced.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(dermin1,comper1)",
            "at(intler1,comess1)",
            "at(prolly1,distral1)",
            "at(rabish1,distral1)",
            "at(hypner1,distral1)",
            "at(shness1,distral1)",
            "at(arger1,distral1)",
            "at(acion1,atent1)",
            "at(evism1,comper1)",
            "at(proark1,distral1)",
            "at(player1,distral1)",
            "type(player1,player)",
            "type(proark1,proark)",
            "type(evism1,evism)",
            "type(acion1,acion)",
            "type(arger1,arger)",
            "type(shness1,shness)",
            "type(hypner1,hypner)",
            "type(rabish1,rabish)",
            "type(prolly1,prolly)",
            "type(intler1,intler)",
            "type(dermin1,dermin)",
            "room(comper1,comper)",
            "room(comess1,comess)",
            "room(atent1,atent)",
            "room(distral1,distral)",
            "arliced(intler1)",
            "arliced(rabish1)",
            "arliced(hypner1)",
            "arliced(shness1)",
            "roply(arger1)",
            "roply(acion1)",
            "lingly(dermin1)",
            "riat(arger1)",
            "psessy(prolly1)",
            "exit(comper1,comess1)",
            "exit(comess1,comper1)",
            "exit(atent1,comess1)",
            "exit(distral1,comper1)",
            "exit(comper1,distral1)",
            "exit(comess1,atent1)",
            "incry_able(proark1)",
            "incry_able(evism1)",
            "incry_able(acion1)",
            "incry_able(shness1)",
            "incry_able(prolly1)",
            "incry_able(intler1)",
            "arliced_able(acion1)",
            "arliced_able(arger1)",
            "arliced_able(shness1)",
            "arliced_able(hypner1)",
            "arliced_able(rabish1)",
            "arliced_able(intler1)",
            "lingly_able(arger1)",
            "lingly_able(prolly1)",
            "lingly_able(dermin1)"
          ],
          "goal_state": [
            "incry(proark1)",
            "arliced(acion1)",
            "lingly(prolly1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "deint",
              "proark1"
            ],
            [
              "lotis",
              "prolly1"
            ],
            [
              "go",
              "comper1"
            ],
            [
              "go",
              "comess1"
            ],
            [
              "go",
              "atent1"
            ],
            [
              "irear",
              "acion1"
            ]
          ],
          "optimal_commands": [
            "deint proark",
            "lotis prolly",
            "go comper",
            "go comess",
            "go atent",
            "irear acion"
          ],
          "action_definitions": [
            {
              "lark": "deint: DEINT thing\nDEINT.1: \"deint\" WS",
              "pddl": "(:action DEINT\n    :parameters (?e - incry_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (incry ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not incry-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now incry.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To deint is to make something incry_able incry.",
              "asp": "{ action_t(TURN,deint,THING):at_t(TURN,THING,ROOM),incry_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nincry_t(TURN+1,THING) :- action_t(TURN,deint,THING).\nincry_t(TURN+1,THING) :- turn(TURN), incry_t(TURN,THING).",
              "type_name": "deint"
            },
            {
              "lark": "seash: SEASH thing\nSEASH.1: \"seash\" WS",
              "pddl": "(:action SEASH\n    :parameters (?e - arliced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (arliced ?e)\n        )\n    :effect (and\n        (roply ?e)\n        (not (arliced ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not arliced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not arliced.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now roply.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To seash is to make something arliced_able and arliced be roply.",
              "asp": "{ action_t(TURN,seash,THING):at_t(TURN,THING,ROOM),arliced_able(THING),arliced_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nroply_t(TURN+1,THING) :- action_t(TURN,seash,THING).\narliced_t(TURN+1,THING) :- turn(TURN), arliced_t(TURN,THING), not action_t(TURN,seash,THING).",
              "type_name": "seash"
            },
            {
              "lark": "irear: IREAR thing\nIREAR.1: \"irear\" WS",
              "pddl": "(:action IREAR\n    :parameters (?e - arliced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (roply ?e)\n        )\n    :effect (and\n        (arliced ?e)\n        (not (roply ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not arliced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not roply.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now arliced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To irear is to make something arliced_able and roply be arliced.",
              "asp": "{ action_t(TURN,irear,THING):at_t(TURN,THING,ROOM),arliced_able(THING),roply_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\narliced_t(TURN+1,THING) :- action_t(TURN,irear,THING).\nroply_t(TURN+1,THING) :- turn(TURN), roply_t(TURN,THING), not action_t(TURN,irear,THING).",
              "type_name": "irear"
            },
            {
              "lark": "belity: BELITY thing\nBELITY.1: \"belity\" WS",
              "pddl": "(:action BELITY\n    :parameters (?e - lingly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (lingly ?e)\n        )\n    :effect (and\n        (riat ?e)\n        (not (lingly ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lingly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not lingly.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now riat.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To belity is to make something lingly_able and lingly be riat.",
              "asp": "{ action_t(TURN,belity,THING):at_t(TURN,THING,ROOM),lingly_able(THING),lingly_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nriat_t(TURN+1,THING) :- action_t(TURN,belity,THING).\nlingly_t(TURN+1,THING) :- turn(TURN), lingly_t(TURN,THING), not action_t(TURN,belity,THING).",
              "type_name": "belity"
            },
            {
              "lark": "andect: ANDECT thing\nANDECT.1: \"andect\" WS",
              "pddl": "(:action ANDECT\n    :parameters (?e - lingly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (riat ?e)\n        )\n    :effect (and\n        (psessy ?e)\n        (not (riat ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lingly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not riat.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now psessy.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To andect is to make something lingly_able and riat be psessy.",
              "asp": "{ action_t(TURN,andect,THING):at_t(TURN,THING,ROOM),lingly_able(THING),riat_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\npsessy_t(TURN+1,THING) :- action_t(TURN,andect,THING).\nriat_t(TURN+1,THING) :- turn(TURN), riat_t(TURN,THING), not action_t(TURN,andect,THING).",
              "type_name": "andect"
            },
            {
              "lark": "lotis: LOTIS thing\nLOTIS.1: \"lotis\" WS",
              "pddl": "(:action LOTIS\n    :parameters (?e - lingly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (psessy ?e)\n        )\n    :effect (and\n        (lingly ?e)\n        (not (psessy ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lingly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not psessy.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now lingly.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lotis is to make something lingly_able and psessy be lingly.",
              "asp": "{ action_t(TURN,lotis,THING):at_t(TURN,THING,ROOM),lingly_able(THING),psessy_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nlingly_t(TURN+1,THING) :- action_t(TURN,lotis,THING).\npsessy_t(TURN+1,THING) :- turn(TURN), psessy_t(TURN,THING), not action_t(TURN,lotis,THING).",
              "type_name": "lotis"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "comper",
              "exit_targets": [
                "atent",
                "comess"
              ],
              "max_connections": 1,
              "type_name": "comper"
            },
            {
              "repr_str": "comess",
              "exit_targets": [
                "comper"
              ],
              "max_connections": 3,
              "type_name": "comess"
            },
            {
              "repr_str": "atent",
              "exit_targets": [
                "comess",
                "distral"
              ],
              "max_connections": 2,
              "type_name": "atent"
            },
            {
              "repr_str": "distral",
              "exit_targets": [
                "atent",
                "comess",
                "comper"
              ],
              "max_connections": 2,
              "type_name": "distral"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "proark",
              "traits": [
                "incry_able"
              ],
              "standard_locations": [
                "comess",
                "distral"
              ],
              "type_name": "proark"
            },
            {
              "repr_str": "evism",
              "traits": [
                "incry_able"
              ],
              "standard_locations": [
                "comper"
              ],
              "type_name": "evism"
            },
            {
              "repr_str": "acion",
              "traits": [
                "arliced_able",
                "incry_able"
              ],
              "standard_locations": [
                "distral",
                "atent"
              ],
              "type_name": "acion"
            },
            {
              "repr_str": "arger",
              "traits": [
                "arliced_able",
                "lingly_able"
              ],
              "standard_locations": [
                "distral"
              ],
              "type_name": "arger"
            },
            {
              "repr_str": "shness",
              "traits": [
                "arliced_able",
                "incry_able"
              ],
              "standard_locations": [
                "distral",
                "comess"
              ],
              "type_name": "shness"
            },
            {
              "repr_str": "hypner",
              "traits": [
                "arliced_able"
              ],
              "standard_locations": [
                "comper",
                "distral"
              ],
              "type_name": "hypner"
            },
            {
              "repr_str": "rabish",
              "traits": [
                "arliced_able"
              ],
              "standard_locations": [
                "distral"
              ],
              "type_name": "rabish"
            },
            {
              "repr_str": "prolly",
              "traits": [
                "lingly_able",
                "incry_able"
              ],
              "standard_locations": [
                "distral"
              ],
              "type_name": "prolly"
            },
            {
              "repr_str": "intler",
              "traits": [
                "incry_able",
                "arliced_able"
              ],
              "standard_locations": [
                "comess"
              ],
              "type_name": "intler"
            },
            {
              "repr_str": "dermin",
              "traits": [
                "lingly_able"
              ],
              "standard_locations": [
                "comper",
                "atent"
              ],
              "type_name": "dermin"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "comper",
                  "comess",
                  "atent",
                  "distral"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "proark",
                  "evism",
                  "acion",
                  "arger",
                  "shness",
                  "hypner",
                  "rabish",
                  "prolly",
                  "intler",
                  "dermin",
                  "player",
                  "inventory",
                  "floor"
                ],
                "incry_able": [
                  "proark",
                  "evism",
                  "acion",
                  "shness",
                  "prolly",
                  "intler"
                ],
                "arliced_able": [
                  "acion",
                  "arger",
                  "shness",
                  "hypner",
                  "rabish",
                  "intler"
                ],
                "lingly_able": [
                  "arger",
                  "prolly",
                  "dermin"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "incry",
                  "variable": "e",
                  "mutability": "incry_able"
                },
                {
                  "predicate_id": "arliced",
                  "variable": "e",
                  "mutability": "arliced_able"
                },
                {
                  "predicate_id": "roply",
                  "variable": "e",
                  "mutability": "arliced_able"
                },
                {
                  "predicate_id": "lingly",
                  "variable": "e",
                  "mutability": "lingly_able"
                },
                {
                  "predicate_id": "riat",
                  "variable": "e",
                  "mutability": "lingly_able"
                },
                {
                  "predicate_id": "psessy",
                  "variable": "e",
                  "mutability": "lingly_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can iscad, eriat, ovesis, mingne, setral and lepht.\n\nYour goal for this game is: Make the strood aphistic, the aciong dolam and the swaiced ailly.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(ostion1,stful1)",
            "at(pyelly1,emoust1)",
            "at(strood1,encal1)",
            "at(eucty1,encal1)",
            "at(inchan1,encal1)",
            "at(oming1,encal1)",
            "at(perent1,encal1)",
            "at(swaiced1,etiont1)",
            "at(oroust1,stful1)",
            "at(aciong1,encal1)",
            "at(player1,encal1)",
            "type(player1,player)",
            "type(aciong1,aciong)",
            "type(oroust1,oroust)",
            "type(swaiced1,swaiced)",
            "type(perent1,perent)",
            "type(oming1,oming)",
            "type(inchan1,inchan)",
            "type(eucty1,eucty)",
            "type(strood1,strood)",
            "type(pyelly1,pyelly)",
            "type(ostion1,ostion)",
            "room(stful1,stful)",
            "room(emoust1,emoust)",
            "room(etiont1,etiont)",
            "room(encal1,encal)",
            "ailly(pyelly1)",
            "ailly(eucty1)",
            "ailly(inchan1)",
            "ailly(oming1)",
            "retart(perent1)",
            "retart(swaiced1)",
            "aphistic(ostion1)",
            "olict(perent1)",
            "eriated(strood1)",
            "exit(stful1,emoust1)",
            "exit(emoust1,stful1)",
            "exit(etiont1,emoust1)",
            "exit(encal1,stful1)",
            "exit(stful1,encal1)",
            "exit(emoust1,etiont1)",
            "dolam_able(aciong1)",
            "dolam_able(oroust1)",
            "dolam_able(swaiced1)",
            "dolam_able(oming1)",
            "dolam_able(strood1)",
            "dolam_able(pyelly1)",
            "ailly_able(swaiced1)",
            "ailly_able(perent1)",
            "ailly_able(oming1)",
            "ailly_able(inchan1)",
            "ailly_able(eucty1)",
            "ailly_able(pyelly1)",
            "aphistic_able(perent1)",
            "aphistic_able(strood1)",
            "aphistic_able(ostion1)"
          ],
          "goal_state": [
            "dolam(aciong1)",
            "ailly(swaiced1)",
            "aphistic(strood1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "eriat",
              "aciong1"
            ],
            [
              "setral",
              "strood1"
            ],
            [
              "go",
              "stful1"
            ],
            [
              "go",
              "emoust1"
            ],
            [
              "go",
              "etiont1"
            ],
            [
              "mingne",
              "swaiced1"
            ]
          ],
          "optimal_commands": [
            "eriat aciong",
            "setral strood",
            "go stful",
            "go emoust",
            "go etiont",
            "mingne swaiced"
          ],
          "action_definitions": [
            {
              "lark": "eriat: ERIAT thing\nERIAT.1: \"eriat\" WS",
              "pddl": "(:action ERIAT\n    :parameters (?e - dolam_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (dolam ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not dolam-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now dolam.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To eriat is to make something dolam_able dolam.",
              "asp": "{ action_t(TURN,eriat,THING):at_t(TURN,THING,ROOM),dolam_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ndolam_t(TURN+1,THING) :- action_t(TURN,eriat,THING).\ndolam_t(TURN+1,THING) :- turn(TURN), dolam_t(TURN,THING).",
              "type_name": "eriat"
            },
            {
              "lark": "ovesis: OVESIS thing\nOVESIS.1: \"ovesis\" WS",
              "pddl": "(:action OVESIS\n    :parameters (?e - ailly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ailly ?e)\n        )\n    :effect (and\n        (retart ?e)\n        (not (ailly ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ailly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ailly.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now retart.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ovesis is to make something ailly_able and ailly be retart.",
              "asp": "{ action_t(TURN,ovesis,THING):at_t(TURN,THING,ROOM),ailly_able(THING),ailly_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nretart_t(TURN+1,THING) :- action_t(TURN,ovesis,THING).\nailly_t(TURN+1,THING) :- turn(TURN), ailly_t(TURN,THING), not action_t(TURN,ovesis,THING).",
              "type_name": "ovesis"
            },
            {
              "lark": "mingne: MINGNE thing\nMINGNE.1: \"mingne\" WS",
              "pddl": "(:action MINGNE\n    :parameters (?e - ailly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (retart ?e)\n        )\n    :effect (and\n        (ailly ?e)\n        (not (retart ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ailly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not retart.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ailly.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To mingne is to make something ailly_able and retart be ailly.",
              "asp": "{ action_t(TURN,mingne,THING):at_t(TURN,THING,ROOM),ailly_able(THING),retart_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nailly_t(TURN+1,THING) :- action_t(TURN,mingne,THING).\nretart_t(TURN+1,THING) :- turn(TURN), retart_t(TURN,THING), not action_t(TURN,mingne,THING).",
              "type_name": "mingne"
            },
            {
              "lark": "lepht: LEPHT thing\nLEPHT.1: \"lepht\" WS",
              "pddl": "(:action LEPHT\n    :parameters (?e - aphistic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aphistic ?e)\n        )\n    :effect (and\n        (olict ?e)\n        (not (aphistic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aphistic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not aphistic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now olict.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lepht is to make something aphistic_able and aphistic be olict.",
              "asp": "{ action_t(TURN,lepht,THING):at_t(TURN,THING,ROOM),aphistic_able(THING),aphistic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nolict_t(TURN+1,THING) :- action_t(TURN,lepht,THING).\naphistic_t(TURN+1,THING) :- turn(TURN), aphistic_t(TURN,THING), not action_t(TURN,lepht,THING).",
              "type_name": "lepht"
            },
            {
              "lark": "iscad: ISCAD thing\nISCAD.1: \"iscad\" WS",
              "pddl": "(:action ISCAD\n    :parameters (?e - aphistic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (olict ?e)\n        )\n    :effect (and\n        (eriated ?e)\n        (not (olict ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aphistic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not olict.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now eriated.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To iscad is to make something aphistic_able and olict be eriated.",
              "asp": "{ action_t(TURN,iscad,THING):at_t(TURN,THING,ROOM),aphistic_able(THING),olict_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\neriated_t(TURN+1,THING) :- action_t(TURN,iscad,THING).\nolict_t(TURN+1,THING) :- turn(TURN), olict_t(TURN,THING), not action_t(TURN,iscad,THING).",
              "type_name": "iscad"
            },
            {
              "lark": "setral: SETRAL thing\nSETRAL.1: \"setral\" WS",
              "pddl": "(:action SETRAL\n    :parameters (?e - aphistic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (eriated ?e)\n        )\n    :effect (and\n        (aphistic ?e)\n        (not (eriated ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aphistic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not eriated.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now aphistic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To setral is to make something aphistic_able and eriated be aphistic.",
              "asp": "{ action_t(TURN,setral,THING):at_t(TURN,THING,ROOM),aphistic_able(THING),eriated_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naphistic_t(TURN+1,THING) :- action_t(TURN,setral,THING).\neriated_t(TURN+1,THING) :- turn(TURN), eriated_t(TURN,THING), not action_t(TURN,setral,THING).",
              "type_name": "setral"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "stful",
              "exit_targets": [
                "etiont",
                "emoust"
              ],
              "max_connections": 1,
              "type_name": "stful"
            },
            {
              "repr_str": "emoust",
              "exit_targets": [
                "stful"
              ],
              "max_connections": 3,
              "type_name": "emoust"
            },
            {
              "repr_str": "etiont",
              "exit_targets": [
                "emoust",
                "encal"
              ],
              "max_connections": 2,
              "type_name": "etiont"
            },
            {
              "repr_str": "encal",
              "exit_targets": [
                "etiont",
                "emoust",
                "stful"
              ],
              "max_connections": 2,
              "type_name": "encal"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "aciong",
              "traits": [
                "dolam_able"
              ],
              "standard_locations": [
                "emoust",
                "encal"
              ],
              "type_name": "aciong"
            },
            {
              "repr_str": "oroust",
              "traits": [
                "dolam_able"
              ],
              "standard_locations": [
                "stful"
              ],
              "type_name": "oroust"
            },
            {
              "repr_str": "swaiced",
              "traits": [
                "ailly_able",
                "dolam_able"
              ],
              "standard_locations": [
                "encal",
                "etiont"
              ],
              "type_name": "swaiced"
            },
            {
              "repr_str": "perent",
              "traits": [
                "ailly_able",
                "aphistic_able"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "perent"
            },
            {
              "repr_str": "oming",
              "traits": [
                "ailly_able",
                "dolam_able"
              ],
              "standard_locations": [
                "encal",
                "emoust"
              ],
              "type_name": "oming"
            },
            {
              "repr_str": "inchan",
              "traits": [
                "ailly_able"
              ],
              "standard_locations": [
                "stful",
                "encal"
              ],
              "type_name": "inchan"
            },
            {
              "repr_str": "eucty",
              "traits": [
                "ailly_able"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "eucty"
            },
            {
              "repr_str": "strood",
              "traits": [
                "aphistic_able",
                "dolam_able"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "strood"
            },
            {
              "repr_str": "pyelly",
              "traits": [
                "dolam_able",
                "ailly_able"
              ],
              "standard_locations": [
                "emoust"
              ],
              "type_name": "pyelly"
            },
            {
              "repr_str": "ostion",
              "traits": [
                "aphistic_able"
              ],
              "standard_locations": [
                "stful",
                "etiont"
              ],
              "type_name": "ostion"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "stful",
                  "emoust",
                  "etiont",
                  "encal"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "aciong",
                  "oroust",
                  "swaiced",
                  "perent",
                  "oming",
                  "inchan",
                  "eucty",
                  "strood",
                  "pyelly",
                  "ostion",
                  "player",
                  "inventory",
                  "floor"
                ],
                "dolam_able": [
                  "aciong",
                  "oroust",
                  "swaiced",
                  "oming",
                  "strood",
                  "pyelly"
                ],
                "ailly_able": [
                  "swaiced",
                  "perent",
                  "oming",
                  "inchan",
                  "eucty",
                  "pyelly"
                ],
                "aphistic_able": [
                  "perent",
                  "strood",
                  "ostion"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "dolam",
                  "variable": "e",
                  "mutability": "dolam_able"
                },
                {
                  "predicate_id": "ailly",
                  "variable": "e",
                  "mutability": "ailly_able"
                },
                {
                  "predicate_id": "retart",
                  "variable": "e",
                  "mutability": "ailly_able"
                },
                {
                  "predicate_id": "aphistic",
                  "variable": "e",
                  "mutability": "aphistic_able"
                },
                {
                  "predicate_id": "olict",
                  "variable": "e",
                  "mutability": "aphistic_able"
                },
                {
                  "predicate_id": "eriated",
                  "variable": "e",
                  "mutability": "aphistic_able"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "potion_brewing_basic_undefined",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
		    "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
		    "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
			"type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
			"type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
			"type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
			"type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
			"type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,garden1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(book1,bed1)",
            "on(potionrecipe1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Corvidae potion\nIngredients: Water, banana, peach, eye of newt.\n1. Pour water into your cauldron.\n2. Mix the liquid using a borpulus.\n3. Add the eye of newt into your cauldron.\n4. Swirl a zulpowand over your cauldron.\n5. Put the banana into your cauldron.\n6. Put the peach into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 24,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "zulpowand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "zulpowand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "take",
              "eyeofnewt1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "put",
              "banana1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "put",
              "eyeofnewt1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "water1",
              "borpulus1"
            ],
            [
              "put",
              "banana1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "take borpulus",
            "go hallway",
            "go magic workshop",
            "take zulpowand",
            "go kitchen",
            "wave cauldron zulpowand",
            "go pantry",
            "open ice box",
            "take peach",
            "take banana",
            "take eye of newt",
            "go kitchen",
            "dump bucket of water cauldron",
            "put banana in cauldron",
            "put peach in cauldron",
            "put eye of newt in cauldron",
            "go pantry",
            "go kitchen",
            "stir water borpulus",
            "put banana in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
		  "domain_definitions": ["witch_domain_core.json"],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l water)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The water undulates with a phase shift creating a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), borpulusstirred_t(TURN,water1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,water1) :- turn(TURN), borpulusstirred_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i eyeofnewt)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i eyeofnewt))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The eye of newt combines with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,eyeofnewt1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,eyeofnewt1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,eyeofnewt1,ROOM) :- turn(TURN), at_t(TURN,eyeofnewt1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,eyeofnewt1,cauldron1) :- turn(TURN), in_t(TURN,eyeofnewt1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(zulponated ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the zulponated cauldron churgulates with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), zulponated_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i banana)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i banana))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The banana combines with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,banana1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,banana1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,banana1,ROOM) :- turn(TURN), at_t(TURN,banana1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,banana1,cauldron1) :- turn(TURN), in_t(TURN,banana1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type peach1 peach))\n\t\t(not (at peach1 ?r))\n\t\t(not (in peach1 ?c))\n\t\t(not (accessible peach1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The peach mingles with the liquid with a swirling pattern creating the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
		    "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
		    "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
			"type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
			"type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
			"type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
			"type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
			"type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,garden1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(book1,bed1)",
            "on(potionrecipe1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Espeldertatarum potion\nIngredients: Water, red beetle, spiderweb, sandwich.\n1. Pour water into your cauldron.\n2. Add the red beetle into your cauldron.\n3. Wiggle a fairy wand on your cauldron.\n4. Wiggle a ice wand over your cauldron.\n5. Put the spiderweb into your cauldron.\n6. Put the sandwich into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "spiderweb1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "redbeetle1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "fairywand1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "put",
              "redbeetle1",
              "cauldron1"
            ],
            [
              "put",
              "spiderweb1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "fairywand1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "take spiderweb",
            "go cellar",
            "take red beetle",
            "go hallway",
            "go magic workshop",
            "take fairy wand",
            "take ice wand",
            "go kitchen",
            "wave cauldron ice wand",
            "go pantry",
            "go kitchen",
            "dump bucket of water cauldron",
            "put red beetle in cauldron",
            "put spiderweb in cauldron",
            "go pantry",
            "open ice box",
            "take sandwich",
            "go kitchen",
            "wave cauldron fairy wand",
            "put sandwich in cauldron",
            "put sandwich in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
		  "domain_definitions": ["witch_domain_core.json"],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at water1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i redbeetle)\n\t\t(in ?i ?c)\n\t\t(in water1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type water1 water))\n\t\t(not (at water1 ?r))\n\t\t(not (in water1 ?c))\n\t\t(not (accessible water1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i redbeetle))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The red beetle absorbs into the water with a gloopy sound producing a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,redbeetle1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), in_t(TURN,redbeetle1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,redbeetle1,ROOM) :- turn(TURN), at_t(TURN,redbeetle1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,redbeetle1,cauldron1) :- turn(TURN), in_t(TURN,redbeetle1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid1 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid1 liquid)\n\t\t(glittery ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2 ?r)\n\t\t(in liquid2 ?c)\n\t\t(accessible liquid2)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the glittery cauldron sloshes with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), glittery_t(TURN,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron whistles with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spiderweb)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spiderweb))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The spiderweb combines with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spiderweb1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,spiderweb1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,spiderweb1,ROOM) :- turn(TURN), at_t(TURN,spiderweb1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,spiderweb1,cauldron1) :- turn(TURN), in_t(TURN,spiderweb1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i sandwich)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type sandwich1 sandwich))\n\t\t(not (at sandwich1 ?r))\n\t\t(not (in sandwich1 ?c))\n\t\t(not (accessible sandwich1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The sandwich absorbs into the liquid with a phase shift leaving the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,sandwich1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,sandwich1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,sandwich1,ROOM) :- turn(TURN), at_t(TURN,sandwich1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,sandwich1,cauldron1) :- turn(TURN), in_t(TURN,sandwich1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
		    "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
		    "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
			"type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
			"type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
			"type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
			"type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
			"type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,garden1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Hungro's potion\nIngredients: Water, spider egg, sandwich, eye of newt.\n1. Pour water into your cauldron.\n2. Swirl a fire wand at your cauldron.\n3. Add the sandwich into your cauldron.\n4. Wave a ice wand at your cauldron.\n5. Add the eye of newt into your cauldron.\n6. Add the spider egg into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spideregg1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "eyeofnewt1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ],
            [
              "put",
              "spideregg1",
              "cauldron1"
            ],
            [
              "put",
              "eyeofnewt1",
              "cauldron1"
            ],
            [
              "put",
              "spideregg1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "go cellar",
            "take spider egg",
            "go hallway",
            "go magic workshop",
            "take ice wand",
            "take fire wand",
            "go kitchen",
            "dump bucket of water cauldron",
            "go pantry",
            "open ice box",
            "take eye of newt",
            "go kitchen",
            "wave cauldron fire wand",
            "go pantry",
            "take sandwich",
            "go kitchen",
            "wave cauldron ice wand",
            "put sandwich in cauldron",
            "put spider egg in cauldron",
            "put eye of newt in cauldron",
            "put spider egg in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
		  "domain_definitions": ["witch_domain_core.json"],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l water)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The water in the hot cauldron bubbles with a puff of vapor leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), hot_t(TURN,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nhot_t(TURN+1,cauldron1) :- turn(TURN), hot_t(TURN,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i sandwich)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i sandwich))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The sandwich combines with the liquid in the cauldron with a swirling pattern.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,sandwich1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,sandwich1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,sandwich1,ROOM) :- turn(TURN), at_t(TURN,sandwich1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,sandwich1,cauldron1) :- turn(TURN), in_t(TURN,sandwich1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron swirls with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i eyeofnewt)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i eyeofnewt))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The eye of newt mingles with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,eyeofnewt1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,eyeofnewt1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,eyeofnewt1,ROOM) :- turn(TURN), at_t(TURN,eyeofnewt1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,eyeofnewt1,cauldron1) :- turn(TURN), in_t(TURN,eyeofnewt1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spideregg)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type spideregg1 spideregg))\n\t\t(not (at spideregg1 ?r))\n\t\t(not (in spideregg1 ?c))\n\t\t(not (accessible spideregg1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The spider egg mingles with the liquid with a swirling pattern leaving the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spideregg1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,spideregg1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,spideregg1,ROOM) :- turn(TURN), at_t(TURN,spideregg1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,spideregg1,cauldron1) :- turn(TURN), in_t(TURN,spideregg1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
		    "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
		    "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
			"type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
			"type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
			"type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
			"type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
			"type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,garden1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Very tasty potion\nIngredients: Ectoplasm, plonkle crystal, peach, plunkle crystal.\n1. Pour ectoplasm into your cauldron.\n2. Mix the liquid using a borpulus.\n3. Add the plonkle crystal into your cauldron.\n4. Put the peach into your cauldron.\n5. Swirl a fire wand at your cauldron.\n6. Put the plunkle crystal into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 24,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "plonklecrystal1"
            ],
            [
              "take",
              "plunklecrystal1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "put",
              "plunklecrystal1",
              "cauldron1"
            ],
            [
              "put",
              "plonklecrystal1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "borpulus1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take plonkle crystal",
            "take plunkle crystal",
            "take borpulus",
            "go hallway",
            "go magic workshop",
            "take fire wand",
            "go kitchen",
            "wave cauldron fire wand",
            "put plunkle crystal in cauldron",
            "put plonkle crystal in cauldron",
            "go pantry",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "open ice box",
            "take peach",
            "go kitchen",
            "stir ectoplasm borpulus",
            "put peach in cauldron",
            "put peach in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
		  "domain_definitions": ["witch_domain_core.json"],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm rectangulates with a gloopy sound leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), borpulusstirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,ectoplasm1) :- turn(TURN), borpulusstirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i plonklecrystal)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i plonklecrystal))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The plonkle crystal mingles with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,plonklecrystal1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,plonklecrystal1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,plonklecrystal1,ROOM) :- turn(TURN), at_t(TURN,plonklecrystal1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,plonklecrystal1,cauldron1) :- turn(TURN), in_t(TURN,plonklecrystal1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i peach))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The peach combines with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid3 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid3 liquid)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4 ?r)\n\t\t(in liquid4 ?c)\n\t\t(accessible liquid4)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the hot cauldron swirls with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid3,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), hot_t(TURN,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i plunklecrystal)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type plunklecrystal1 plunklecrystal))\n\t\t(not (at plunklecrystal1 ?r))\n\t\t(not (in plunklecrystal1 ?c))\n\t\t(not (accessible plunklecrystal1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The plunkle crystal mingles with the liquid with a pop creating the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,plunklecrystal1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,plunklecrystal1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,plunklecrystal1,ROOM) :- turn(TURN), at_t(TURN,plunklecrystal1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,plunklecrystal1,cauldron1) :- turn(TURN), in_t(TURN,plunklecrystal1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
		    "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
		    "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
			"type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
			"type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
			"type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
			"type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
			"type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,garden1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Rincewind's potion\nIngredients: Ectoplasm, apple, peach, spider egg.\n1. Pour ectoplasm into your cauldron.\n2. Stir the liquid using a borpulus.\n3. Add the apple into your cauldron.\n4. Wave a ice wand on your cauldron.\n5. Put the spider egg into your cauldron.\n6. Put the peach into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spideregg1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "spideregg1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "borpulus1"
            ],
            [
              "put",
              "apple1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "take",
              "plate1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take borpulus",
            "go cellar",
            "take spider egg",
            "go hallway",
            "go magic workshop",
            "take ice wand",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "open ice box",
            "take peach",
            "go kitchen",
            "wave cauldron ice wand",
            "put spider egg in cauldron",
            "go pantry",
            "take apple",
            "go kitchen",
            "stir ectoplasm borpulus",
            "put apple in cauldron",
            "put peach in cauldron",
            "take plate"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
		  "domain_definitions": ["witch_domain_core.json"],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm sloshes with a puff of vapor leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), borpulusstirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,ectoplasm1) :- turn(TURN), borpulusstirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i apple)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i apple))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The apple absorbs into the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,apple1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,apple1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,apple1,ROOM) :- turn(TURN), at_t(TURN,apple1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,apple1,cauldron1) :- turn(TURN), in_t(TURN,apple1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron dances with a phase shift.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spideregg)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spideregg))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The spider egg mingles with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spideregg1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,spideregg1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,spideregg1,ROOM) :- turn(TURN), at_t(TURN,spideregg1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,spideregg1,cauldron1) :- turn(TURN), in_t(TURN,spideregg1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type peach1 peach))\n\t\t(not (at peach1 ?r))\n\t\t(not (in peach1 ?c))\n\t\t(not (accessible peach1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The peach mingles with the liquid with a pop producing the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        }
      ]
    }
  ]
}