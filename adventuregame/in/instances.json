{
  "experiments": [
    {
      "name": "home_deliver_three_basic_easy",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put mop on table",
            "put book on table",
            "go kitchen",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go living room",
            "put pillow on table",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go living room",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go living room",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 13,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go living room",
            "put plate on table",
            "go hallway",
            "go bedroom",
            "take pillow",
            "go hallway",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go hallway",
            "go bedroom",
            "take pillow",
            "go hallway",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "take pillow",
            "go living room",
            "go kitchen",
            "put pillow on table",
            "go living room",
            "take book",
            "go kitchen",
            "put book on table",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take book",
            "go kitchen",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "put mop on table",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go hallway",
            "go living room",
            "take book",
            "go bedroom",
            "put plate on table",
            "go living room",
            "go bedroom",
            "put book on table",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "take book",
            "go bedroom",
            "put mop on table",
            "go living room",
            "go bedroom",
            "put book on table",
            "go living room",
            "go bedroom",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "take pillow",
            "go living room",
            "take book",
            "go kitchen",
            "go pantry",
            "put pillow on table",
            "go kitchen",
            "take plate",
            "go pantry",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "take book",
            "go kitchen",
            "take plate",
            "go pantry",
            "put mop on table",
            "go kitchen",
            "go pantry",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_preexplore_easy",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put mop on table",
            "put book on table",
            "go kitchen",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go living room",
            "put pillow on table",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go living room",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go living room",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 5,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 13,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 6,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go living room",
            "put plate on table",
            "go hallway",
            "go bedroom",
            "take pillow",
            "go hallway",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go pantry",
            "go kitchen",
            "go living room",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 7,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go pantry",
            "go kitchen",
            "go living room",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 8,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go hallway",
            "go bedroom",
            "take pillow",
            "go hallway",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go kitchen",
            "go living room",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 9,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go kitchen",
            "go living room",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 10,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "take pillow",
            "go living room",
            "go kitchen",
            "put pillow on table",
            "go living room",
            "take book",
            "go kitchen",
            "put book on table",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 11,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take book",
            "go kitchen",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "put mop on table",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 12,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go hallway",
            "go living room",
            "take book",
            "go bedroom",
            "put plate on table",
            "go living room",
            "go bedroom",
            "put book on table",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go bedroom"
          ]
        },
        {
          "game_id": 13,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "take book",
            "go bedroom",
            "put mop on table",
            "go living room",
            "go bedroom",
            "put book on table",
            "go living room",
            "go bedroom",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go bedroom"
          ]
        },
        {
          "game_id": 14,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "take pillow",
            "go living room",
            "take book",
            "go kitchen",
            "go pantry",
            "put pillow on table",
            "go kitchen",
            "take plate",
            "go pantry",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 8,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 15,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "take book",
            "go kitchen",
            "take plate",
            "go pantry",
            "put mop on table",
            "go kitchen",
            "go pantry",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 8,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go kitchen",
            "go pantry"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_easy_invlimittwo",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put mop on table",
            "put book on table",
            "go kitchen",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go living room",
            "put pillow on table",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go living room",
            "put book on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take pillow",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go living room",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 13,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table",
            "go hallway",
            "go kitchen",
            "take plate",
            "go hallway",
            "go living room",
            "put plate on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go living room",
            "put plate on table",
            "go hallway",
            "go bedroom",
            "take pillow",
            "go hallway",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "go hallway",
            "go bedroom",
            "take pillow",
            "go hallway",
            "go living room",
            "put pillow on table",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 11,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on table",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "put mop on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "take pillow",
            "go living room",
            "go kitchen",
            "put pillow on table",
            "go living room",
            "take book",
            "go kitchen",
            "put book on table",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take book",
            "go kitchen",
            "put book on table",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "put mop on table",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 10,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go hallway",
            "go living room",
            "take book",
            "go bedroom",
            "put plate on table",
            "go living room",
            "go bedroom",
            "put book on table",
            "put pillow on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "table1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "take book",
            "go bedroom",
            "put mop on table",
            "go living room",
            "go bedroom",
            "put book on table",
            "go living room",
            "go bedroom",
            "put plate on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the table, the book on the table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(pillow1,bed1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,table1)",
            "on(book1,table1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "take pillow",
            "go living room",
            "take book",
            "go kitchen",
            "go pantry",
            "put pillow on table",
            "go kitchen",
            "take plate",
            "go pantry",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the table, the plate on the table and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,table1)",
            "on(plate1,table1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "take book",
            "go kitchen",
            "take plate",
            "go pantry",
            "put mop on table",
            "go kitchen",
            "go pantry",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put book on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_hard",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the counter, the book on the shelf and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,bedroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,counter1)",
            "on(book1,shelf1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "counter1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "take book",
            "go kitchen",
            "put pillow on counter",
            "go hallway",
            "go bedroom",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich in the freezer, the plate on the shelf and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "on(plate1,shelf1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "open refrigerator",
            "open cupboard",
            "go pantry",
            "put mop on table",
            "open freezer",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on shelf",
            "go kitchen",
            "take sandwich",
            "go pantry",
            "put sandwich in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the banana in the freezer, the book on the side table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(banana1,freezer1)",
            "on(book1,sidetable1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "banana1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open refrigerator",
            "take banana",
            "go pantry",
            "put banana in freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the apple in the freezer, the plate on the side table and the mop on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,freezer1)",
            "on(plate1,sidetable1)",
            "on(mop1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "shelf1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "apple1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "open cupboard",
            "open refrigerator",
            "take apple",
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put mop on shelf",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put apple in freezer",
            "go kitchen",
            "go living room",
            "go bedroom",
            "put plate on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow in the refrigerator, the book in the wardrobe and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,kitchen1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,cupboard1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,refrigerator1)",
            "in(book1,wardrobe1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put pillow in refrigerator",
            "go kitchen",
            "take plate",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "put plate on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich in the freezer, the book in the wardrobe and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,kitchen1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "in(book1,wardrobe1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ]
          ],
          "optimal_commands": [
            "take mop",
            "go hallway",
            "go kitchen",
            "open freezer",
            "go pantry",
            "put mop on table",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "put sandwich in freezer",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "go hallway",
            "go living room",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich on the side table, the book on the shelf and the mop in the cupboard.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(sandwich1,sidetable1)",
            "on(book1,shelf1)",
            "in(mop1,cupboard1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "sandwich1",
              "sidetable1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "mop1",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go bedroom",
            "put sandwich on side table",
            "open wardrobe",
            "take book",
            "go hallway",
            "go kitchen",
            "put mop in cupboard",
            "go living room",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant in the freezer, the plate on the table and the mop in the refrigerator.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pottedplant1,freezer1)",
            "on(plate1,table1)",
            "in(mop1,refrigerator1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pottedplant1",
              "freezer1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "take potted plant",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put potted plant in freezer",
            "open refrigerator",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put mop in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant in the cupboard, the orange on the table and the book on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pottedplant1,cupboard1)",
            "on(orange1,table1)",
            "on(book1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "orange1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "orange1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pottedplant1",
              "cupboard1"
            ]
          ],
          "optimal_commands": [
            "open refrigerator",
            "take orange",
            "go kitchen",
            "open cupboard",
            "go living room",
            "put orange on table",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take book",
            "go hallway",
            "take potted plant",
            "go broom closet",
            "put book on shelf",
            "go hallway",
            "go living room",
            "go kitchen",
            "put potted plant in cupboard"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the apple in the cupboard, the book in the wardrobe and the broom in the freezer.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,cupboard1)",
            "in(book1,wardrobe1)",
            "in(broom1,freezer1)"
          ],
          "max_turns": 50,
          "optimal_turns": 22,
          "optimal_solution": [
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "apple1",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "broom1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "open refrigerator",
            "take apple",
            "open freezer",
            "go kitchen",
            "open cupboard",
            "go living room",
            "take book",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "go living room",
            "go kitchen",
            "put apple in cupboard",
            "go pantry",
            "put broom in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant on the side table, the book in the refrigerator and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,sidetable1)",
            "in(book1,refrigerator1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "sidetable1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "open cupboard",
            "take plate",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go hallway",
            "take potted plant",
            "go broom closet",
            "put plate on shelf",
            "go hallway",
            "go living room",
            "go bedroom",
            "put potted plant on side table",
            "go living room",
            "take book",
            "go kitchen",
            "go pantry",
            "put book in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the shelf, the sandwich on the table and the broom on the counter.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,shelf1)",
            "on(sandwich1,table1)",
            "on(broom1,counter1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "broom1",
              "counter1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "sandwich1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on shelf",
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "go kitchen",
            "put broom on counter",
            "go pantry",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "put sandwich on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow in the freezer, the broom on the bed and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,hallway1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,freezer1)",
            "on(broom1,bed1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 23,
          "optimal_solution": [
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "broom1",
              "bed1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go broom closet",
            "take broom",
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go hallway",
            "go living room",
            "go bedroom",
            "put broom on bed",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take pillow",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put pillow in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant on the table, the book in the refrigerator and the mop in the wardrobe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,table1)",
            "in(book1,refrigerator1)",
            "in(mop1,wardrobe1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "mop1",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "take potted plant",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "go bedroom",
            "put potted plant on table",
            "open wardrobe",
            "go living room",
            "go bedroom",
            "put mop in wardrobe",
            "take book",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put book in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the broom on the shelf, the potted plant on the counter and the plate in the wardrobe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(broom1,shelf1)",
            "on(pottedplant1,counter1)",
            "in(plate1,wardrobe1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pottedplant1",
              "counter1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "broom1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "wardrobe1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "take potted plant",
            "go living room",
            "go bedroom",
            "open wardrobe",
            "go living room",
            "go kitchen",
            "put potted plant on counter",
            "open cupboard",
            "go pantry",
            "put broom on shelf",
            "go kitchen",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate in wardrobe"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant on the side table, the plate on the shelf and the mop in the freezer.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,sidetable1)",
            "on(plate1,shelf1)",
            "in(mop1,freezer1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "take potted plant",
            "go living room",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go pantry",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put mop in freezer",
            "go kitchen",
            "go living room",
            "put plate on shelf",
            "go bedroom",
            "put potted plant on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_preexplore_hard",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow on the counter, the book on the shelf and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,bedroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,counter1)",
            "on(book1,shelf1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "counter1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "take book",
            "go kitchen",
            "put pillow on counter",
            "go hallway",
            "go bedroom",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go bedroom",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich in the freezer, the plate on the shelf and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "on(plate1,shelf1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "open refrigerator",
            "open cupboard",
            "go pantry",
            "put mop on table",
            "open freezer",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on shelf",
            "go kitchen",
            "take sandwich",
            "go pantry",
            "put sandwich in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the banana in the freezer, the book on the side table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(banana1,freezer1)",
            "on(book1,sidetable1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "banana1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open refrigerator",
            "take banana",
            "go pantry",
            "put banana in freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go living room",
            "go bedroom"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the apple in the freezer, the plate on the side table and the mop on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,freezer1)",
            "on(plate1,sidetable1)",
            "on(mop1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "shelf1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "apple1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "open cupboard",
            "open refrigerator",
            "take apple",
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put mop on shelf",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put apple in freezer",
            "go kitchen",
            "go living room",
            "go bedroom",
            "put plate on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow in the refrigerator, the book in the wardrobe and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,kitchen1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,cupboard1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,refrigerator1)",
            "in(book1,wardrobe1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put pillow in refrigerator",
            "go kitchen",
            "take plate",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "put plate on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 5,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich in the freezer, the book in the wardrobe and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,kitchen1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "in(book1,wardrobe1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ]
          ],
          "optimal_commands": [
            "take mop",
            "go hallway",
            "go kitchen",
            "open freezer",
            "go pantry",
            "put mop on table",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "put sandwich in freezer",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "go hallway",
            "go living room",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go living room",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 6,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the sandwich on the side table, the book on the shelf and the mop in the cupboard.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(sandwich1,sidetable1)",
            "on(book1,shelf1)",
            "in(mop1,cupboard1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "sandwich1",
              "sidetable1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "mop1",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go bedroom",
            "put sandwich on side table",
            "open wardrobe",
            "take book",
            "go hallway",
            "go kitchen",
            "put mop in cupboard",
            "go living room",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go pantry",
            "go kitchen",
            "go living room",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 7,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant in the freezer, the plate on the table and the mop in the refrigerator.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pottedplant1,freezer1)",
            "on(plate1,table1)",
            "in(mop1,refrigerator1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pottedplant1",
              "freezer1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "take potted plant",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put potted plant in freezer",
            "open refrigerator",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put mop in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 8,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant in the cupboard, the orange on the table and the book on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pottedplant1,cupboard1)",
            "on(orange1,table1)",
            "on(book1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "orange1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "orange1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pottedplant1",
              "cupboard1"
            ]
          ],
          "optimal_commands": [
            "open refrigerator",
            "take orange",
            "go kitchen",
            "open cupboard",
            "go living room",
            "put orange on table",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take book",
            "go hallway",
            "take potted plant",
            "go broom closet",
            "put book on shelf",
            "go hallway",
            "go living room",
            "go kitchen",
            "put potted plant in cupboard"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go kitchen",
            "go living room",
            "go hallway",
            "go bedroom",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 9,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the apple in the cupboard, the book in the wardrobe and the broom in the freezer.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,cupboard1)",
            "in(book1,wardrobe1)",
            "in(broom1,freezer1)"
          ],
          "max_turns": 50,
          "optimal_turns": 22,
          "optimal_solution": [
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "apple1",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "broom1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "open refrigerator",
            "take apple",
            "open freezer",
            "go kitchen",
            "open cupboard",
            "go living room",
            "take book",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "go living room",
            "go kitchen",
            "put apple in cupboard",
            "go pantry",
            "put broom in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 6,
          "visiting_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go kitchen",
            "go living room",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go bedroom"
          ]
        },
        {
          "game_id": 10,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant on the side table, the book in the refrigerator and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,sidetable1)",
            "in(book1,refrigerator1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "sidetable1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "open cupboard",
            "take plate",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go hallway",
            "take potted plant",
            "go broom closet",
            "put plate on shelf",
            "go hallway",
            "go living room",
            "go bedroom",
            "put potted plant on side table",
            "go living room",
            "take book",
            "go kitchen",
            "go pantry",
            "put book in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go bedroom"
          ]
        },
        {
          "game_id": 11,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the book on the shelf, the sandwich on the table and the broom on the counter.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,shelf1)",
            "on(sandwich1,table1)",
            "on(broom1,counter1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "broom1",
              "counter1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "sandwich1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on shelf",
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "go kitchen",
            "put broom on counter",
            "go pantry",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "put sandwich on table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet"
          ]
        },
        {
          "game_id": 12,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the pillow in the freezer, the broom on the bed and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,hallway1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,freezer1)",
            "on(broom1,bed1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 23,
          "optimal_solution": [
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "broom1",
              "bed1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go broom closet",
            "take broom",
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go hallway",
            "go living room",
            "go bedroom",
            "put broom on bed",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take pillow",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put pillow in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 8,
          "visiting_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go kitchen",
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go bedroom"
          ]
        },
        {
          "game_id": 13,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant on the table, the book in the refrigerator and the mop in the wardrobe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,table1)",
            "in(book1,refrigerator1)",
            "in(mop1,wardrobe1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "mop1",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "take potted plant",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "go bedroom",
            "put potted plant on table",
            "open wardrobe",
            "go living room",
            "go bedroom",
            "put mop in wardrobe",
            "take book",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put book in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 7,
          "visiting_solution": [
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ]
          ],
          "visiting_commands": [
            "go pantry",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go bedroom"
          ]
        },
        {
          "game_id": 14,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the broom on the shelf, the potted plant on the counter and the plate in the wardrobe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(broom1,shelf1)",
            "on(pottedplant1,counter1)",
            "in(plate1,wardrobe1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pottedplant1",
              "counter1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "broom1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "wardrobe1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "take potted plant",
            "go living room",
            "go bedroom",
            "open wardrobe",
            "go living room",
            "go kitchen",
            "put potted plant on counter",
            "open cupboard",
            "go pantry",
            "put broom on shelf",
            "go kitchen",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate in wardrobe"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 8,
          "visiting_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go bedroom",
            "go living room",
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go kitchen",
            "go pantry"
          ]
        },
        {
          "game_id": 15,
          "variant": "basic_preexplore",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is: Put the potted plant on the side table, the plate on the shelf and the mop in the freezer.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,sidetable1)",
            "on(plate1,shelf1)",
            "in(mop1,freezer1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "take potted plant",
            "go living room",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go pantry",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put mop in freezer",
            "go kitchen",
            "go living room",
            "put plate on shelf",
            "go bedroom",
            "put potted plant on side table"
          ],
          "action_definitions": [
            "basic_actions_v2.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain.json"
          ],
          "visiting_turns": 8,
          "visiting_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "visiting_commands": [
            "go hallway",
            "go broom closet",
            "go hallway",
            "go living room",
            "go bedroom",
            "go living room",
            "go kitchen",
            "go pantry"
          ]
        }
      ]
    },
    {
      "name": "home_deliver_three_basic_hard_invlimittwo",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow on the counter, the book on the shelf and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,bedroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pillow1,counter1)",
            "on(book1,shelf1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pillow1",
              "counter1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "take book",
            "go kitchen",
            "put pillow on counter",
            "go hallway",
            "go bedroom",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the sandwich in the freezer, the plate on the shelf and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "on(plate1,shelf1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "open refrigerator",
            "open cupboard",
            "go pantry",
            "put mop on table",
            "open freezer",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on shelf",
            "go kitchen",
            "take sandwich",
            "go pantry",
            "put sandwich in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the banana in the freezer, the book on the side table and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(banana1,freezer1)",
            "on(book1,sidetable1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "banana1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open refrigerator",
            "take banana",
            "go pantry",
            "put banana in freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on side table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the apple in the freezer, the plate on the side table and the mop on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,kitchen1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,kitchen1)",
            "at(apple1,kitchen1)",
            "at(banana1,kitchen1)",
            "at(orange1,kitchen1)",
            "at(peach1,kitchen1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,freezer1)",
            "on(plate1,sidetable1)",
            "on(mop1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "shelf1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "apple1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go kitchen",
            "open cupboard",
            "open refrigerator",
            "take apple",
            "take plate",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put mop on shelf",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put apple in freezer",
            "go kitchen",
            "go living room",
            "go bedroom",
            "put plate on side table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow in the refrigerator, the book in the wardrobe and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,kitchen1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,cupboard1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,refrigerator1)",
            "in(book1,wardrobe1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take pillow",
            "go hallway",
            "go kitchen",
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put pillow in refrigerator",
            "go kitchen",
            "take plate",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "put plate on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the sandwich in the freezer, the book in the wardrobe and the mop on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,kitchen1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,broomcloset1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sandwich1,freezer1)",
            "in(book1,wardrobe1)",
            "on(mop1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "table1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "sandwich1",
              "freezer1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ]
          ],
          "optimal_commands": [
            "take mop",
            "go hallway",
            "go kitchen",
            "open freezer",
            "go pantry",
            "put mop on table",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "put sandwich in freezer",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "go hallway",
            "go living room",
            "take book",
            "go hallway",
            "go bedroom",
            "put book in wardrobe"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the sandwich on the side table, the book on the shelf and the mop in the cupboard.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(sandwich1,sidetable1)",
            "on(book1,shelf1)",
            "in(mop1,cupboard1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "sandwich1",
              "sidetable1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "mop1",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ]
          ],
          "optimal_commands": [
            "open cupboard",
            "go pantry",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go bedroom",
            "put sandwich on side table",
            "open wardrobe",
            "take book",
            "go hallway",
            "go kitchen",
            "put mop in cupboard",
            "go living room",
            "put book on shelf"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the potted plant in the freezer, the plate on the table and the mop in the refrigerator.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pottedplant1,freezer1)",
            "on(plate1,table1)",
            "in(mop1,refrigerator1)"
          ],
          "max_turns": 50,
          "optimal_turns": 20,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pottedplant1",
              "freezer1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "take potted plant",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put potted plant in freezer",
            "open refrigerator",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go living room",
            "put plate on table",
            "go kitchen",
            "go pantry",
            "put mop in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the potted plant in the cupboard, the orange on the table and the book on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "in(book1,wardrobe1)",
            "on(plate1,counter1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pottedplant1,cupboard1)",
            "on(orange1,table1)",
            "on(book1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "orange1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "orange1",
              "table1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pottedplant1",
              "cupboard1"
            ]
          ],
          "optimal_commands": [
            "open refrigerator",
            "take orange",
            "go kitchen",
            "open cupboard",
            "go living room",
            "put orange on table",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "take book",
            "go hallway",
            "take potted plant",
            "go broom closet",
            "put book on shelf",
            "go hallway",
            "go living room",
            "go kitchen",
            "put potted plant in cupboard"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the apple in the cupboard, the book in the wardrobe and the broom in the freezer.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,pantry1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(apple1,cupboard1)",
            "in(book1,wardrobe1)",
            "in(broom1,freezer1)"
          ],
          "max_turns": 50,
          "optimal_turns": 22,
          "optimal_solution": [
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "book1",
              "wardrobe1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "apple1",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "broom1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "open refrigerator",
            "take apple",
            "open freezer",
            "go kitchen",
            "open cupboard",
            "go living room",
            "take book",
            "go hallway",
            "go bedroom",
            "open wardrobe",
            "go hallway",
            "go bedroom",
            "put book in wardrobe",
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "go living room",
            "go kitchen",
            "put apple in cupboard",
            "go pantry",
            "put broom in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the potted plant on the side table, the book in the refrigerator and the plate on the shelf.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,broomcloset1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,table1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,sidetable1)",
            "in(book1,refrigerator1)",
            "on(plate1,shelf1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "sidetable1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "open cupboard",
            "take plate",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go hallway",
            "take potted plant",
            "go broom closet",
            "put plate on shelf",
            "go hallway",
            "go living room",
            "go bedroom",
            "put potted plant on side table",
            "go living room",
            "take book",
            "go kitchen",
            "go pantry",
            "put book in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the book on the shelf, the sandwich on the table and the broom on the counter.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,kitchen1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(book1,shelf1)",
            "on(sandwich1,table1)",
            "on(broom1,counter1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "shelf1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "broom1",
              "counter1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "sandwich1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go bedroom",
            "open wardrobe",
            "take book",
            "go living room",
            "put book on shelf",
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "go kitchen",
            "put broom on counter",
            "go pantry",
            "open refrigerator",
            "take sandwich",
            "go kitchen",
            "put sandwich on table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the pillow in the freezer, the broom on the bed and the plate on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,hallway1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(pillow1,freezer1)",
            "on(broom1,bed1)",
            "on(plate1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 23,
          "optimal_solution": [
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "broom1",
              "bed1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "take",
              "pillow1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "pillow1",
              "freezer1"
            ]
          ],
          "optimal_commands": [
            "go broom closet",
            "take broom",
            "go hallway",
            "go kitchen",
            "go pantry",
            "open freezer",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go hallway",
            "go living room",
            "go bedroom",
            "put broom on bed",
            "go living room",
            "go bedroom",
            "put plate on table",
            "open wardrobe",
            "take pillow",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry",
            "put pillow in freezer"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the potted plant on the table, the book in the refrigerator and the mop in the wardrobe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,bedroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,kitchen1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(book1,wardrobe1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(pillow1,wardrobe1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,table1)",
            "in(book1,refrigerator1)",
            "in(mop1,wardrobe1)"
          ],
          "max_turns": 50,
          "optimal_turns": 21,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "table1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "mop1",
              "wardrobe1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "book1",
              "refrigerator1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "take potted plant",
            "go broom closet",
            "take mop",
            "go hallway",
            "go living room",
            "go bedroom",
            "put potted plant on table",
            "open wardrobe",
            "go living room",
            "go bedroom",
            "put mop in wardrobe",
            "take book",
            "go living room",
            "go hallway",
            "go kitchen",
            "go pantry",
            "open refrigerator",
            "go kitchen",
            "go pantry",
            "put book in refrigerator"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the broom on the shelf, the potted plant on the counter and the plate in the wardrobe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,pantry1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,livingroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "in(pillow1,wardrobe1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(broom1,shelf1)",
            "on(pottedplant1,counter1)",
            "in(plate1,wardrobe1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "open",
              "wardrobe1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "pottedplant1",
              "counter1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "broom1",
              "shelf1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "plate1",
              "wardrobe1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take broom",
            "go hallway",
            "take potted plant",
            "go living room",
            "go bedroom",
            "open wardrobe",
            "go living room",
            "go kitchen",
            "put potted plant on counter",
            "open cupboard",
            "go pantry",
            "put broom on shelf",
            "go kitchen",
            "take plate",
            "go living room",
            "go bedroom",
            "put plate in wardrobe"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is: Put the potted plant on the side table, the plate on the shelf and the mop in the freezer.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,pantry1)",
            "at(sidetable1,bedroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,livingroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(bed1)",
            "support(couch1)",
            "support(chair1)",
            "on(book1,sidetable1)",
            "in(plate1,cupboard1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "on(pillow1,bed1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,livingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(livingroom1,hallway1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,livingroom1)",
            "exit(livingroom1,bedroom1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(pottedplant1,sidetable1)",
            "on(plate1,shelf1)",
            "in(mop1,freezer1)"
          ],
          "max_turns": 50,
          "optimal_turns": 19,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "open",
              "cupboard1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "mop1",
              "freezer1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "shelf1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "pottedplant1",
              "sidetable1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "take potted plant",
            "go living room",
            "go kitchen",
            "open cupboard",
            "take plate",
            "go pantry",
            "open freezer",
            "go kitchen",
            "go pantry",
            "put mop in freezer",
            "go kitchen",
            "go living room",
            "put plate on shelf",
            "go bedroom",
            "put potted plant on side table"
          ],
          "action_definitions": [
            "basic_actions_v2_invlimit.json"
          ],
          "room_definitions": [
            "home_rooms.json"
          ],
          "entity_definitions": [
            "home_entities.json"
          ],
          "domain_definitions": [
            "home_domain_invlimit.json"
          ]
        }
      ]
    },
    {
      "name": "new-words_home-delivery_easy_basic_easy",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can maten. To maten is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the uness on the table, the potted plant on the cally and the peach on the cally.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(unree1floor1,unree1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(cally1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,unree1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,unree1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(uness1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,unree1)",
            "at(apple1,unree1)",
            "at(iness1,unree1)",
            "at(orange1,unree1)",
            "at(peach1,unree1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(unree1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(cally1,cally)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(uness1,uness)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(iness1,iness)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(unree1,unree)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(unree1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(cally1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(uness1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(iness1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,unree1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(unree1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(cally1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(uness1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(iness1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(uness1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(iness1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(uness1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(iness1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(uness1,table1)",
            "on(pottedplant1,cally1)",
            "on(peach1,cally1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "uness1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "uness1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "unree1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pottedplant1",
              "cally1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "peach1",
              "cally1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take uness",
            "go hallway",
            "take potted plant",
            "go kitchen",
            "go living room",
            "put uness on table",
            "go kitchen",
            "go unree",
            "open refrigerator",
            "take peach",
            "go kitchen",
            "go living room",
            "put potted plant on cally",
            "go kitchen",
            "go living room",
            "put peach on cally"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"maten\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To maten is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "maten",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "unree",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "unree",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "unree"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "unree",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "uness"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "cally",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "cally"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "unree",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "unree"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "uness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "uness"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "iness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "iness"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unree"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "unree",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "cally",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "cally",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "cally",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "uness",
                  "mop",
                  "sandwich",
                  "apple",
                  "iness",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can diale. To diale is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the subst on the table, the book on the scont and the plate on the scont.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(unsust1floor1,unsust1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(scont1,kitchen1)",
            "at(refrigerator1,unsust1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,unsust1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(dente1,broomcloset1)",
            "at(sandwich1,unsust1)",
            "at(apple1,unsust1)",
            "at(banana1,unsust1)",
            "at(orange1,unsust1)",
            "at(peach1,unsust1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(subst1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(unsust1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(scont1,scont)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(dente1,dente)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(subst1,subst)",
            "room(kitchen1,kitchen)",
            "room(unsust1,unsust)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(unsust1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(scont1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(subst1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(dente1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,unsust1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(unsust1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(scont1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(dente1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(subst1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(dente1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(subst1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(dente1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(subst1)"
          ],
          "goal_state": [
            "on(subst1,table1)",
            "on(book1,scont1)",
            "on(plate1,scont1)"
          ],
          "max_turns": 50,
          "optimal_turns": 8,
          "optimal_solution": [
            [
              "take",
              "book1"
            ],
            [
              "take",
              "subst1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "book1",
              "scont1"
            ],
            [
              "put",
              "plate1",
              "scont1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "subst1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take book",
            "take subst",
            "go hallway",
            "go kitchen",
            "put book on scont",
            "put plate on scont",
            "go living room",
            "put subst on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"diale\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To diale is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "diale",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "scont",
                "table"
              ],
              "exit_targets": [
                "unsust",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "unsust",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "unsust"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "unsust",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "scont",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "scont"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "unsust",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "unsust"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "dente",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "dente"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unsust"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "subst",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "subst"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "unsust",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "scont",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "scont",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "scont",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "dente",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "subst"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can inate. To inate is to remove or block an opening of something, and make its contents unavailable for use or interaction.\n\nYour goal for this game is: Put the mical on the pante, the mop on the pante and the broom on the pante.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(sness1floor1,sness1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(pante1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,sness1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,sness1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(eness1,sness1)",
            "at(apple1,sness1)",
            "at(banana1,sness1)",
            "at(orange1,sness1)",
            "at(peach1,sness1)",
            "at(mical1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(sness1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(pante1,pante)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(eness1,eness)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(mical1,mical)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(sness1,sness)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(sness1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(pante1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(mical1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(eness1,refrigerator1)",
            "exit(kitchen1,sness1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(sness1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(pante1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(eness1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(mical1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(eness1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(mical1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(eness1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(mical1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(mical1,pante1)",
            "on(mop1,pante1)",
            "on(broom1,pante1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "broom1",
              "pante1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "pante1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "mical1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mical1",
              "pante1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take broom",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put broom on pante",
            "go kitchen",
            "go living room",
            "put mop on pante",
            "go kitchen",
            "take mical",
            "go living room",
            "put mical on pante"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"inate\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To inate is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "inate",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "pante"
              ],
              "exit_targets": [
                "sness",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "sness",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "sness"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "sness",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "pante",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "pante",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "pante"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "sness",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "sness"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "eness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "eness"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "sness"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "mical",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "mical"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "sness",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "pante",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "pante",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "pante",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "eness",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "mical",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can aphon. To aphon is to physically place something somewhere.\n\nYour goal for this game is: Put the decte on the table, the plate on the stord and the mop on the stord.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(enticed1floor1,enticed1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,enticed1)",
            "at(stord1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,enticed1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(exper1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(decte1,enticed1)",
            "at(pillow1,enticed1)",
            "at(player1,enticed1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(enticed1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(stord1,stord)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(exper1,exper)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(decte1,decte)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(enticed1,enticed)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(enticed1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(stord1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(decte1,enticed1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(exper1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(enticed1,hallway1)",
            "exit(hallway1,enticed1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(stord1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(exper1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(decte1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(exper1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(decte1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(exper1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(decte1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(decte1,table1)",
            "on(plate1,stord1)",
            "on(mop1,stord1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "take",
              "decte1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "decte1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "stord1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "stord1"
            ]
          ],
          "optimal_commands": [
            "take decte",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put decte on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on stord",
            "go kitchen",
            "go living room",
            "put mop on stord"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"aphon\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To aphon is to physically place something somewhere.",
              "new_word": "aphon",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "stord",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "enticed",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "enticed"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "stord",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "livingroom"
              ],
              "type_name": "stord"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "enticed"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "exper",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "exper"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "decte",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "decte"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "enticed"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "stord",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "stord",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "stord",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "exper",
                  "peach",
                  "plate",
                  "decte",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can remic. To remic is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the gaticed on the table, the unbal on the table and the peach in the raticed.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(mator1floor1,mator1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,mator1)",
            "at(refrigerator1,pantry1)",
            "at(raticed1,mator1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(unbal1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(gaticed1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,mator1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(mator1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(raticed1,raticed)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(unbal1,unbal)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(gaticed1,gaticed)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(mator1,mator)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(mator1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,mator1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(gaticed1,broomcloset1floor1)",
            "on(unbal1,hallway1floor1)",
            "container(refrigerator1)",
            "container(raticed1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(mator1,pantry1)",
            "exit(mator1,livingroom1)",
            "exit(mator1,hallway1)",
            "exit(pantry1,mator1)",
            "exit(hallway1,mator1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,mator1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(raticed1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(raticed1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(raticed1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(unbal1)",
            "takeable(gaticed1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(unbal1)",
            "movable(gaticed1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(unbal1)",
            "needs_support(gaticed1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(gaticed1,table1)",
            "on(unbal1,table1)",
            "in(peach1,raticed1)"
          ],
          "max_turns": 50,
          "optimal_turns": 17,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "gaticed1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "unbal1"
            ],
            [
              "go",
              "mator1"
            ],
            [
              "open",
              "raticed1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "mator1"
            ],
            [
              "put",
              "peach1",
              "raticed1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "gaticed1",
              "table1"
            ],
            [
              "go",
              "mator1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "unbal1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take gaticed",
            "go hallway",
            "take unbal",
            "go mator",
            "open raticed",
            "go pantry",
            "open refrigerator",
            "take peach",
            "go mator",
            "put peach in raticed",
            "go living room",
            "put gaticed on table",
            "go mator",
            "go living room",
            "put unbal on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"remic\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To remic is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "remic",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "mator",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "mator"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "mator",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "unbal"
              ],
              "exit_targets": [
                "mator",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "unbal",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "mator",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "gaticed"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "mator",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "mator"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "raticed",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "mator"
              ],
              "type_name": "raticed"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "mator",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "unbal",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "unbal"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "gaticed",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "gaticed"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "mator"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "mator",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "unbal",
                  "chair",
                  "bed",
                  "couch",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "raticed",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "unbal",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "unbal",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "unbal",
                  "gaticed",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can perce. To perce is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the uner on the trion, the natin on the trion and the peach on the trion.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(proart1floor1,proart1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(trion1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,proart1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,proart1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(natin1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(uner1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,proart1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(proart1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(trion1,trion)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(natin1,natin)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(uner1,uner)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(proart1,proart)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(proart1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(trion1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,proart1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(uner1,broomcloset1floor1)",
            "on(natin1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(proart1,pantry1)",
            "exit(proart1,livingroom1)",
            "exit(proart1,hallway1)",
            "exit(pantry1,proart1)",
            "exit(hallway1,proart1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,proart1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(trion1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(natin1)",
            "takeable(uner1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(natin1)",
            "movable(uner1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(natin1)",
            "needs_support(uner1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(uner1,trion1)",
            "on(natin1,trion1)",
            "on(peach1,trion1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "natin1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "uner1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "proart1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "proart1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "uner1",
              "trion1"
            ],
            [
              "go",
              "proart1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "natin1",
              "trion1"
            ],
            [
              "go",
              "proart1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "peach1",
              "trion1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "take natin",
            "go broom closet",
            "take uner",
            "go hallway",
            "go proart",
            "go pantry",
            "open refrigerator",
            "take peach",
            "go proart",
            "go living room",
            "put uner on trion",
            "go proart",
            "go living room",
            "put natin on trion",
            "go proart",
            "go living room",
            "put peach on trion"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"perce\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To perce is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "perce",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "proart",
              "standard_content": [
                "refrigerator",
                "counter",
                "trion"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "proart"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "proart",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "natin"
              ],
              "exit_targets": [
                "proart",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "natin",
                "trion",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "proart",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "uner"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "trion",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "proart",
                "livingroom"
              ],
              "type_name": "trion"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "proart"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "proart",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "proart"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "proart",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "natin",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "natin"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "uner",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "uner"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "proart",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "proart",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "proart",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "proart",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "proart",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "proart"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "proart",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "trion",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "natin",
                  "chair",
                  "bed",
                  "couch",
                  "uner",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "trion",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "trion",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "natin",
                  "uner",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "natin",
                  "uner",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "natin",
                  "uner",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can tratel. To tratel is to physically place something somewhere.\n\nYour goal for this game is: Put the unpish on the table, the plate on the secti and the mop on the secti.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(nolog1floor1,nolog1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,nolog1)",
            "at(secti1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,nolog1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(ation1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(unpish1,nolog1)",
            "at(pillow1,nolog1)",
            "at(player1,nolog1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(nolog1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(secti1,secti)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(ation1,ation)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(unpish1,unpish)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(nolog1,nolog)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(nolog1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(secti1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(unpish1,nolog1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(ation1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(nolog1,hallway1)",
            "exit(hallway1,nolog1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(secti1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(ation1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(unpish1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(ation1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(unpish1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(ation1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(unpish1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(unpish1,table1)",
            "on(plate1,secti1)",
            "on(mop1,secti1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "take",
              "unpish1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "unpish1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "secti1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "secti1"
            ]
          ],
          "optimal_commands": [
            "take unpish",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put unpish on table",
            "go kitchen",
            "take plate",
            "go living room",
            "put plate on secti",
            "go kitchen",
            "go living room",
            "put mop on secti"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"tratel\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tratel is to physically place something somewhere.",
              "new_word": "tratel",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "secti",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "nolog",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "nolog"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "nolog"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "nolog"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "secti",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "livingroom"
              ],
              "type_name": "secti"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "nolog"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "nolog"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "ation",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "ation"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "unpish",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "nolog"
              ],
              "type_name": "unpish"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "nolog"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "nolog"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "secti",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "ation",
                  "orange",
                  "peach",
                  "plate",
                  "unpish",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "secti",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "secti",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "ation",
                  "orange",
                  "peach",
                  "plate",
                  "unpish",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "ation",
                  "orange",
                  "peach",
                  "plate",
                  "unpish",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "ation",
                  "orange",
                  "peach",
                  "plate",
                  "unpish",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can stism. To stism is to remove or block an opening of something, and make its contents unavailable for use or interaction.\n\nYour goal for this game is: Put the nond on the table, the orange in the torish and the banana in the torish.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(imped1floor1,imped1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(torish1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,imped1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(inet1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(nond1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(imped1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(torish1,torish)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(inet1,inet)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(nond1,nond)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(imped1,imped)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(imped1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,imped1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(torish1)",
            "container(freezer1)",
            "in(nond1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(inet1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,imped1)",
            "exit(pantry1,kitchen1)",
            "exit(imped1,kitchen1)",
            "exit(imped1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,imped1)",
            "exit(bedroom1,imped1)",
            "exit(imped1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(torish1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(torish1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(torish1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(inet1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(nond1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(inet1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(nond1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(inet1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(nond1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(nond1,table1)",
            "in(orange1,torish1)",
            "in(banana1,torish1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "open",
              "torish1"
            ],
            [
              "go",
              "imped1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "nond1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "take",
              "orange1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "nond1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "imped1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "banana1",
              "torish1"
            ],
            [
              "go",
              "imped1"
            ],
            [
              "go",
              "bedroom1"
            ],
            [
              "put",
              "orange1",
              "torish1"
            ]
          ],
          "optimal_commands": [
            "open torish",
            "go imped",
            "go kitchen",
            "go pantry",
            "open refrigerator",
            "take nond",
            "take banana",
            "take orange",
            "go kitchen",
            "go living room",
            "put nond on table",
            "go kitchen",
            "go imped",
            "go bedroom",
            "put banana in torish",
            "go imped",
            "go bedroom",
            "put orange in torish"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"stism\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To stism is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "stism",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "imped"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "imped"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "imped",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "imped"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "imped"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "imped"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "torish"
              ],
              "exit_targets": [
                "livingroom",
                "imped"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "torish",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "torish"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "imped",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "inet",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "inet"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "nond",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "nond"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "imped",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "torish",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "sandwich",
                  "inet",
                  "banana",
                  "orange",
                  "nond",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "torish",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "torish",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "torish",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "inet",
                  "banana",
                  "orange",
                  "nond",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "inet",
                  "banana",
                  "orange",
                  "nond",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "inet",
                  "banana",
                  "orange",
                  "nond",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can vater. To vater is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the nogia on the table, the potted plant in the aling and the peach in the aling.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(rably1floor1,rably1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,rably1)",
            "at(refrigerator1,pantry1)",
            "at(aling1,rably1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(nogia1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(trionee1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,rably1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(rably1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(aling1,aling)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(nogia1,nogia)",
            "type(mop1,mop)",
            "type(trionee1,trionee)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(rably1,rably)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(rably1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,rably1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(nogia1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(aling1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(trionee1,refrigerator1)",
            "exit(rably1,pantry1)",
            "exit(rably1,livingroom1)",
            "exit(rably1,hallway1)",
            "exit(pantry1,rably1)",
            "exit(hallway1,rably1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,rably1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(aling1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(aling1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(aling1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(nogia1)",
            "takeable(mop1)",
            "takeable(trionee1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(nogia1)",
            "movable(mop1)",
            "movable(trionee1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(nogia1)",
            "needs_support(mop1)",
            "needs_support(trionee1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(nogia1,table1)",
            "in(pottedplant1,aling1)",
            "in(peach1,aling1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "nogia1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "rably1"
            ],
            [
              "open",
              "aling1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "rably1"
            ],
            [
              "put",
              "peach1",
              "aling1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "nogia1",
              "table1"
            ],
            [
              "go",
              "rably1"
            ],
            [
              "put",
              "pottedplant1",
              "aling1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take nogia",
            "go hallway",
            "take potted plant",
            "go rably",
            "open aling",
            "go pantry",
            "open refrigerator",
            "take peach",
            "go rably",
            "put peach in aling",
            "go living room",
            "put nogia on table",
            "go rably",
            "put potted plant in aling"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"vater\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To vater is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "vater",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "rably",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "rably"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "rably",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "rably",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "rably",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "nogia"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "rably",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "rably"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "rably",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "aling",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "rably"
              ],
              "type_name": "aling"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "rably",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "nogia",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "nogia"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "trionee",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rably",
                "pantry"
              ],
              "type_name": "trionee"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rably",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rably",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rably",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rably",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rably"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "rably",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "aling",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "nogia",
                  "mop",
                  "trionee",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "aling",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "aling",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "aling",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "nogia",
                  "mop",
                  "trionee",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "nogia",
                  "mop",
                  "trionee",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "nogia",
                  "mop",
                  "trionee",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can unalin. To unalin is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the ousnee on the table, the potted plant on the delly and the peach on the delly.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(ationee1floor1,ationee1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,ationee1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,ationee1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(delly1,livingroom1)",
            "at(ousnee1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(het1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,ationee1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(ationee1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(delly1,delly)",
            "type(ousnee1,ousnee)",
            "type(mop1,mop)",
            "type(het1,het)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(ationee1,ationee)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(ationee1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(delly1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,ationee1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(ousnee1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(het1,refrigerator1)",
            "exit(ationee1,pantry1)",
            "exit(ationee1,livingroom1)",
            "exit(ationee1,hallway1)",
            "exit(pantry1,ationee1)",
            "exit(hallway1,ationee1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,ationee1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(delly1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(ousnee1)",
            "takeable(mop1)",
            "takeable(het1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(ousnee1)",
            "movable(mop1)",
            "movable(het1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(ousnee1)",
            "needs_support(mop1)",
            "needs_support(het1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(ousnee1,table1)",
            "on(pottedplant1,delly1)",
            "on(peach1,delly1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "pottedplant1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "ousnee1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "ationee1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "ationee1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "peach1",
              "delly1"
            ],
            [
              "go",
              "ationee1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pottedplant1",
              "delly1"
            ],
            [
              "go",
              "ationee1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "ousnee1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "take potted plant",
            "go broom closet",
            "take ousnee",
            "go hallway",
            "go ationee",
            "go pantry",
            "open refrigerator",
            "take peach",
            "go ationee",
            "go living room",
            "put peach on delly",
            "go ationee",
            "go living room",
            "put potted plant on delly",
            "go ationee",
            "go living room",
            "put ousnee on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"unalin\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To unalin is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "unalin",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "ationee",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "ationee"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "ationee",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "ationee",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "delly"
              ],
              "exit_targets": [
                "ationee",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "ousnee"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "ationee",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "ationee",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "ationee",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "delly",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "delly"
            },
            {
              "repr_str": "ousnee",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "ousnee"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "het",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee",
                "pantry"
              ],
              "type_name": "het"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "ationee",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "delly",
                  "ousnee",
                  "mop",
                  "het",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "delly"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "delly"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "ousnee",
                  "mop",
                  "het",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "ousnee",
                  "mop",
                  "het",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "ousnee",
                  "mop",
                  "het",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can fress. To fress is to remove or block an opening of something, and make its contents unavailable for use or interaction.\n\nYour goal for this game is: Put the penol on the table, the mop on the micon and the broom on the micon.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(thot1floor1,thot1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,thot1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(micon1,livingroom1)",
            "at(freezer1,thot1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(ceoust1,thot1)",
            "at(apple1,thot1)",
            "at(banana1,thot1)",
            "at(orange1,thot1)",
            "at(peach1,thot1)",
            "at(penol1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(thot1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(micon1,micon)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(ceoust1,ceoust)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(penol1,penol)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(thot1,thot)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(thot1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(micon1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(penol1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(ceoust1,refrigerator1)",
            "exit(kitchen1,thot1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(thot1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(micon1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(ceoust1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(penol1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(ceoust1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(penol1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(ceoust1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(penol1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(penol1,table1)",
            "on(mop1,micon1)",
            "on(broom1,micon1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "micon1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "broom1",
              "micon1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "penol1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "penol1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take mop",
            "take broom",
            "go hallway",
            "go kitchen",
            "go living room",
            "put mop on micon",
            "go kitchen",
            "go living room",
            "put broom on micon",
            "go kitchen",
            "take penol",
            "go living room",
            "put penol on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"fress\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To fress is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "fress",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "thot",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "thot",
              "standard_content": [
                "refrigerator",
                "micon",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "thot"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "thot",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "thot"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "micon",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "thot",
                "livingroom"
              ],
              "type_name": "micon"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "thot"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "ceoust",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "thot"
              ],
              "type_name": "ceoust"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "thot"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "thot"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "thot"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "thot"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "penol",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "penol"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "thot",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "micon",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "ceoust",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "penol",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "micon",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "micon",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "ceoust",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "penol",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "ceoust",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "penol",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "ceoust",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "penol",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can ortid. To ortid is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.\n\nYour goal for this game is: Put the enerk on the table, the book on the alism and the plate on the alism.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(catint1floor1,catint1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,catint1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,catint1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(soriced1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(alism1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,catint1)",
            "at(book1,bedroom1)",
            "at(enerk1,bedroom1)",
            "at(player1,bedroom1)",
            "type(catint1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(soriced1,soriced)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(alism1,alism)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(enerk1,enerk)",
            "room(catint1,catint)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(catint1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(alism1)",
            "on(enerk1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,catint1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(soriced1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(catint1,pantry1)",
            "exit(catint1,livingroom1)",
            "exit(catint1,hallway1)",
            "exit(pantry1,catint1)",
            "exit(hallway1,catint1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,catint1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(alism1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(soriced1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(enerk1)",
            "movable(soriced1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(enerk1)",
            "needs_support(soriced1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(enerk1)"
          ],
          "goal_state": [
            "on(enerk1,table1)",
            "on(book1,alism1)",
            "on(plate1,alism1)"
          ],
          "max_turns": 50,
          "optimal_turns": 13,
          "optimal_solution": [
            [
              "take",
              "enerk1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "catint1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "alism1"
            ],
            [
              "go",
              "catint1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "enerk1",
              "table1"
            ],
            [
              "go",
              "catint1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "alism1"
            ]
          ],
          "optimal_commands": [
            "take enerk",
            "take book",
            "go hallway",
            "go catint",
            "take plate",
            "go living room",
            "put book on alism",
            "go catint",
            "go living room",
            "put enerk on table",
            "go catint",
            "go living room",
            "put plate on alism"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"ortid\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To ortid is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "ortid",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "catint",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "catint"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "catint",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "soriced"
              ],
              "exit_targets": [
                "catint",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "soriced",
                "table",
                "chair",
                "alism"
              ],
              "exit_targets": [
                "catint",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "catint",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "catint",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "catint",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "soriced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "soriced"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "alism",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "alism"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "catint",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "catint",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "catint",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "catint",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "catint",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "enerk",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "enerk"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "catint",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "soriced",
                  "chair",
                  "bed",
                  "alism",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "enerk"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "alism"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "alism"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "soriced",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "enerk"
                ],
                "movable": [
                  "soriced",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "enerk"
                ],
                "needs_support": [
                  "soriced",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "enerk"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can sious. To sious is to physically place something somewhere.\n\nYour goal for this game is: Put the unflued on the table, the plate in the pacia and the mop in the pacia.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(uncest1floor1,uncest1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(pacia1,uncest1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,uncest1)",
            "at(couch1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(tulacy1,pantry1)",
            "at(plate1,kitchen1)",
            "at(unflued1,uncest1)",
            "at(pillow1,uncest1)",
            "at(player1,uncest1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(uncest1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(pacia1,pacia)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(tulacy1,tulacy)",
            "type(plate1,plate)",
            "type(unflued1,unflued)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(uncest1,uncest)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(uncest1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(unflued1,uncest1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(pacia1)",
            "container(freezer1)",
            "in(tulacy1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(uncest1,hallway1)",
            "exit(hallway1,uncest1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(pacia1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(pacia1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(pacia1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(tulacy1)",
            "takeable(plate1)",
            "takeable(unflued1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(tulacy1)",
            "movable(plate1)",
            "movable(unflued1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(tulacy1)",
            "needs_support(plate1)",
            "needs_support(unflued1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(unflued1,table1)",
            "in(plate1,pacia1)",
            "in(mop1,pacia1)"
          ],
          "max_turns": 50,
          "optimal_turns": 17,
          "optimal_solution": [
            [
              "open",
              "pacia1"
            ],
            [
              "take",
              "unflued1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "unflued1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "put",
              "plate1",
              "pacia1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "put",
              "mop1",
              "pacia1"
            ]
          ],
          "optimal_commands": [
            "open pacia",
            "take unflued",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put unflued on table",
            "go kitchen",
            "go hallway",
            "go uncest",
            "put plate in pacia",
            "go hallway",
            "go uncest",
            "put mop in pacia"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"sious\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To sious is to physically place something somewhere.",
              "new_word": "sious",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "uncest",
              "standard_content": [
                "bed",
                "pacia"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "uncest"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "uncest"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "pacia",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "pacia"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "uncest"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "tulacy",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "tulacy"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "unflued",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "uncest"
              ],
              "type_name": "unflued"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "uncest"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "pacia",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "tulacy",
                  "plate",
                  "unflued",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "pacia",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "pacia",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "pacia",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "tulacy",
                  "plate",
                  "unflued",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "tulacy",
                  "plate",
                  "unflued",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "tulacy",
                  "plate",
                  "unflued",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can prust. To prust is to get something into one's hands, possession or control.\n\nYour goal for this game is: Put the menny on the reele, the book on the reele and the plate on the reele.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(rist1floor1,rist1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(reele1,rist1)",
            "at(sidetable1,rist1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,rist1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,rist1)",
            "at(bed1,bedroom1)",
            "at(couch1,rist1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(inging1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(menny1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(rist1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(reele1,reele)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(inging1,inging)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(menny1,menny)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(rist1,rist)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(rist1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(reele1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(menny1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(inging1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,rist1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(rist1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(reele1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(inging1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(menny1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(inging1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(menny1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(inging1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(menny1)"
          ],
          "goal_state": [
            "on(menny1,reele1)",
            "on(book1,reele1)",
            "on(plate1,reele1)"
          ],
          "max_turns": 50,
          "optimal_turns": 13,
          "optimal_solution": [
            [
              "take",
              "menny1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "rist1"
            ],
            [
              "put",
              "menny1",
              "reele1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "rist1"
            ],
            [
              "put",
              "plate1",
              "reele1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "rist1"
            ],
            [
              "put",
              "book1",
              "reele1"
            ]
          ],
          "optimal_commands": [
            "take menny",
            "take book",
            "go hallway",
            "go kitchen",
            "go rist",
            "put menny on reele",
            "go kitchen",
            "take plate",
            "go rist",
            "put plate on reele",
            "go kitchen",
            "go rist",
            "put book on reele"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"prust\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To prust is to get something into one's hands, possession or control.",
              "new_word": "prust",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "reele"
              ],
              "exit_targets": [
                "pantry",
                "rist",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "rist",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "rist",
              "standard_content": [
                "pottedplant",
                "reele",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "rist"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "rist",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "reele",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "rist"
              ],
              "type_name": "reele"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "rist",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "rist"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "rist",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "rist"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "rist"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "inging",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "inging"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rist",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "menny",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "menny"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "hallway",
                  "rist",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "reele",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "inging",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "menny"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "reele",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "reele",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "inging",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "menny"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "inging",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "menny"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "inging",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "menny"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can tedne. To tedne is to get something into one's hands, possession or control.\n\nYour goal for this game is: Put the ramiced on the table, the book on the derman and the plate on the derman.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(logal1floor1,logal1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(derman1,livingroom1)",
            "at(broom1,logal1)",
            "at(mop1,logal1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(sulphy1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(ramiced1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(logal1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(derman1,derman)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(sulphy1,sulphy)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(ramiced1,ramiced)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(logal1,logal)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(logal1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(derman1)",
            "on(ramiced1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,logal1floor1)",
            "on(broom1,logal1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(sulphy1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,logal1)",
            "exit(livingroom1,kitchen1)",
            "exit(logal1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(derman1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(sulphy1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(ramiced1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(sulphy1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(ramiced1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(sulphy1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(ramiced1)"
          ],
          "goal_state": [
            "on(ramiced1,table1)",
            "on(book1,derman1)",
            "on(plate1,derman1)"
          ],
          "max_turns": 50,
          "optimal_turns": 13,
          "optimal_solution": [
            [
              "take",
              "ramiced1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "derman1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "ramiced1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "derman1"
            ]
          ],
          "optimal_commands": [
            "take ramiced",
            "take book",
            "go hallway",
            "go kitchen",
            "take plate",
            "go living room",
            "put book on derman",
            "go kitchen",
            "go living room",
            "put ramiced on table",
            "go kitchen",
            "go living room",
            "put plate on derman"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"tedne\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tedne is to get something into one's hands, possession or control.",
              "new_word": "tedne",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "livingroom",
                "logal"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "derman"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "logal",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "logal"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "derman",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "derman"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "logal"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "logal"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "sulphy",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sulphy"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "ramiced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "ramiced"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "logal",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "derman",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "sulphy",
                  "plate",
                  "book",
                  "ramiced"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "derman"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "derman"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "sulphy",
                  "plate",
                  "book",
                  "ramiced"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "sulphy",
                  "plate",
                  "book",
                  "ramiced"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "orange",
                  "sulphy",
                  "plate",
                  "book",
                  "ramiced"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can comess. To comess is to physically place something somewhere.\n\nYour goal for this game is: Put the lator on the table, the mop on the comper and the broom on the comper.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(tuat1floor1,tuat1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,tuat1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,tuat1)",
            "at(comper1,livingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(chross1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(lator1,kitchen1)",
            "at(book1,tuat1)",
            "at(pillow1,tuat1)",
            "at(player1,tuat1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(tuat1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(comper1,comper)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(chross1,chross)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(lator1,lator)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(tuat1,tuat)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(tuat1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(comper1)",
            "on(pillow1,bed1)",
            "on(book1,tuat1floor1)",
            "on(lator1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(chross1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,hallway1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(livingroom1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(tuat1,hallway1)",
            "exit(hallway1,tuat1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(comper1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(chross1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(lator1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(chross1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(lator1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(chross1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(lator1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "on(lator1,table1)",
            "on(mop1,comper1)",
            "on(broom1,comper1)"
          ],
          "max_turns": 50,
          "optimal_turns": 15,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "broom1",
              "comper1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "lator1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "lator1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mop1",
              "comper1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "go broom closet",
            "take broom",
            "take mop",
            "go hallway",
            "go kitchen",
            "go living room",
            "put broom on comper",
            "go kitchen",
            "take lator",
            "go living room",
            "put lator on table",
            "go kitchen",
            "go living room",
            "put mop on comper"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"comess\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To comess is to physically place something somewhere.",
              "new_word": "comess",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "comper"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "tuat",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "tuat"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "tuat"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "tuat"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "tuat"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "tuat"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "comper",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "comper"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "chross",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "chross"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "lator",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "lator"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "tuat"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tuat"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "broomcloset",
                  "tuat"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "comper",
                  "broom",
                  "mop",
                  "sandwich",
                  "chross",
                  "banana",
                  "orange",
                  "peach",
                  "lator",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "comper"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "comper"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "chross",
                  "banana",
                  "orange",
                  "peach",
                  "lator",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "chross",
                  "banana",
                  "orange",
                  "peach",
                  "lator",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "chross",
                  "banana",
                  "orange",
                  "peach",
                  "lator",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "new-words_home-delivery_medium_basic_medium",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can inate, pante and eness.\n\nYour goal for this game is: Put the subst in the unsust, the mical on the table and the maten on the dente.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(uness1floor1,uness1)",
            "at(iness1floor1,iness1)",
            "at(unree1floor1,unree1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(dente1,livingroom1)",
            "at(counter1,uness1)",
            "at(unsust1,iness1)",
            "at(cupboard1,uness1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,iness1)",
            "at(sness1,unree1)",
            "at(chair1,livingroom1)",
            "at(scont1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(maten1,broomcloset1)",
            "at(mical1,broomcloset1)",
            "at(sandwich1,iness1)",
            "at(apple1,iness1)",
            "at(cally1,iness1)",
            "at(diale1,iness1)",
            "at(peach1,iness1)",
            "at(subst1,uness1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(uness1floor1,floor)",
            "type(iness1floor1,floor)",
            "type(unree1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(dente1,dente)",
            "type(counter1,counter)",
            "type(unsust1,unsust)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(sness1,sness)",
            "type(chair1,chair)",
            "type(scont1,scont)",
            "type(couch1,couch)",
            "type(maten1,maten)",
            "type(mical1,mical)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(cally1,cally)",
            "type(diale1,diale)",
            "type(peach1,peach)",
            "type(subst1,subst)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(uness1,uness)",
            "room(iness1,iness)",
            "room(unree1,unree)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(uness1floor1)",
            "support(iness1floor1)",
            "support(unree1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(dente1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(scont1)",
            "support(couch1)",
            "on(pillow1,scont1)",
            "on(book1,bedroom1floor1)",
            "on(subst1,uness1floor1)",
            "on(mical1,broomcloset1floor1)",
            "on(maten1,broomcloset1floor1)",
            "on(sness1,unree1floor1)",
            "container(unsust1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,unsust1)",
            "in(diale1,unsust1)",
            "in(cally1,unsust1)",
            "in(apple1,unsust1)",
            "in(sandwich1,unsust1)",
            "exit(uness1,iness1)",
            "exit(uness1,livingroom1)",
            "exit(uness1,unree1)",
            "exit(iness1,uness1)",
            "exit(unree1,uness1)",
            "exit(unree1,broomcloset1)",
            "exit(livingroom1,uness1)",
            "exit(broomcloset1,unree1)",
            "exit(bedroom1,unree1)",
            "exit(unree1,bedroom1)",
            "receptacle(table1)",
            "receptacle(dente1)",
            "receptacle(counter1)",
            "receptacle(unsust1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(scont1)",
            "receptacle(couch1)",
            "openable(unsust1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(unsust1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(sness1)",
            "takeable(maten1)",
            "takeable(mical1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(cally1)",
            "takeable(diale1)",
            "takeable(peach1)",
            "takeable(subst1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(sness1)",
            "movable(maten1)",
            "movable(mical1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(cally1)",
            "movable(diale1)",
            "movable(peach1)",
            "movable(subst1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(sness1)",
            "needs_support(maten1)",
            "needs_support(mical1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(cally1)",
            "needs_support(diale1)",
            "needs_support(peach1)",
            "needs_support(subst1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(subst1,unsust1)",
            "on(mical1,table1)",
            "on(maten1,dente1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "unree1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mical1"
            ],
            [
              "take",
              "maten1"
            ],
            [
              "go",
              "unree1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "mical1",
              "table1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "take",
              "subst1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "maten1",
              "dente1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "go",
              "iness1"
            ],
            [
              "open",
              "unsust1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "go",
              "iness1"
            ],
            [
              "put",
              "subst1",
              "unsust1"
            ]
          ],
          "optimal_commands": [
            "go unree",
            "go broom closet",
            "take mical",
            "take maten",
            "go unree",
            "go uness",
            "go living room",
            "put mical on table",
            "go uness",
            "take subst",
            "go living room",
            "put maten on dente",
            "go uness",
            "go iness",
            "open unsust",
            "go uness",
            "go iness",
            "put subst in unsust"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"inate\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To inate is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "inate",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"eness\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To eness is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "eness",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"pante\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To pante is to physically place something somewhere.",
              "new_word": "pante",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "uness",
              "standard_content": [
                "unsust",
                "counter",
                "table"
              ],
              "exit_targets": [
                "iness",
                "livingroom",
                "unree"
              ],
              "max_connections": 3,
              "type_name": "uness"
            },
            {
              "repr_str": "iness",
              "standard_content": [
                "unsust",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "uness",
                "unree"
              ],
              "max_connections": 1,
              "type_name": "iness"
            },
            {
              "repr_str": "unree",
              "standard_content": [
                "sness"
              ],
              "exit_targets": [
                "uness",
                "iness",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "unree"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "sness",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "uness",
                "unree"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "maten"
              ],
              "exit_targets": [
                "unree"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "scont",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "unree"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uness",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "dente",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "dente"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uness"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "unsust",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "unsust"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uness"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uness",
                "iness",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "iness"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "sness",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "unree",
                "bedroom"
              ],
              "type_name": "sness"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "scont",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "scont"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "maten",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "maten"
            },
            {
              "repr_str": "mical",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mical"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "cally",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "cally"
            },
            {
              "repr_str": "diale",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "diale"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness",
                "iness"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "subst",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uness"
              ],
              "type_name": "subst"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "uness",
                  "iness",
                  "unree",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "dente",
                  "counter",
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "sness",
                  "chair",
                  "scont",
                  "couch",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "dente",
                  "counter",
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "scont",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "dente",
                  "counter",
                  "shelf",
                  "chair",
                  "scont",
                  "couch"
                ],
                "openable": [
                  "unsust",
                  "cupboard",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "sness",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "sness",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "sness",
                  "maten",
                  "mical",
                  "sandwich",
                  "apple",
                  "cally",
                  "diale",
                  "peach",
                  "subst",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can natin, perce and trion.\n\nYour goal for this game is: Put the aphon in the mator, the book on the remiced and the proart on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(exper1floor1,exper1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(decte1floor1,decte1)",
            "at(enticed1floor1,enticed1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(remiced1,exper1)",
            "at(mator1,pantry1)",
            "at(uner1,exper1)",
            "at(wardrobe1,enticed1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(raticed1,hallway1)",
            "at(unbal1,livingroom1)",
            "at(bed1,enticed1)",
            "at(couch1,livingroom1)",
            "at(broom1,decte1)",
            "at(stord1,decte1)",
            "at(gaticed1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(proart1,exper1)",
            "at(book1,enticed1)",
            "at(aphon1,enticed1)",
            "at(player1,enticed1)",
            "type(exper1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(decte1floor1,floor)",
            "type(enticed1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(remiced1,remiced)",
            "type(mator1,mator)",
            "type(uner1,uner)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(raticed1,raticed)",
            "type(unbal1,unbal)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(stord1,stord)",
            "type(gaticed1,gaticed)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(proart1,proart)",
            "type(book1,book)",
            "type(aphon1,aphon)",
            "room(exper1,exper)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(decte1,decte)",
            "room(enticed1,enticed)",
            "support(exper1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(decte1floor1)",
            "support(enticed1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(remiced1)",
            "support(shelf1)",
            "support(unbal1)",
            "support(bed1)",
            "support(couch1)",
            "on(aphon1,bed1)",
            "on(book1,enticed1floor1)",
            "on(proart1,exper1floor1)",
            "on(stord1,decte1floor1)",
            "on(broom1,decte1floor1)",
            "on(raticed1,hallway1floor1)",
            "container(mator1)",
            "container(uner1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,mator1)",
            "in(orange1,mator1)",
            "in(banana1,mator1)",
            "in(apple1,mator1)",
            "in(gaticed1,mator1)",
            "exit(exper1,pantry1)",
            "exit(exper1,livingroom1)",
            "exit(exper1,hallway1)",
            "exit(pantry1,exper1)",
            "exit(hallway1,exper1)",
            "exit(hallway1,decte1)",
            "exit(livingroom1,exper1)",
            "exit(decte1,hallway1)",
            "exit(enticed1,hallway1)",
            "exit(hallway1,enticed1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(remiced1)",
            "receptacle(mator1)",
            "receptacle(uner1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(unbal1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(mator1)",
            "openable(uner1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(mator1)",
            "closed(uner1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(raticed1)",
            "takeable(broom1)",
            "takeable(stord1)",
            "takeable(gaticed1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(proart1)",
            "takeable(book1)",
            "takeable(aphon1)",
            "movable(raticed1)",
            "movable(broom1)",
            "movable(stord1)",
            "movable(gaticed1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(proart1)",
            "movable(book1)",
            "movable(aphon1)",
            "needs_support(raticed1)",
            "needs_support(broom1)",
            "needs_support(stord1)",
            "needs_support(gaticed1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(proart1)",
            "needs_support(book1)",
            "needs_support(aphon1)"
          ],
          "goal_state": [
            "in(aphon1,mator1)",
            "on(book1,remiced1)",
            "on(proart1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "take",
              "aphon1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "exper1"
            ],
            [
              "take",
              "proart1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "proart1",
              "table1"
            ],
            [
              "go",
              "exper1"
            ],
            [
              "put",
              "book1",
              "remiced1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "mator1"
            ],
            [
              "go",
              "exper1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "aphon1",
              "mator1"
            ]
          ],
          "optimal_commands": [
            "take aphon",
            "take book",
            "go hallway",
            "go exper",
            "take proart",
            "go living room",
            "put proart on table",
            "go exper",
            "put book on remiced",
            "go pantry",
            "open mator",
            "go exper",
            "go pantry",
            "put aphon in mator"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"perce\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To perce is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "perce",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"trion\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To trion is to get something into one's hands, possession or control.",
              "new_word": "trion",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"natin\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To natin is to physically place something somewhere.",
              "new_word": "natin",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "exper",
              "standard_content": [
                "mator",
                "remiced",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "exper"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "mator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "exper",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "raticed"
              ],
              "exit_targets": [
                "exper",
                "pantry",
                "livingroom",
                "decte"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "raticed",
                "table",
                "unbal",
                "couch"
              ],
              "exit_targets": [
                "exper",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "decte",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "decte"
            },
            {
              "repr_str": "enticed",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "enticed"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "exper",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "remiced",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "exper"
              ],
              "type_name": "remiced"
            },
            {
              "repr_str": "mator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "mator"
            },
            {
              "repr_str": "uner",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "exper"
              ],
              "type_name": "uner"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "exper",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "raticed",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "enticed"
              ],
              "type_name": "raticed"
            },
            {
              "repr_str": "unbal",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "unbal"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "decte"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "stord",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "decte"
              ],
              "type_name": "stord"
            },
            {
              "repr_str": "gaticed",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "gaticed"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "proart",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "exper"
              ],
              "type_name": "proart"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "enticed"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "aphon",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "enticed"
              ],
              "type_name": "aphon"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "exper",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "decte",
                  "enticed"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "remiced",
                  "mator",
                  "uner",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "raticed",
                  "unbal",
                  "bed",
                  "couch",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ],
                "container": [
                  "inventory",
                  "mator",
                  "uner",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "remiced",
                  "mator",
                  "uner",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "unbal",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "remiced",
                  "shelf",
                  "unbal",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "mator",
                  "uner",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "raticed",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ],
                "movable": [
                  "raticed",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ],
                "needs_support": [
                  "raticed",
                  "broom",
                  "stord",
                  "gaticed",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "proart",
                  "book",
                  "aphon"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can aling, vater and nogia.\n\nYour goal for this game is: Put the secti in the imped, the inet on the table and the broom on the rably.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(unpish1floor1,unpish1)",
            "at(nolog1floor1,nolog1)",
            "at(livingroom1floor1,livingroom1)",
            "at(ation1floor1,ation1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,kitchen1)",
            "at(imped1,unpish1)",
            "at(stism1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(trionee1,unpish1)",
            "at(pottedplant1,nolog1)",
            "at(rably1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(nond1,livingroom1)",
            "at(broom1,ation1)",
            "at(inet1,ation1)",
            "at(trateler1,unpish1)",
            "at(apple1,unpish1)",
            "at(torish1,unpish1)",
            "at(orange1,unpish1)",
            "at(peach1,unpish1)",
            "at(secti1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(unpish1floor1,floor)",
            "type(nolog1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(ation1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(imped1,imped)",
            "type(stism1,stism)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(trionee1,trionee)",
            "type(pottedplant1,pottedplant)",
            "type(rably1,rably)",
            "type(bed1,bed)",
            "type(nond1,nond)",
            "type(broom1,broom)",
            "type(inet1,inet)",
            "type(trateler1,trateler)",
            "type(apple1,apple)",
            "type(torish1,torish)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(secti1,secti)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(unpish1,unpish)",
            "room(nolog1,nolog)",
            "room(livingroom1,livingroom)",
            "room(ation1,ation)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(unpish1floor1)",
            "support(nolog1floor1)",
            "support(livingroom1floor1)",
            "support(ation1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(rably1)",
            "support(bed1)",
            "support(nond1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(secti1,kitchen1floor1)",
            "on(inet1,ation1floor1)",
            "on(broom1,ation1floor1)",
            "on(pottedplant1,nolog1floor1)",
            "container(imped1)",
            "container(stism1)",
            "container(wardrobe1)",
            "container(trionee1)",
            "in(peach1,imped1)",
            "in(orange1,imped1)",
            "in(torish1,imped1)",
            "in(apple1,imped1)",
            "in(trateler1,imped1)",
            "exit(kitchen1,unpish1)",
            "exit(kitchen1,livingroom1)",
            "exit(kitchen1,nolog1)",
            "exit(unpish1,kitchen1)",
            "exit(nolog1,kitchen1)",
            "exit(nolog1,ation1)",
            "exit(livingroom1,kitchen1)",
            "exit(ation1,nolog1)",
            "exit(bedroom1,nolog1)",
            "exit(nolog1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(imped1)",
            "receptacle(stism1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(trionee1)",
            "receptacle(rably1)",
            "receptacle(bed1)",
            "receptacle(nond1)",
            "openable(imped1)",
            "openable(stism1)",
            "openable(wardrobe1)",
            "openable(trionee1)",
            "closed(imped1)",
            "closed(stism1)",
            "closed(wardrobe1)",
            "closed(trionee1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(inet1)",
            "takeable(trateler1)",
            "takeable(apple1)",
            "takeable(torish1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(secti1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(inet1)",
            "movable(trateler1)",
            "movable(apple1)",
            "movable(torish1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(secti1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(inet1)",
            "needs_support(trateler1)",
            "needs_support(apple1)",
            "needs_support(torish1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(secti1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(secti1,imped1)",
            "on(inet1,table1)",
            "on(broom1,rably1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "nolog1"
            ],
            [
              "go",
              "ation1"
            ],
            [
              "take",
              "broom1"
            ],
            [
              "take",
              "inet1"
            ],
            [
              "go",
              "nolog1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "inet1",
              "table1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "broom1",
              "rably1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "secti1"
            ],
            [
              "go",
              "unpish1"
            ],
            [
              "open",
              "imped1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "unpish1"
            ],
            [
              "put",
              "secti1",
              "imped1"
            ]
          ],
          "optimal_commands": [
            "go nolog",
            "go ation",
            "take broom",
            "take inet",
            "go nolog",
            "go kitchen",
            "go living room",
            "put inet on table",
            "go kitchen",
            "go living room",
            "put broom on rably",
            "go kitchen",
            "take secti",
            "go unpish",
            "open imped",
            "go kitchen",
            "go unpish",
            "put secti in imped"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"vater\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To vater is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "vater",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"nogia\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To nogia is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "nogia",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"aling\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To aling is to get something into one's hands, possession or control.",
              "new_word": "aling",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "imped",
                "counter",
                "table"
              ],
              "exit_targets": [
                "unpish",
                "livingroom",
                "nolog"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "unpish",
              "standard_content": [
                "imped",
                "shelf",
                "trionee"
              ],
              "exit_targets": [
                "kitchen",
                "nolog"
              ],
              "max_connections": 1,
              "type_name": "unpish"
            },
            {
              "repr_str": "nolog",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "unpish",
                "livingroom",
                "ation"
              ],
              "max_connections": 4,
              "type_name": "nolog"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "rably",
                "nond"
              ],
              "exit_targets": [
                "kitchen",
                "nolog"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "ation",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "nolog"
              ],
              "max_connections": 1,
              "type_name": "ation"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "nolog"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "imped",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "imped"
            },
            {
              "repr_str": "stism",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "stism"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "unpish",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "trionee",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "unpish"
              ],
              "type_name": "trionee"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "nolog",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "rably",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "rably"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "nond",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "nond"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ation"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "inet",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ation"
              ],
              "type_name": "inet"
            },
            {
              "repr_str": "trateler",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "trateler"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "torish",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "torish"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "unpish"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "secti",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "secti"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "unpish",
                  "nolog",
                  "livingroom",
                  "ation",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "imped",
                  "stism",
                  "wardrobe",
                  "shelf",
                  "trionee",
                  "pottedplant",
                  "rably",
                  "bed",
                  "nond",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "imped",
                  "stism",
                  "wardrobe",
                  "trionee"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "imped",
                  "stism",
                  "wardrobe",
                  "shelf",
                  "trionee",
                  "rably",
                  "bed",
                  "nond"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "rably",
                  "bed",
                  "nond"
                ],
                "openable": [
                  "imped",
                  "stism",
                  "wardrobe",
                  "trionee"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "inet",
                  "trateler",
                  "apple",
                  "torish",
                  "orange",
                  "peach",
                  "secti",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can ortid, enerk and alism.\n\nYour goal for this game is: Put the delly in the thot, the plate on the micon and the penol on the table.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(het1floor1,het1)",
            "at(ousnee1floor1,ousnee1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(ationee1floor1,ationee1)",
            "at(table1,ousnee1)",
            "at(micon1,ousnee1)",
            "at(ceoust1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(thot1,kitchen1)",
            "at(wardrobe1,ationee1)",
            "at(shelf1,ousnee1)",
            "at(freezer1,pantry1)",
            "at(pottedplant1,het1)",
            "at(chair1,ousnee1)",
            "at(bed1,ationee1)",
            "at(couch1,ousnee1)",
            "at(catint1,broomcloset1)",
            "at(penol1,broomcloset1)",
            "at(soriced1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(unalin1,pantry1)",
            "at(fress1,pantry1)",
            "at(plate1,kitchen1)",
            "at(delly1,ationee1)",
            "at(pillow1,ationee1)",
            "at(player1,ationee1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(het1floor1,floor)",
            "type(ousnee1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(ationee1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(micon1,micon)",
            "type(ceoust1,ceoust)",
            "type(refrigerator1,refrigerator)",
            "type(thot1,thot)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(catint1,catint)",
            "type(penol1,penol)",
            "type(soriced1,soriced)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(unalin1,unalin)",
            "type(fress1,fress)",
            "type(plate1,plate)",
            "type(delly1,delly)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(het1,het)",
            "room(ousnee1,ousnee)",
            "room(broomcloset1,broomcloset)",
            "room(ationee1,ationee)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(het1floor1)",
            "support(ousnee1floor1)",
            "support(broomcloset1floor1)",
            "support(ationee1floor1)",
            "support(table1)",
            "support(micon1)",
            "support(ceoust1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(delly1,ationee1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(penol1,broomcloset1floor1)",
            "on(catint1,broomcloset1floor1)",
            "on(pottedplant1,het1floor1)",
            "container(refrigerator1)",
            "container(thot1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(fress1,refrigerator1)",
            "in(unalin1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(soriced1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,ousnee1)",
            "exit(kitchen1,het1)",
            "exit(pantry1,kitchen1)",
            "exit(het1,kitchen1)",
            "exit(het1,broomcloset1)",
            "exit(ousnee1,kitchen1)",
            "exit(broomcloset1,het1)",
            "exit(ationee1,het1)",
            "exit(het1,ationee1)",
            "receptacle(table1)",
            "receptacle(micon1)",
            "receptacle(ceoust1)",
            "receptacle(refrigerator1)",
            "receptacle(thot1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(thot1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(thot1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(catint1)",
            "takeable(penol1)",
            "takeable(soriced1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(unalin1)",
            "takeable(fress1)",
            "takeable(plate1)",
            "takeable(delly1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(catint1)",
            "movable(penol1)",
            "movable(soriced1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(unalin1)",
            "movable(fress1)",
            "movable(plate1)",
            "movable(delly1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(catint1)",
            "needs_support(penol1)",
            "needs_support(soriced1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(unalin1)",
            "needs_support(fress1)",
            "needs_support(plate1)",
            "needs_support(delly1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(delly1,thot1)",
            "on(plate1,micon1)",
            "on(penol1,table1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "take",
              "delly1"
            ],
            [
              "go",
              "het1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "penol1"
            ],
            [
              "go",
              "het1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "open",
              "thot1"
            ],
            [
              "go",
              "ousnee1"
            ],
            [
              "put",
              "plate1",
              "micon1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "delly1",
              "thot1"
            ],
            [
              "go",
              "ousnee1"
            ],
            [
              "put",
              "penol1",
              "table1"
            ]
          ],
          "optimal_commands": [
            "take delly",
            "go het",
            "go broom closet",
            "take penol",
            "go het",
            "go kitchen",
            "take plate",
            "open thot",
            "go ousnee",
            "put plate on micon",
            "go kitchen",
            "put delly in thot",
            "go ousnee",
            "put penol on table"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"alism\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To alism is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "alism",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ortid\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ortid is to get something into one's hands, possession or control.",
              "new_word": "ortid",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"enerk\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To enerk is to physically place something somewhere.",
              "new_word": "enerk",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "ceoust",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "ousnee",
                "het"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "het"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "het",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "ousnee",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "het"
            },
            {
              "repr_str": "ousnee",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "het"
              ],
              "max_connections": 2,
              "type_name": "ousnee"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "catint"
              ],
              "exit_targets": [
                "het"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "ationee",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "ousnee",
                "het"
              ],
              "max_connections": 1,
              "type_name": "ationee"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "ousnee"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "micon",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "ousnee",
                "ationee"
              ],
              "type_name": "micon"
            },
            {
              "repr_str": "ceoust",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "ceoust"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "thot",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "thot"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "ousnee"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "ousnee",
                "het",
                "ationee"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "ousnee"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "ousnee"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "catint",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "catint"
            },
            {
              "repr_str": "penol",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "penol"
            },
            {
              "repr_str": "soriced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "soriced"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "unalin",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "unalin"
            },
            {
              "repr_str": "fress",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "fress"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "delly",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ousnee",
                "ationee"
              ],
              "type_name": "delly"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ationee"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "het",
                  "ousnee",
                  "broomcloset",
                  "ationee"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "micon",
                  "ceoust",
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "micon",
                  "ceoust",
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "micon",
                  "ceoust",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "thot",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "catint",
                  "penol",
                  "soriced",
                  "apple",
                  "banana",
                  "unalin",
                  "fress",
                  "plate",
                  "delly",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can tedne, sulphy and derman.\n\nYour goal for this game is: Put the sioust in the reele, the pacia on the table and the inging on the menny.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(uncest1floor1,uncest1)",
            "at(pantry1floor1,pantry1)",
            "at(unflued1floor1,unflued1)",
            "at(livingroom1floor1,livingroom1)",
            "at(tulacy1floor1,tulacy1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(counter1,uncest1)",
            "at(refrigerator1,pantry1)",
            "at(reele1,uncest1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(rist1,pantry1)",
            "at(pacia1,unflued1)",
            "at(menny1,livingroom1)",
            "at(prust1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(sioust1,tulacy1)",
            "at(mop1,tulacy1)",
            "at(logal1,pantry1)",
            "at(ramiced1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(inging1,pantry1)",
            "at(plate1,uncest1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(uncest1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(unflued1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(tulacy1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(reele1,reele)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(rist1,rist)",
            "type(pacia1,pacia)",
            "type(menny1,menny)",
            "type(prust1,prust)",
            "type(couch1,couch)",
            "type(sioust1,sioust)",
            "type(mop1,mop)",
            "type(logal1,logal)",
            "type(ramiced1,ramiced)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(inging1,inging)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(uncest1,uncest)",
            "room(pantry1,pantry)",
            "room(unflued1,unflued)",
            "room(livingroom1,livingroom)",
            "room(tulacy1,tulacy)",
            "room(bedroom1,bedroom)",
            "support(uncest1floor1)",
            "support(pantry1floor1)",
            "support(unflued1floor1)",
            "support(livingroom1floor1)",
            "support(tulacy1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(menny1)",
            "support(prust1)",
            "support(couch1)",
            "on(pillow1,prust1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,uncest1floor1)",
            "on(mop1,tulacy1floor1)",
            "on(sioust1,tulacy1floor1)",
            "on(pacia1,unflued1floor1)",
            "container(refrigerator1)",
            "container(reele1)",
            "container(wardrobe1)",
            "container(rist1)",
            "in(inging1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(ramiced1,refrigerator1)",
            "in(logal1,refrigerator1)",
            "exit(uncest1,pantry1)",
            "exit(uncest1,livingroom1)",
            "exit(uncest1,unflued1)",
            "exit(pantry1,uncest1)",
            "exit(unflued1,uncest1)",
            "exit(unflued1,tulacy1)",
            "exit(livingroom1,uncest1)",
            "exit(tulacy1,unflued1)",
            "exit(bedroom1,unflued1)",
            "exit(unflued1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(reele1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(rist1)",
            "receptacle(menny1)",
            "receptacle(prust1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(reele1)",
            "openable(wardrobe1)",
            "openable(rist1)",
            "closed(refrigerator1)",
            "closed(reele1)",
            "closed(wardrobe1)",
            "closed(rist1)",
            "takeable(pacia1)",
            "takeable(sioust1)",
            "takeable(mop1)",
            "takeable(logal1)",
            "takeable(ramiced1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(inging1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pacia1)",
            "movable(sioust1)",
            "movable(mop1)",
            "movable(logal1)",
            "movable(ramiced1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(inging1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pacia1)",
            "needs_support(sioust1)",
            "needs_support(mop1)",
            "needs_support(logal1)",
            "needs_support(ramiced1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(inging1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(sioust1,reele1)",
            "on(pacia1,table1)",
            "on(inging1,menny1)"
          ],
          "max_turns": 50,
          "optimal_turns": 17,
          "optimal_solution": [
            [
              "go",
              "unflued1"
            ],
            [
              "go",
              "tulacy1"
            ],
            [
              "take",
              "sioust1"
            ],
            [
              "go",
              "unflued1"
            ],
            [
              "take",
              "pacia1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "open",
              "reele1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "pacia1",
              "table1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "put",
              "sioust1",
              "reele1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "refrigerator1"
            ],
            [
              "take",
              "inging1"
            ],
            [
              "go",
              "uncest1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "inging1",
              "menny1"
            ]
          ],
          "optimal_commands": [
            "go unflued",
            "go tulacy",
            "take sioust",
            "go unflued",
            "take pacia",
            "go uncest",
            "open reele",
            "go living room",
            "put pacia on table",
            "go uncest",
            "put sioust in reele",
            "go pantry",
            "open refrigerator",
            "take inging",
            "go uncest",
            "go living room",
            "put inging on menny"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"sulphy\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To sulphy is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "sulphy",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"tedne\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To tedne is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "tedne",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"derman\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To derman is to get something into one's hands, possession or control.",
              "new_word": "derman",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "uncest",
              "standard_content": [
                "refrigerator",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "unflued"
              ],
              "max_connections": 3,
              "type_name": "uncest"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "rist"
              ],
              "exit_targets": [
                "uncest",
                "unflued"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "unflued",
              "standard_content": [
                "pacia"
              ],
              "exit_targets": [
                "uncest",
                "pantry",
                "livingroom",
                "tulacy"
              ],
              "max_connections": 4,
              "type_name": "unflued"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pacia",
                "table",
                "menny",
                "couch"
              ],
              "exit_targets": [
                "uncest",
                "unflued"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "tulacy",
              "standard_content": [
                "sioust"
              ],
              "exit_targets": [
                "unflued"
              ],
              "max_connections": 1,
              "type_name": "tulacy"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "prust",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "unflued"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uncest",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "reele",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "reele"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "uncest",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "rist",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "rist"
            },
            {
              "repr_str": "pacia",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "unflued",
                "bedroom"
              ],
              "type_name": "pacia"
            },
            {
              "repr_str": "menny",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "menny"
            },
            {
              "repr_str": "prust",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "prust"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "sioust",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tulacy"
              ],
              "type_name": "sioust"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tulacy"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "logal",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "logal"
            },
            {
              "repr_str": "ramiced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "ramiced"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "inging",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest",
                "pantry"
              ],
              "type_name": "inging"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "uncest"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "uncest",
                  "pantry",
                  "unflued",
                  "livingroom",
                  "tulacy",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "shelf",
                  "rist",
                  "pacia",
                  "menny",
                  "prust",
                  "couch",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "rist"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "shelf",
                  "rist",
                  "menny",
                  "prust",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "shelf",
                  "menny",
                  "prust",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "reele",
                  "wardrobe",
                  "rist"
                ],
                "takeable": [
                  "pacia",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pacia",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pacia",
                  "sioust",
                  "mop",
                  "logal",
                  "ramiced",
                  "banana",
                  "orange",
                  "inging",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can acion, shness and arger.\n\nYour goal for this game is: Put the arliced in the atent, the comper on the table and the comess on the distral.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(lator1floor1,lator1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(tuat1floor1,tuat1)",
            "at(chross1floor1,chross1)",
            "at(table1,livingroom1)",
            "at(distral1,livingroom1)",
            "at(counter1,lator1)",
            "at(atent1,pantry1)",
            "at(evism1,lator1)",
            "at(wardrobe1,chross1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,pantry1)",
            "at(comess1,hallway1)",
            "at(proark1,livingroom1)",
            "at(incry1,chross1)",
            "at(couch1,livingroom1)",
            "at(comper1,tuat1)",
            "at(arliced1,tuat1)",
            "at(sandwich1,pantry1)",
            "at(lingly1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,lator1)",
            "at(book1,chross1)",
            "at(pillow1,chross1)",
            "at(player1,chross1)",
            "type(lator1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(tuat1floor1,floor)",
            "type(chross1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(distral1,distral)",
            "type(counter1,counter)",
            "type(atent1,atent)",
            "type(evism1,evism)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(comess1,comess)",
            "type(proark1,proark)",
            "type(incry1,incry)",
            "type(couch1,couch)",
            "type(comper1,comper)",
            "type(arliced1,arliced)",
            "type(sandwich1,sandwich)",
            "type(lingly1,lingly)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(lator1,lator)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(tuat1,tuat)",
            "room(chross1,chross)",
            "support(lator1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(tuat1floor1)",
            "support(chross1floor1)",
            "support(table1)",
            "support(distral1)",
            "support(counter1)",
            "support(shelf1)",
            "support(proark1)",
            "support(incry1)",
            "support(couch1)",
            "on(pillow1,incry1)",
            "on(book1,chross1floor1)",
            "on(plate1,lator1floor1)",
            "on(arliced1,tuat1floor1)",
            "on(comper1,tuat1floor1)",
            "on(comess1,hallway1floor1)",
            "container(atent1)",
            "container(evism1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,atent1)",
            "in(orange1,atent1)",
            "in(banana1,atent1)",
            "in(lingly1,atent1)",
            "in(sandwich1,atent1)",
            "exit(lator1,pantry1)",
            "exit(lator1,livingroom1)",
            "exit(lator1,hallway1)",
            "exit(pantry1,lator1)",
            "exit(hallway1,lator1)",
            "exit(hallway1,tuat1)",
            "exit(livingroom1,lator1)",
            "exit(tuat1,hallway1)",
            "exit(chross1,hallway1)",
            "exit(hallway1,chross1)",
            "receptacle(table1)",
            "receptacle(distral1)",
            "receptacle(counter1)",
            "receptacle(atent1)",
            "receptacle(evism1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(proark1)",
            "receptacle(incry1)",
            "receptacle(couch1)",
            "openable(atent1)",
            "openable(evism1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(atent1)",
            "closed(evism1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(comess1)",
            "takeable(comper1)",
            "takeable(arliced1)",
            "takeable(sandwich1)",
            "takeable(lingly1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(comess1)",
            "movable(comper1)",
            "movable(arliced1)",
            "movable(sandwich1)",
            "movable(lingly1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(comess1)",
            "needs_support(comper1)",
            "needs_support(arliced1)",
            "needs_support(sandwich1)",
            "needs_support(lingly1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(arliced1,atent1)",
            "on(comper1,table1)",
            "on(comess1,distral1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "go",
              "hallway1"
            ],
            [
              "take",
              "comess1"
            ],
            [
              "go",
              "tuat1"
            ],
            [
              "take",
              "comper1"
            ],
            [
              "take",
              "arliced1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "lator1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "comper1",
              "table1"
            ],
            [
              "go",
              "lator1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "comess1",
              "distral1"
            ],
            [
              "go",
              "lator1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "atent1"
            ],
            [
              "go",
              "lator1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "arliced1",
              "atent1"
            ]
          ],
          "optimal_commands": [
            "go hallway",
            "take comess",
            "go tuat",
            "take comper",
            "take arliced",
            "go hallway",
            "go lator",
            "go living room",
            "put comper on table",
            "go lator",
            "go living room",
            "put comess on distral",
            "go lator",
            "go pantry",
            "open atent",
            "go lator",
            "go pantry",
            "put arliced in atent"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"shness\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To shness is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "shness",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"acion\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To acion is to get something into one's hands, possession or control.",
              "new_word": "acion",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"arger\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To arger is to physically place something somewhere.",
              "new_word": "arger",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "lator",
              "standard_content": [
                "atent",
                "counter",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "lator"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "atent",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "lator",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "comess"
              ],
              "exit_targets": [
                "lator",
                "pantry",
                "livingroom",
                "tuat"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "comess",
                "table",
                "proark",
                "couch"
              ],
              "exit_targets": [
                "lator",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "tuat",
              "standard_content": [
                "comper"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "tuat"
            },
            {
              "repr_str": "chross",
              "standard_content": [
                "incry",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "chross"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "lator",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "distral",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "chross"
              ],
              "type_name": "distral"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "lator"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "atent",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "lator",
                "pantry"
              ],
              "type_name": "atent"
            },
            {
              "repr_str": "evism",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "lator"
              ],
              "type_name": "evism"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "chross"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "lator",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "comess",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "chross"
              ],
              "type_name": "comess"
            },
            {
              "repr_str": "proark",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "proark"
            },
            {
              "repr_str": "incry",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "chross"
              ],
              "type_name": "incry"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "comper",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tuat"
              ],
              "type_name": "comper"
            },
            {
              "repr_str": "arliced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tuat"
              ],
              "type_name": "arliced"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lator",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "lingly",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lator",
                "pantry"
              ],
              "type_name": "lingly"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lator",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lator",
                "pantry"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lator",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lator"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "chross"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "chross"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "lator",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "tuat",
                  "chross"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "distral",
                  "counter",
                  "atent",
                  "evism",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "comess",
                  "proark",
                  "incry",
                  "couch",
                  "comper",
                  "arliced",
                  "sandwich",
                  "lingly",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "atent",
                  "evism",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "distral",
                  "counter",
                  "atent",
                  "evism",
                  "wardrobe",
                  "shelf",
                  "freezer",
                  "proark",
                  "incry",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "distral",
                  "counter",
                  "shelf",
                  "proark",
                  "incry",
                  "couch"
                ],
                "openable": [
                  "atent",
                  "evism",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "comess",
                  "comper",
                  "arliced",
                  "sandwich",
                  "lingly",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "comess",
                  "comper",
                  "arliced",
                  "sandwich",
                  "lingly",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "comess",
                  "comper",
                  "arliced",
                  "sandwich",
                  "lingly",
                  "banana",
                  "orange",
                  "peach",
                  "plate",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can stfule, lotis and andect.\n\nYour goal for this game is: Put the dermin in the deint, the plate on the riat and the mop on the riat.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(rabish1floor1,rabish1)",
            "at(hypner1floor1,hypner1)",
            "at(prolly1floor1,prolly1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,prolly1)",
            "at(sidetable1,prolly1)",
            "at(riat1,kitchen1)",
            "at(deint1,rabish1)",
            "at(roplo1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(seash1,prolly1)",
            "at(freezer1,rabish1)",
            "at(pottedplant1,hypner1)",
            "at(chair1,prolly1)",
            "at(bed1,bedroom1)",
            "at(ireart1,prolly1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,rabish1)",
            "at(belity1,rabish1)",
            "at(intler1,rabish1)",
            "at(orange1,rabish1)",
            "at(psess1,rabish1)",
            "at(plate1,kitchen1)",
            "at(dermin1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(rabish1floor1,floor)",
            "type(hypner1floor1,floor)",
            "type(prolly1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(riat1,riat)",
            "type(deint1,deint)",
            "type(roplo1,roplo)",
            "type(wardrobe1,wardrobe)",
            "type(seash1,seash)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(ireart1,ireart)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(belity1,belity)",
            "type(intler1,intler)",
            "type(orange1,orange)",
            "type(psess1,psess)",
            "type(plate1,plate)",
            "type(dermin1,dermin)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(rabish1,rabish)",
            "room(hypner1,hypner)",
            "room(prolly1,prolly)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(rabish1floor1)",
            "support(hypner1floor1)",
            "support(prolly1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(riat1)",
            "support(seash1)",
            "support(chair1)",
            "support(bed1)",
            "support(ireart1)",
            "on(pillow1,bed1)",
            "on(dermin1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hypner1floor1)",
            "container(deint1)",
            "container(roplo1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(psess1,deint1)",
            "in(orange1,deint1)",
            "in(intler1,deint1)",
            "in(belity1,deint1)",
            "in(sandwich1,deint1)",
            "exit(kitchen1,rabish1)",
            "exit(kitchen1,prolly1)",
            "exit(kitchen1,hypner1)",
            "exit(rabish1,kitchen1)",
            "exit(hypner1,kitchen1)",
            "exit(hypner1,broomcloset1)",
            "exit(prolly1,kitchen1)",
            "exit(broomcloset1,hypner1)",
            "exit(bedroom1,hypner1)",
            "exit(hypner1,bedroom1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(riat1)",
            "receptacle(deint1)",
            "receptacle(roplo1)",
            "receptacle(wardrobe1)",
            "receptacle(seash1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(ireart1)",
            "openable(deint1)",
            "openable(roplo1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(deint1)",
            "closed(roplo1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(belity1)",
            "takeable(intler1)",
            "takeable(orange1)",
            "takeable(psess1)",
            "takeable(plate1)",
            "takeable(dermin1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(belity1)",
            "movable(intler1)",
            "movable(orange1)",
            "movable(psess1)",
            "movable(plate1)",
            "movable(dermin1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(belity1)",
            "needs_support(intler1)",
            "needs_support(orange1)",
            "needs_support(psess1)",
            "needs_support(plate1)",
            "needs_support(dermin1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(dermin1,deint1)",
            "on(plate1,riat1)",
            "on(mop1,riat1)"
          ],
          "max_turns": 50,
          "optimal_turns": 13,
          "optimal_solution": [
            [
              "take",
              "dermin1"
            ],
            [
              "go",
              "hypner1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hypner1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "mop1",
              "riat1"
            ],
            [
              "go",
              "rabish1"
            ],
            [
              "open",
              "deint1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "plate1",
              "riat1"
            ],
            [
              "go",
              "rabish1"
            ],
            [
              "put",
              "dermin1",
              "deint1"
            ]
          ],
          "optimal_commands": [
            "take dermin",
            "go hypner",
            "go broom closet",
            "take mop",
            "go hypner",
            "go kitchen",
            "put mop on riat",
            "go rabish",
            "open deint",
            "go kitchen",
            "put plate on riat",
            "go rabish",
            "put dermin in deint"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"lotis\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To lotis is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "lotis",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"stfule\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To stfule is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "stfule",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"andect\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To andect is to get something into one's hands, possession or control.",
              "new_word": "andect",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "deint",
                "riat",
                "table"
              ],
              "exit_targets": [
                "rabish",
                "prolly",
                "hypner"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "rabish",
              "standard_content": [
                "deint",
                "seash",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hypner"
              ],
              "max_connections": 1,
              "type_name": "rabish"
            },
            {
              "repr_str": "hypner",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "rabish",
                "prolly",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hypner"
            },
            {
              "repr_str": "prolly",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "ireart"
              ],
              "exit_targets": [
                "kitchen",
                "hypner"
              ],
              "max_connections": 2,
              "type_name": "prolly"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hypner"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "prolly",
                "hypner"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "prolly"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "prolly",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "riat",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "riat"
            },
            {
              "repr_str": "deint",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "rabish"
              ],
              "type_name": "deint"
            },
            {
              "repr_str": "roplo",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "roplo"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "seash",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "rabish",
                "prolly"
              ],
              "type_name": "seash"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "rabish"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "prolly",
                "hypner",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "prolly"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "ireart",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "prolly"
              ],
              "type_name": "ireart"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "rabish"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "belity",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "rabish"
              ],
              "type_name": "belity"
            },
            {
              "repr_str": "intler",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "rabish"
              ],
              "type_name": "intler"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "rabish"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "psess",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "rabish"
              ],
              "type_name": "psess"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "dermin",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "prolly",
                "bedroom"
              ],
              "type_name": "dermin"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "rabish",
                  "hypner",
                  "prolly",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "riat",
                  "deint",
                  "roplo",
                  "wardrobe",
                  "seash",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "ireart",
                  "broom",
                  "mop",
                  "sandwich",
                  "belity",
                  "intler",
                  "orange",
                  "psess",
                  "plate",
                  "dermin",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "deint",
                  "roplo",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "riat",
                  "deint",
                  "roplo",
                  "wardrobe",
                  "seash",
                  "freezer",
                  "chair",
                  "bed",
                  "ireart"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "riat",
                  "seash",
                  "chair",
                  "bed",
                  "ireart"
                ],
                "openable": [
                  "deint",
                  "roplo",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "belity",
                  "intler",
                  "orange",
                  "psess",
                  "plate",
                  "dermin",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "belity",
                  "intler",
                  "orange",
                  "psess",
                  "plate",
                  "dermin",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "belity",
                  "intler",
                  "orange",
                  "psess",
                  "plate",
                  "dermin",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can strood, eucty and pyell.\n\nYour goal for this game is: Put the oroust in the inchan, the book on the aciong and the plate on the aciong.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(emoust1floor1,emoust1)",
            "at(hallway1floor1,hallway1)",
            "at(etiont1floor1,etiont1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(encal1floor1,encal1)",
            "at(table1,etiont1)",
            "at(sidetable1,etiont1)",
            "at(counter1,kitchen1)",
            "at(inchan1,emoust1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,encal1)",
            "at(aciong1,etiont1)",
            "at(dolam1,emoust1)",
            "at(pottedplant1,hallway1)",
            "at(perent1,etiont1)",
            "at(bed1,encal1)",
            "at(swaiced1,etiont1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,emoust1)",
            "at(ailly1,emoust1)",
            "at(oming1,emoust1)",
            "at(orange1,emoust1)",
            "at(aphist1,emoust1)",
            "at(plate1,kitchen1)",
            "at(book1,encal1)",
            "at(oroust1,encal1)",
            "at(player1,encal1)",
            "type(kitchen1floor1,floor)",
            "type(emoust1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(etiont1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(encal1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(inchan1,inchan)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(aciong1,aciong)",
            "type(dolam1,dolam)",
            "type(pottedplant1,pottedplant)",
            "type(perent1,perent)",
            "type(bed1,bed)",
            "type(swaiced1,swaiced)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(ailly1,ailly)",
            "type(oming1,oming)",
            "type(orange1,orange)",
            "type(aphist1,aphist)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(oroust1,oroust)",
            "room(kitchen1,kitchen)",
            "room(emoust1,emoust)",
            "room(hallway1,hallway)",
            "room(etiont1,etiont)",
            "room(broomcloset1,broomcloset)",
            "room(encal1,encal)",
            "support(kitchen1floor1)",
            "support(emoust1floor1)",
            "support(hallway1floor1)",
            "support(etiont1floor1)",
            "support(broomcloset1floor1)",
            "support(encal1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(aciong1)",
            "support(perent1)",
            "support(bed1)",
            "support(swaiced1)",
            "on(oroust1,bed1)",
            "on(book1,encal1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(inchan1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(dolam1)",
            "in(aphist1,inchan1)",
            "in(orange1,inchan1)",
            "in(oming1,inchan1)",
            "in(ailly1,inchan1)",
            "in(sandwich1,inchan1)",
            "exit(kitchen1,emoust1)",
            "exit(kitchen1,etiont1)",
            "exit(kitchen1,hallway1)",
            "exit(emoust1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(etiont1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(encal1,hallway1)",
            "exit(hallway1,encal1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(inchan1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(aciong1)",
            "receptacle(dolam1)",
            "receptacle(perent1)",
            "receptacle(bed1)",
            "receptacle(swaiced1)",
            "openable(inchan1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(dolam1)",
            "closed(inchan1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(dolam1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(ailly1)",
            "takeable(oming1)",
            "takeable(orange1)",
            "takeable(aphist1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(oroust1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(ailly1)",
            "movable(oming1)",
            "movable(orange1)",
            "movable(aphist1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(oroust1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(ailly1)",
            "needs_support(oming1)",
            "needs_support(orange1)",
            "needs_support(aphist1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(oroust1)"
          ],
          "goal_state": [
            "in(oroust1,inchan1)",
            "on(book1,aciong1)",
            "on(plate1,aciong1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "take",
              "book1"
            ],
            [
              "take",
              "oroust1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "emoust1"
            ],
            [
              "open",
              "inchan1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "emoust1"
            ],
            [
              "put",
              "oroust1",
              "inchan1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "etiont1"
            ],
            [
              "put",
              "book1",
              "aciong1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "etiont1"
            ],
            [
              "put",
              "plate1",
              "aciong1"
            ]
          ],
          "optimal_commands": [
            "take book",
            "take oroust",
            "go hallway",
            "go kitchen",
            "go emoust",
            "open inchan",
            "go kitchen",
            "go emoust",
            "put oroust in inchan",
            "go kitchen",
            "take plate",
            "go etiont",
            "put book on aciong",
            "go kitchen",
            "go etiont",
            "put plate on aciong"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"eucty\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To eucty is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "eucty",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"strood\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To strood is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "strood",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to get something into one's hands, possession or control.",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"pyell\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To pyell is to physically place something somewhere.",
              "new_word": "pyell",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "inchan",
                "counter",
                "table"
              ],
              "exit_targets": [
                "emoust",
                "etiont",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "emoust",
              "standard_content": [
                "inchan",
                "aciong",
                "dolam"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "emoust"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "emoust",
                "etiont",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "etiont",
              "standard_content": [
                "pottedplant",
                "table",
                "perent",
                "swaiced"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "etiont"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "encal",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "etiont",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "encal"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "etiont"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "etiont",
                "encal"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "inchan",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "emoust"
              ],
              "type_name": "inchan"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "aciong",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "emoust",
                "etiont"
              ],
              "type_name": "aciong"
            },
            {
              "repr_str": "dolam",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "emoust"
              ],
              "type_name": "dolam"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "etiont",
                "hallway",
                "encal"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "perent",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "etiont"
              ],
              "type_name": "perent"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "swaiced",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "etiont"
              ],
              "type_name": "swaiced"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "emoust"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "ailly",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "emoust"
              ],
              "type_name": "ailly"
            },
            {
              "repr_str": "oming",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "emoust"
              ],
              "type_name": "oming"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "emoust"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "aphist",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "emoust"
              ],
              "type_name": "aphist"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "etiont",
                "encal"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "oroust",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "oroust"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "emoust",
                  "hallway",
                  "etiont",
                  "broomcloset",
                  "encal"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "inchan",
                  "cupboard",
                  "wardrobe",
                  "aciong",
                  "dolam",
                  "pottedplant",
                  "perent",
                  "bed",
                  "swaiced",
                  "broom",
                  "mop",
                  "sandwich",
                  "ailly",
                  "oming",
                  "orange",
                  "aphist",
                  "plate",
                  "book",
                  "oroust"
                ],
                "container": [
                  "inventory",
                  "inchan",
                  "cupboard",
                  "wardrobe",
                  "dolam"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "inchan",
                  "cupboard",
                  "wardrobe",
                  "aciong",
                  "dolam",
                  "perent",
                  "bed",
                  "swaiced"
                ],
                "support": [
                  "floor",
                  "table",
                  "sidetable",
                  "counter",
                  "aciong",
                  "perent",
                  "bed",
                  "swaiced"
                ],
                "openable": [
                  "inchan",
                  "cupboard",
                  "wardrobe",
                  "dolam"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "ailly",
                  "oming",
                  "orange",
                  "aphist",
                  "plate",
                  "book",
                  "oroust"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "ailly",
                  "oming",
                  "orange",
                  "aphist",
                  "plate",
                  "book",
                  "oroust"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "ailly",
                  "oming",
                  "orange",
                  "aphist",
                  "plate",
                  "book",
                  "oroust"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can lispe, degra and lones.\n\nYour goal for this game is: Put the setral in the iscad, the lablent on the mingnee and the eriat on the mingnee.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(retart1floor1,retart1)",
            "at(ostion1floor1,ostion1)",
            "at(olict1floor1,olict1)",
            "at(livingroom1floor1,livingroom1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(mingnee1,livingroom1)",
            "at(tworia1,livingroom1)",
            "at(counter1,retart1)",
            "at(refrigerator1,ostion1)",
            "at(iscad1,retart1)",
            "at(ovesish1,bedroom1)",
            "at(shelf1,livingroom1)",
            "at(freezer1,ostion1)",
            "at(pottedplant1,olict1)",
            "at(lepht1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(eriat1,broomcloset1)",
            "at(lablent1,broomcloset1)",
            "at(eriated1,ostion1)",
            "at(apple1,ostion1)",
            "at(banana1,ostion1)",
            "at(orange1,ostion1)",
            "at(peach1,ostion1)",
            "at(setral1,retart1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(retart1floor1,floor)",
            "type(ostion1floor1,floor)",
            "type(olict1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(mingnee1,mingnee)",
            "type(tworia1,tworia)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(iscad1,iscad)",
            "type(ovesish1,ovesish)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(lepht1,lepht)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(eriat1,eriat)",
            "type(lablent1,lablent)",
            "type(eriated1,eriated)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(setral1,setral)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "room(retart1,retart)",
            "room(ostion1,ostion)",
            "room(olict1,olict)",
            "room(livingroom1,livingroom)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(retart1floor1)",
            "support(ostion1floor1)",
            "support(olict1floor1)",
            "support(livingroom1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(mingnee1)",
            "support(tworia1)",
            "support(counter1)",
            "support(shelf1)",
            "support(lepht1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(setral1,retart1floor1)",
            "on(lablent1,broomcloset1floor1)",
            "on(eriat1,broomcloset1floor1)",
            "on(pottedplant1,olict1floor1)",
            "container(refrigerator1)",
            "container(iscad1)",
            "container(ovesish1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(eriated1,refrigerator1)",
            "exit(retart1,ostion1)",
            "exit(retart1,livingroom1)",
            "exit(retart1,olict1)",
            "exit(ostion1,retart1)",
            "exit(olict1,retart1)",
            "exit(olict1,broomcloset1)",
            "exit(livingroom1,retart1)",
            "exit(broomcloset1,olict1)",
            "exit(bedroom1,olict1)",
            "exit(olict1,bedroom1)",
            "receptacle(mingnee1)",
            "receptacle(tworia1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(iscad1)",
            "receptacle(ovesish1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(lepht1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(iscad1)",
            "openable(ovesish1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(iscad1)",
            "closed(ovesish1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(eriat1)",
            "takeable(lablent1)",
            "takeable(eriated1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(setral1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(eriat1)",
            "movable(lablent1)",
            "movable(eriated1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(setral1)",
            "movable(book1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(eriat1)",
            "needs_support(lablent1)",
            "needs_support(eriated1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(setral1)",
            "needs_support(book1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(setral1,iscad1)",
            "on(lablent1,mingnee1)",
            "on(eriat1,mingnee1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "go",
              "olict1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "eriat1"
            ],
            [
              "take",
              "lablent1"
            ],
            [
              "go",
              "olict1"
            ],
            [
              "go",
              "retart1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "lablent1",
              "mingnee1"
            ],
            [
              "go",
              "retart1"
            ],
            [
              "open",
              "iscad1"
            ],
            [
              "take",
              "setral1"
            ],
            [
              "put",
              "setral1",
              "iscad1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "eriat1",
              "mingnee1"
            ]
          ],
          "optimal_commands": [
            "go olict",
            "go broom closet",
            "take eriat",
            "take lablent",
            "go olict",
            "go retart",
            "go living room",
            "put lablent on mingnee",
            "go retart",
            "open iscad",
            "take setral",
            "put setral in iscad",
            "go living room",
            "put eriat on mingnee"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"lones\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To lones is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "lones",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"degra\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To degra is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "degra",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"lispe\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lispe is to get something into one's hands, possession or control.",
              "new_word": "lispe",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "retart",
              "standard_content": [
                "refrigerator",
                "counter",
                "mingnee"
              ],
              "exit_targets": [
                "ostion",
                "livingroom",
                "olict"
              ],
              "max_connections": 3,
              "type_name": "retart"
            },
            {
              "repr_str": "ostion",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "retart",
                "olict"
              ],
              "max_connections": 1,
              "type_name": "ostion"
            },
            {
              "repr_str": "olict",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "retart",
                "ostion",
                "livingroom",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "olict"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "mingnee",
                "lepht",
                "couch"
              ],
              "exit_targets": [
                "retart",
                "olict"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "eriat"
              ],
              "exit_targets": [
                "olict"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "ovesish"
              ],
              "exit_targets": [
                "livingroom",
                "olict"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "mingnee",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "retart",
                "livingroom"
              ],
              "type_name": "mingnee"
            },
            {
              "repr_str": "tworia",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "tworia"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "retart"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "retart",
                "ostion"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "iscad",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "retart"
              ],
              "type_name": "iscad"
            },
            {
              "repr_str": "ovesish",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "ovesish"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "retart",
                "ostion",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "ostion"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "olict",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "lepht",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "lepht"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "eriat",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "eriat"
            },
            {
              "repr_str": "lablent",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "lablent"
            },
            {
              "repr_str": "eriated",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "retart",
                "ostion"
              ],
              "type_name": "eriated"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "retart",
                "ostion"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "retart",
                "ostion"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "retart",
                "ostion"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "retart",
                "ostion"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "setral",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "retart"
              ],
              "type_name": "setral"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "retart",
                  "ostion",
                  "olict",
                  "livingroom",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "mingnee",
                  "tworia",
                  "counter",
                  "refrigerator",
                  "iscad",
                  "ovesish",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "lepht",
                  "bed",
                  "couch",
                  "eriat",
                  "lablent",
                  "eriated",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "setral",
                  "book",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "iscad",
                  "ovesish",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "mingnee",
                  "tworia",
                  "counter",
                  "refrigerator",
                  "iscad",
                  "ovesish",
                  "shelf",
                  "freezer",
                  "lepht",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "mingnee",
                  "tworia",
                  "counter",
                  "shelf",
                  "lepht",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "iscad",
                  "ovesish",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "eriat",
                  "lablent",
                  "eriated",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "setral",
                  "book",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "eriat",
                  "lablent",
                  "eriated",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "setral",
                  "book",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "eriat",
                  "lablent",
                  "eriated",
                  "apple",
                  "banana",
                  "orange",
                  "peach",
                  "setral",
                  "book",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can babile, ricary and scidia.\n\nYour goal for this game is: Put the riack in the teming, the plate on the taillag and the mop on the taillag.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(reging1floor1,reging1)",
            "at(eprour1floor1,eprour1)",
            "at(hallway1floor1,hallway1)",
            "at(ricke1floor1,ricke1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(taillag1,ricke1)",
            "at(dergal1,ricke1)",
            "at(orele1,reging1)",
            "at(refrigerator1,eprour1)",
            "at(cupboard1,reging1)",
            "at(teming1,bedroom1)",
            "at(siaticed1,ricke1)",
            "at(freezer1,eprour1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,ricke1)",
            "at(bed1,bedroom1)",
            "at(couch1,ricke1)",
            "at(iless1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(piesm1,eprour1)",
            "at(apple1,eprour1)",
            "at(banana1,eprour1)",
            "at(orange1,eprour1)",
            "at(astont1,eprour1)",
            "at(plate1,reging1)",
            "at(riack1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(reging1floor1,floor)",
            "type(eprour1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(ricke1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(taillag1,taillag)",
            "type(dergal1,dergal)",
            "type(orele1,orele)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(teming1,teming)",
            "type(siaticed1,siaticed)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(iless1,iless)",
            "type(mop1,mop)",
            "type(piesm1,piesm)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(astont1,astont)",
            "type(plate1,plate)",
            "type(riack1,riack)",
            "type(pillow1,pillow)",
            "room(reging1,reging)",
            "room(eprour1,eprour)",
            "room(hallway1,hallway)",
            "room(ricke1,ricke)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(reging1floor1)",
            "support(eprour1floor1)",
            "support(hallway1floor1)",
            "support(ricke1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(taillag1)",
            "support(dergal1)",
            "support(orele1)",
            "support(siaticed1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(riack1,bedroom1floor1)",
            "on(plate1,reging1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(iless1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(teming1)",
            "container(freezer1)",
            "in(astont1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(piesm1,refrigerator1)",
            "exit(reging1,eprour1)",
            "exit(reging1,ricke1)",
            "exit(reging1,hallway1)",
            "exit(eprour1,reging1)",
            "exit(hallway1,reging1)",
            "exit(hallway1,broomcloset1)",
            "exit(ricke1,reging1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(taillag1)",
            "receptacle(dergal1)",
            "receptacle(orele1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(teming1)",
            "receptacle(siaticed1)",
            "receptacle(freezer1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(teming1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(teming1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(iless1)",
            "takeable(mop1)",
            "takeable(piesm1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(astont1)",
            "takeable(plate1)",
            "takeable(riack1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(iless1)",
            "movable(mop1)",
            "movable(piesm1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(astont1)",
            "movable(plate1)",
            "movable(riack1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(iless1)",
            "needs_support(mop1)",
            "needs_support(piesm1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(astont1)",
            "needs_support(plate1)",
            "needs_support(riack1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(riack1,teming1)",
            "on(plate1,taillag1)",
            "on(mop1,taillag1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "open",
              "teming1"
            ],
            [
              "take",
              "riack1"
            ],
            [
              "put",
              "riack1",
              "teming1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "reging1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "ricke1"
            ],
            [
              "put",
              "plate1",
              "taillag1"
            ],
            [
              "go",
              "reging1"
            ],
            [
              "go",
              "ricke1"
            ],
            [
              "put",
              "mop1",
              "taillag1"
            ]
          ],
          "optimal_commands": [
            "open teming",
            "take riack",
            "put riack in teming",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go reging",
            "take plate",
            "go ricke",
            "put plate on taillag",
            "go reging",
            "go ricke",
            "put mop on taillag"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"babile\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To babile is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "babile",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"scidia\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To scidia is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "scidia",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ricary\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ricary is to get something into one's hands, possession or control.",
              "new_word": "ricary",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "reging",
              "standard_content": [
                "refrigerator",
                "orele",
                "taillag"
              ],
              "exit_targets": [
                "eprour",
                "ricke",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "reging"
            },
            {
              "repr_str": "eprour",
              "standard_content": [
                "refrigerator",
                "siaticed",
                "freezer"
              ],
              "exit_targets": [
                "reging",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "eprour"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "reging",
                "eprour",
                "ricke",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "ricke",
              "standard_content": [
                "pottedplant",
                "taillag",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "reging",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "ricke"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "iless"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "teming"
              ],
              "exit_targets": [
                "ricke",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "taillag",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "reging",
                "ricke"
              ],
              "type_name": "taillag"
            },
            {
              "repr_str": "dergal",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "ricke",
                "bedroom"
              ],
              "type_name": "dergal"
            },
            {
              "repr_str": "orele",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "reging"
              ],
              "type_name": "orele"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "reging",
                "eprour"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "reging"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "teming",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "teming"
            },
            {
              "repr_str": "siaticed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "reging",
                "eprour",
                "ricke"
              ],
              "type_name": "siaticed"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "eprour"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "ricke",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "ricke"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "ricke"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "iless",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "iless"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "piesm",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "reging",
                "eprour"
              ],
              "type_name": "piesm"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "reging",
                "eprour"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "reging",
                "eprour"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "reging",
                "eprour"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "astont",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "reging",
                "eprour"
              ],
              "type_name": "astont"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "reging"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "riack",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ricke",
                "bedroom"
              ],
              "type_name": "riack"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "reging",
                  "eprour",
                  "hallway",
                  "ricke",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "taillag",
                  "dergal",
                  "orele",
                  "refrigerator",
                  "cupboard",
                  "teming",
                  "siaticed",
                  "freezer",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "iless",
                  "mop",
                  "piesm",
                  "apple",
                  "banana",
                  "orange",
                  "astont",
                  "plate",
                  "riack",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "teming",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "taillag",
                  "dergal",
                  "orele",
                  "refrigerator",
                  "cupboard",
                  "teming",
                  "siaticed",
                  "freezer",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "taillag",
                  "dergal",
                  "orele",
                  "siaticed",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "teming",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "iless",
                  "mop",
                  "piesm",
                  "apple",
                  "banana",
                  "orange",
                  "astont",
                  "plate",
                  "riack",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "iless",
                  "mop",
                  "piesm",
                  "apple",
                  "banana",
                  "orange",
                  "astont",
                  "plate",
                  "riack",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "iless",
                  "mop",
                  "piesm",
                  "apple",
                  "banana",
                  "orange",
                  "astont",
                  "plate",
                  "riack",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can omante, precine and astable.\n\nYour goal for this game is: Put the atoust in the erack, the plecon on the stingly and the mop on the stingly.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(icalit1floor1,icalit1)",
            "at(hallway1floor1,hallway1)",
            "at(cretia1floor1,cretia1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(crury1floor1,crury1)",
            "at(stingly1,cretia1)",
            "at(sidetable1,cretia1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,icalit1)",
            "at(erack1,kitchen1)",
            "at(wardrobe1,crury1)",
            "at(ram1,cretia1)",
            "at(freezer1,icalit1)",
            "at(pottedplant1,hallway1)",
            "at(iscum1,cretia1)",
            "at(bed1,crury1)",
            "at(couch1,cretia1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(lowal1,icalit1)",
            "at(pader1,icalit1)",
            "at(banana1,icalit1)",
            "at(lotta1,icalit1)",
            "at(peach1,icalit1)",
            "at(plecon1,kitchen1)",
            "at(atoust1,crury1)",
            "at(pillow1,crury1)",
            "at(player1,crury1)",
            "type(kitchen1floor1,floor)",
            "type(icalit1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(cretia1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(crury1floor1,floor)",
            "type(player1,player)",
            "type(stingly1,stingly)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(erack1,erack)",
            "type(wardrobe1,wardrobe)",
            "type(ram1,ram)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(iscum1,iscum)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(lowal1,lowal)",
            "type(pader1,pader)",
            "type(banana1,banana)",
            "type(lotta1,lotta)",
            "type(peach1,peach)",
            "type(plecon1,plecon)",
            "type(atoust1,atoust)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(icalit1,icalit)",
            "room(hallway1,hallway)",
            "room(cretia1,cretia)",
            "room(broomcloset1,broomcloset)",
            "room(crury1,crury)",
            "support(kitchen1floor1)",
            "support(icalit1floor1)",
            "support(hallway1floor1)",
            "support(cretia1floor1)",
            "support(broomcloset1floor1)",
            "support(crury1floor1)",
            "support(stingly1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(ram1)",
            "support(iscum1)",
            "support(bed1)",
            "support(couch1)",
            "on(pillow1,bed1)",
            "on(atoust1,crury1floor1)",
            "on(plecon1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(erack1)",
            "container(wardrobe1)",
            "container(freezer1)",
            "in(peach1,refrigerator1)",
            "in(lotta1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(pader1,refrigerator1)",
            "in(lowal1,refrigerator1)",
            "exit(kitchen1,icalit1)",
            "exit(kitchen1,cretia1)",
            "exit(kitchen1,hallway1)",
            "exit(icalit1,kitchen1)",
            "exit(hallway1,kitchen1)",
            "exit(hallway1,broomcloset1)",
            "exit(cretia1,kitchen1)",
            "exit(broomcloset1,hallway1)",
            "exit(crury1,hallway1)",
            "exit(hallway1,crury1)",
            "receptacle(stingly1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(erack1)",
            "receptacle(wardrobe1)",
            "receptacle(ram1)",
            "receptacle(freezer1)",
            "receptacle(iscum1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(erack1)",
            "openable(wardrobe1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(erack1)",
            "closed(wardrobe1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(lowal1)",
            "takeable(pader1)",
            "takeable(banana1)",
            "takeable(lotta1)",
            "takeable(peach1)",
            "takeable(plecon1)",
            "takeable(atoust1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(lowal1)",
            "movable(pader1)",
            "movable(banana1)",
            "movable(lotta1)",
            "movable(peach1)",
            "movable(plecon1)",
            "movable(atoust1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(lowal1)",
            "needs_support(pader1)",
            "needs_support(banana1)",
            "needs_support(lotta1)",
            "needs_support(peach1)",
            "needs_support(plecon1)",
            "needs_support(atoust1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(atoust1,erack1)",
            "on(plecon1,stingly1)",
            "on(mop1,stingly1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "take",
              "atoust1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plecon1"
            ],
            [
              "open",
              "erack1"
            ],
            [
              "go",
              "cretia1"
            ],
            [
              "put",
              "plecon1",
              "stingly1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "put",
              "atoust1",
              "erack1"
            ],
            [
              "go",
              "cretia1"
            ],
            [
              "put",
              "mop1",
              "stingly1"
            ]
          ],
          "optimal_commands": [
            "take atoust",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go kitchen",
            "take plecon",
            "open erack",
            "go cretia",
            "put plecon on stingly",
            "go kitchen",
            "put atoust in erack",
            "go cretia",
            "put mop on stingly"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"omante\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To omante is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "omante",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"precine\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To precine is to get something into one's hands, possession or control.",
              "new_word": "precine",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"astable\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To astable is to physically place something somewhere.",
              "new_word": "astable",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "stingly"
              ],
              "exit_targets": [
                "icalit",
                "cretia",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "icalit",
              "standard_content": [
                "refrigerator",
                "ram",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "icalit"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "icalit",
                "cretia",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "cretia",
              "standard_content": [
                "pottedplant",
                "stingly",
                "iscum",
                "couch"
              ],
              "exit_targets": [
                "kitchen",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "cretia"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "crury",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "cretia",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "crury"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "stingly",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "cretia"
              ],
              "type_name": "stingly"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "cretia",
                "crury"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "icalit"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "erack",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "erack"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "crury"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "ram",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "icalit",
                "cretia"
              ],
              "type_name": "ram"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "icalit"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "cretia",
                "hallway",
                "crury"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "iscum",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "cretia"
              ],
              "type_name": "iscum"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "crury"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "cretia"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "lowal",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "icalit"
              ],
              "type_name": "lowal"
            },
            {
              "repr_str": "pader",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "icalit"
              ],
              "type_name": "pader"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "icalit"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "lotta",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "icalit"
              ],
              "type_name": "lotta"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "icalit"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plecon",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plecon"
            },
            {
              "repr_str": "atoust",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "cretia",
                "crury"
              ],
              "type_name": "atoust"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "crury"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "icalit",
                  "hallway",
                  "cretia",
                  "broomcloset",
                  "crury"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "stingly",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "erack",
                  "wardrobe",
                  "ram",
                  "freezer",
                  "pottedplant",
                  "iscum",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "lowal",
                  "pader",
                  "banana",
                  "lotta",
                  "peach",
                  "plecon",
                  "atoust",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "erack",
                  "wardrobe",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "stingly",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "erack",
                  "wardrobe",
                  "ram",
                  "freezer",
                  "iscum",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "stingly",
                  "sidetable",
                  "counter",
                  "ram",
                  "iscum",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "erack",
                  "wardrobe",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "lowal",
                  "pader",
                  "banana",
                  "lotta",
                  "peach",
                  "plecon",
                  "atoust",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "lowal",
                  "pader",
                  "banana",
                  "lotta",
                  "peach",
                  "plecon",
                  "atoust",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "lowal",
                  "pader",
                  "banana",
                  "lotta",
                  "peach",
                  "plecon",
                  "atoust",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can erson, intess and snemic.\n\nYour goal for this game is: Put the tisof in the torhy, the book on the rialiced and the plate on the rialiced.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(lonon1floor1,lonon1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(livingroom1floor1,livingroom1)",
            "at(ishing1floor1,ishing1)",
            "at(rot1floor1,rot1)",
            "at(rialiced1,livingroom1)",
            "at(sidetable1,livingroom1)",
            "at(ilitid1,lonon1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,lonon1)",
            "at(torhy1,rot1)",
            "at(shelf1,livingroom1)",
            "at(bioch1,pantry1)",
            "at(hirry1,hallway1)",
            "at(chair1,livingroom1)",
            "at(bed1,rot1)",
            "at(couch1,livingroom1)",
            "at(gumart1,ishing1)",
            "at(mop1,ishing1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(helum1,pantry1)",
            "at(antalle1,pantry1)",
            "at(plate1,lonon1)",
            "at(book1,rot1)",
            "at(tisof1,rot1)",
            "at(player1,rot1)",
            "type(lonon1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(ishing1floor1,floor)",
            "type(rot1floor1,floor)",
            "type(player1,player)",
            "type(rialiced1,rialiced)",
            "type(sidetable1,sidetable)",
            "type(ilitid1,ilitid)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(torhy1,torhy)",
            "type(shelf1,shelf)",
            "type(bioch1,bioch)",
            "type(hirry1,hirry)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(gumart1,gumart)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(helum1,helum)",
            "type(antalle1,antalle)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(tisof1,tisof)",
            "room(lonon1,lonon)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(livingroom1,livingroom)",
            "room(ishing1,ishing)",
            "room(rot1,rot)",
            "support(lonon1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(livingroom1floor1)",
            "support(ishing1floor1)",
            "support(rot1floor1)",
            "support(rialiced1)",
            "support(sidetable1)",
            "support(ilitid1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(tisof1,bed1)",
            "on(book1,rot1floor1)",
            "on(plate1,lonon1floor1)",
            "on(mop1,ishing1floor1)",
            "on(gumart1,ishing1floor1)",
            "on(hirry1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(torhy1)",
            "container(bioch1)",
            "in(antalle1,refrigerator1)",
            "in(helum1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(lonon1,pantry1)",
            "exit(lonon1,livingroom1)",
            "exit(lonon1,hallway1)",
            "exit(pantry1,lonon1)",
            "exit(hallway1,lonon1)",
            "exit(hallway1,ishing1)",
            "exit(livingroom1,lonon1)",
            "exit(ishing1,hallway1)",
            "exit(rot1,hallway1)",
            "exit(hallway1,rot1)",
            "receptacle(rialiced1)",
            "receptacle(sidetable1)",
            "receptacle(ilitid1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(torhy1)",
            "receptacle(shelf1)",
            "receptacle(bioch1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(torhy1)",
            "openable(bioch1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(torhy1)",
            "closed(bioch1)",
            "takeable(hirry1)",
            "takeable(gumart1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(helum1)",
            "takeable(antalle1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(tisof1)",
            "movable(hirry1)",
            "movable(gumart1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(helum1)",
            "movable(antalle1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(tisof1)",
            "needs_support(hirry1)",
            "needs_support(gumart1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(helum1)",
            "needs_support(antalle1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(tisof1)"
          ],
          "goal_state": [
            "in(tisof1,torhy1)",
            "on(book1,rialiced1)",
            "on(plate1,rialiced1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "open",
              "torhy1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "take",
              "tisof1"
            ],
            [
              "put",
              "tisof1",
              "torhy1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "lonon1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "rialiced1"
            ],
            [
              "go",
              "lonon1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "rialiced1"
            ]
          ],
          "optimal_commands": [
            "open torhy",
            "take book",
            "take tisof",
            "put tisof in torhy",
            "go hallway",
            "go lonon",
            "take plate",
            "go living room",
            "put plate on rialiced",
            "go lonon",
            "go living room",
            "put book on rialiced"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"snemic\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To snemic is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "snemic",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"intess\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To intess is to get something into one's hands, possession or control.",
              "new_word": "intess",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"erson\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To erson is to physically place something somewhere.",
              "new_word": "erson",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "lonon",
              "standard_content": [
                "refrigerator",
                "ilitid",
                "rialiced"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "lonon"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "bioch"
              ],
              "exit_targets": [
                "lonon",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "hirry"
              ],
              "exit_targets": [
                "lonon",
                "pantry",
                "livingroom",
                "ishing"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "hirry",
                "rialiced",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "lonon",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "ishing",
              "standard_content": [
                "gumart"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "ishing"
            },
            {
              "repr_str": "rot",
              "standard_content": [
                "bed",
                "torhy"
              ],
              "exit_targets": [
                "livingroom",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "rot"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "rialiced",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "lonon",
                "livingroom"
              ],
              "type_name": "rialiced"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "rot"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "ilitid",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "lonon"
              ],
              "type_name": "ilitid"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "lonon",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "lonon"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "torhy",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "rot"
              ],
              "type_name": "torhy"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "lonon",
                "pantry",
                "livingroom"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "bioch",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "bioch"
            },
            {
              "repr_str": "hirry",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "hallway",
                "rot"
              ],
              "type_name": "hirry"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "rot"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "gumart",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ishing"
              ],
              "type_name": "gumart"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "ishing"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lonon",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lonon",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lonon",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "helum",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lonon",
                "pantry"
              ],
              "type_name": "helum"
            },
            {
              "repr_str": "antalle",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lonon",
                "pantry"
              ],
              "type_name": "antalle"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "lonon"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "rot"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "tisof",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rot"
              ],
              "type_name": "tisof"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "lonon",
                  "pantry",
                  "hallway",
                  "livingroom",
                  "ishing",
                  "rot"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "rialiced",
                  "sidetable",
                  "ilitid",
                  "refrigerator",
                  "cupboard",
                  "torhy",
                  "shelf",
                  "bioch",
                  "hirry",
                  "chair",
                  "bed",
                  "couch",
                  "gumart",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "helum",
                  "antalle",
                  "plate",
                  "book",
                  "tisof"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "torhy",
                  "bioch"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "rialiced",
                  "sidetable",
                  "ilitid",
                  "refrigerator",
                  "cupboard",
                  "torhy",
                  "shelf",
                  "bioch",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "rialiced",
                  "sidetable",
                  "ilitid",
                  "shelf",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "torhy",
                  "bioch"
                ],
                "takeable": [
                  "hirry",
                  "gumart",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "helum",
                  "antalle",
                  "plate",
                  "book",
                  "tisof"
                ],
                "movable": [
                  "hirry",
                  "gumart",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "helum",
                  "antalle",
                  "plate",
                  "book",
                  "tisof"
                ],
                "needs_support": [
                  "hirry",
                  "gumart",
                  "mop",
                  "sandwich",
                  "apple",
                  "banana",
                  "helum",
                  "antalle",
                  "plate",
                  "book",
                  "tisof"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can fervan, thium and equadis.\n\nYour goal for this game is: Put the emingly in the atival, the plate on the reforia and the mop on the reforia.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(routiced1floor1,routiced1)",
            "at(emood1floor1,emood1)",
            "at(oustion1floor1,oustion1)",
            "at(bedroom1floor1,bedroom1)",
            "at(reforia1,emood1)",
            "at(sidetable1,emood1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,emood1)",
            "at(atival1,pantry1)",
            "at(anird1,routiced1)",
            "at(chair1,emood1)",
            "at(ioness1,bedroom1)",
            "at(attle1,emood1)",
            "at(broom1,oustion1)",
            "at(mop1,oustion1)",
            "at(hetle1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(opige1,pantry1)",
            "at(guaced1,pantry1)",
            "at(plate1,kitchen1)",
            "at(emingly1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(routiced1floor1,floor)",
            "type(emood1floor1,floor)",
            "type(oustion1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(reforia1,reforia)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(atival1,atival)",
            "type(anird1,anird)",
            "type(chair1,chair)",
            "type(ioness1,ioness)",
            "type(attle1,attle)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(hetle1,hetle)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(opige1,opige)",
            "type(guaced1,guaced)",
            "type(plate1,plate)",
            "type(emingly1,emingly)",
            "type(pillow1,pillow)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(routiced1,routiced)",
            "room(emood1,emood)",
            "room(oustion1,oustion)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(routiced1floor1)",
            "support(emood1floor1)",
            "support(oustion1floor1)",
            "support(bedroom1floor1)",
            "support(reforia1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(ioness1)",
            "support(attle1)",
            "on(pillow1,ioness1)",
            "on(emingly1,bedroom1floor1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,oustion1floor1)",
            "on(broom1,oustion1floor1)",
            "on(anird1,routiced1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(atival1)",
            "in(guaced1,refrigerator1)",
            "in(opige1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(hetle1,refrigerator1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,emood1)",
            "exit(kitchen1,routiced1)",
            "exit(pantry1,kitchen1)",
            "exit(routiced1,kitchen1)",
            "exit(routiced1,oustion1)",
            "exit(emood1,kitchen1)",
            "exit(oustion1,routiced1)",
            "exit(bedroom1,routiced1)",
            "exit(routiced1,bedroom1)",
            "receptacle(reforia1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(atival1)",
            "receptacle(chair1)",
            "receptacle(ioness1)",
            "receptacle(attle1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "openable(atival1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "closed(atival1)",
            "takeable(anird1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(hetle1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(opige1)",
            "takeable(guaced1)",
            "takeable(plate1)",
            "takeable(emingly1)",
            "takeable(pillow1)",
            "movable(anird1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(hetle1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(opige1)",
            "movable(guaced1)",
            "movable(plate1)",
            "movable(emingly1)",
            "movable(pillow1)",
            "needs_support(anird1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(hetle1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(opige1)",
            "needs_support(guaced1)",
            "needs_support(plate1)",
            "needs_support(emingly1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(emingly1,atival1)",
            "on(plate1,reforia1)",
            "on(mop1,reforia1)"
          ],
          "max_turns": 50,
          "optimal_turns": 18,
          "optimal_solution": [
            [
              "take",
              "emingly1"
            ],
            [
              "go",
              "routiced1"
            ],
            [
              "go",
              "oustion1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "routiced1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "atival1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "emood1"
            ],
            [
              "put",
              "plate1",
              "reforia1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "emood1"
            ],
            [
              "put",
              "mop1",
              "reforia1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "emingly1",
              "atival1"
            ]
          ],
          "optimal_commands": [
            "take emingly",
            "go routiced",
            "go oustion",
            "take mop",
            "go routiced",
            "go kitchen",
            "take plate",
            "go pantry",
            "open atival",
            "go kitchen",
            "go emood",
            "put plate on reforia",
            "go kitchen",
            "go emood",
            "put mop on reforia",
            "go kitchen",
            "go pantry",
            "put emingly in atival"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"fervan\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To fervan is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "fervan",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"thium\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To thium is to get something into one's hands, possession or control.",
              "new_word": "thium",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"equadis\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To equadis is to physically place something somewhere.",
              "new_word": "equadis",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "reforia"
              ],
              "exit_targets": [
                "pantry",
                "emood",
                "routiced"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "refrigerator",
                "shelf",
                "atival"
              ],
              "exit_targets": [
                "kitchen",
                "routiced"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "routiced",
              "standard_content": [
                "anird"
              ],
              "exit_targets": [
                "kitchen",
                "pantry",
                "emood",
                "oustion"
              ],
              "max_connections": 4,
              "type_name": "routiced"
            },
            {
              "repr_str": "emood",
              "standard_content": [
                "anird",
                "reforia",
                "chair",
                "attle"
              ],
              "exit_targets": [
                "kitchen",
                "routiced"
              ],
              "max_connections": 2,
              "type_name": "emood"
            },
            {
              "repr_str": "oustion",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "routiced"
              ],
              "max_connections": 1,
              "type_name": "oustion"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "ioness",
                "wardrobe"
              ],
              "exit_targets": [
                "emood",
                "routiced"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "reforia",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "emood"
              ],
              "type_name": "reforia"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "emood",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pantry",
                "emood"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "atival",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "atival"
            },
            {
              "repr_str": "anird",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "emood",
                "routiced",
                "bedroom"
              ],
              "type_name": "anird"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "emood"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "ioness",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "ioness"
            },
            {
              "repr_str": "attle",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "emood"
              ],
              "type_name": "attle"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "oustion"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "oustion"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "hetle",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "hetle"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "opige",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "opige"
            },
            {
              "repr_str": "guaced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pantry"
              ],
              "type_name": "guaced"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "emingly",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "emood",
                "bedroom"
              ],
              "type_name": "emingly"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pantry",
                  "routiced",
                  "emood",
                  "oustion",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "reforia",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "atival",
                  "anird",
                  "chair",
                  "ioness",
                  "attle",
                  "broom",
                  "mop",
                  "hetle",
                  "apple",
                  "banana",
                  "opige",
                  "guaced",
                  "plate",
                  "emingly",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "atival"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "reforia",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "shelf",
                  "atival",
                  "chair",
                  "ioness",
                  "attle"
                ],
                "support": [
                  "floor",
                  "reforia",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "ioness",
                  "attle"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "wardrobe",
                  "atival"
                ],
                "takeable": [
                  "anird",
                  "broom",
                  "mop",
                  "hetle",
                  "apple",
                  "banana",
                  "opige",
                  "guaced",
                  "plate",
                  "emingly",
                  "pillow"
                ],
                "movable": [
                  "anird",
                  "broom",
                  "mop",
                  "hetle",
                  "apple",
                  "banana",
                  "opige",
                  "guaced",
                  "plate",
                  "emingly",
                  "pillow"
                ],
                "needs_support": [
                  "anird",
                  "broom",
                  "mop",
                  "hetle",
                  "apple",
                  "banana",
                  "opige",
                  "guaced",
                  "plate",
                  "emingly",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can itink, clogery and ambint.\n\nYour goal for this game is: Put the venism in the cunad, the book on the ciot and the plate on the ciot.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(rotont1floor1,rotont1)",
            "at(pantry1floor1,pantry1)",
            "at(toxist1floor1,toxist1)",
            "at(livingroom1floor1,livingroom1)",
            "at(herper1floor1,herper1)",
            "at(bedroom1floor1,bedroom1)",
            "at(table1,livingroom1)",
            "at(ciot1,livingroom1)",
            "at(elloust1,rotont1)",
            "at(cunad1,pantry1)",
            "at(upbes1,rotont1)",
            "at(wardrobe1,bedroom1)",
            "at(ially1,livingroom1)",
            "at(onser1,pantry1)",
            "at(pottedplant1,toxist1)",
            "at(chair1,livingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,livingroom1)",
            "at(broom1,herper1)",
            "at(mop1,herper1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(everced1,pantry1)",
            "at(mellum1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,rotont1)",
            "at(book1,bedroom1)",
            "at(venism1,bedroom1)",
            "at(player1,bedroom1)",
            "type(rotont1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(toxist1floor1,floor)",
            "type(livingroom1floor1,floor)",
            "type(herper1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(ciot1,ciot)",
            "type(elloust1,elloust)",
            "type(cunad1,cunad)",
            "type(upbes1,upbes)",
            "type(wardrobe1,wardrobe)",
            "type(ially1,ially)",
            "type(onser1,onser)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(everced1,everced)",
            "type(mellum1,mellum)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(venism1,venism)",
            "room(rotont1,rotont)",
            "room(pantry1,pantry)",
            "room(toxist1,toxist)",
            "room(livingroom1,livingroom)",
            "room(herper1,herper)",
            "room(bedroom1,bedroom)",
            "support(rotont1floor1)",
            "support(pantry1floor1)",
            "support(toxist1floor1)",
            "support(livingroom1floor1)",
            "support(herper1floor1)",
            "support(bedroom1floor1)",
            "support(table1)",
            "support(ciot1)",
            "support(elloust1)",
            "support(ially1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(venism1,bed1)",
            "on(book1,bedroom1floor1)",
            "on(plate1,rotont1floor1)",
            "on(mop1,herper1floor1)",
            "on(broom1,herper1floor1)",
            "on(pottedplant1,toxist1floor1)",
            "container(cunad1)",
            "container(upbes1)",
            "container(wardrobe1)",
            "container(onser1)",
            "in(peach1,cunad1)",
            "in(mellum1,cunad1)",
            "in(everced1,cunad1)",
            "in(apple1,cunad1)",
            "in(sandwich1,cunad1)",
            "exit(rotont1,pantry1)",
            "exit(rotont1,livingroom1)",
            "exit(rotont1,toxist1)",
            "exit(pantry1,rotont1)",
            "exit(toxist1,rotont1)",
            "exit(toxist1,herper1)",
            "exit(livingroom1,rotont1)",
            "exit(herper1,toxist1)",
            "exit(bedroom1,toxist1)",
            "exit(toxist1,bedroom1)",
            "receptacle(table1)",
            "receptacle(ciot1)",
            "receptacle(elloust1)",
            "receptacle(cunad1)",
            "receptacle(upbes1)",
            "receptacle(wardrobe1)",
            "receptacle(ially1)",
            "receptacle(onser1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "openable(cunad1)",
            "openable(upbes1)",
            "openable(wardrobe1)",
            "openable(onser1)",
            "closed(cunad1)",
            "closed(upbes1)",
            "closed(wardrobe1)",
            "closed(onser1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(everced1)",
            "takeable(mellum1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(venism1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(everced1)",
            "movable(mellum1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(venism1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(everced1)",
            "needs_support(mellum1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(venism1)"
          ],
          "goal_state": [
            "in(venism1,cunad1)",
            "on(book1,ciot1)",
            "on(plate1,ciot1)"
          ],
          "max_turns": 50,
          "optimal_turns": 16,
          "optimal_solution": [
            [
              "take",
              "book1"
            ],
            [
              "take",
              "venism1"
            ],
            [
              "go",
              "toxist1"
            ],
            [
              "go",
              "rotont1"
            ],
            [
              "take",
              "plate1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "cunad1"
            ],
            [
              "go",
              "rotont1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "book1",
              "ciot1"
            ],
            [
              "go",
              "rotont1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "put",
              "venism1",
              "cunad1"
            ],
            [
              "go",
              "rotont1"
            ],
            [
              "go",
              "livingroom1"
            ],
            [
              "put",
              "plate1",
              "ciot1"
            ]
          ],
          "optimal_commands": [
            "take book",
            "take venism",
            "go toxist",
            "go rotont",
            "take plate",
            "go pantry",
            "open cunad",
            "go rotont",
            "go living room",
            "put book on ciot",
            "go rotont",
            "go pantry",
            "put venism in cunad",
            "go rotont",
            "go living room",
            "put plate on ciot"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"itink\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To itink is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "itink",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"ambint\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To ambint is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "ambint",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"clogery\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To clogery is to get something into one's hands, possession or control.",
              "new_word": "clogery",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "rotont",
              "standard_content": [
                "cunad",
                "elloust",
                "table"
              ],
              "exit_targets": [
                "pantry",
                "livingroom",
                "toxist"
              ],
              "max_connections": 3,
              "type_name": "rotont"
            },
            {
              "repr_str": "pantry",
              "standard_content": [
                "cunad",
                "ially",
                "onser"
              ],
              "exit_targets": [
                "rotont",
                "toxist"
              ],
              "max_connections": 1,
              "type_name": "pantry"
            },
            {
              "repr_str": "toxist",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "rotont",
                "pantry",
                "livingroom",
                "herper"
              ],
              "max_connections": 4,
              "type_name": "toxist"
            },
            {
              "repr_str": "living room",
              "standard_content": [
                "pottedplant",
                "table",
                "chair",
                "couch"
              ],
              "exit_targets": [
                "rotont",
                "toxist"
              ],
              "max_connections": 2,
              "type_name": "livingroom"
            },
            {
              "repr_str": "herper",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "toxist"
              ],
              "max_connections": 1,
              "type_name": "herper"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "wardrobe"
              ],
              "exit_targets": [
                "livingroom",
                "toxist"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "rotont",
                "livingroom"
              ],
              "type_name": "table"
            },
            {
              "repr_str": "ciot",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "ciot"
            },
            {
              "repr_str": "elloust",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "rotont"
              ],
              "type_name": "elloust"
            },
            {
              "repr_str": "cunad",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "rotont",
                "pantry"
              ],
              "type_name": "cunad"
            },
            {
              "repr_str": "upbes",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "rotont"
              ],
              "type_name": "upbes"
            },
            {
              "repr_str": "wardrobe",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "wardrobe"
            },
            {
              "repr_str": "ially",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "rotont",
                "pantry",
                "livingroom"
              ],
              "type_name": "ially"
            },
            {
              "repr_str": "onser",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pantry"
              ],
              "type_name": "onser"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "livingroom",
                "toxist",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "couch",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "livingroom"
              ],
              "type_name": "couch"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "herper"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "herper"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rotont",
                "pantry"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rotont",
                "pantry"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "everced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rotont",
                "pantry"
              ],
              "type_name": "everced"
            },
            {
              "repr_str": "mellum",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rotont",
                "pantry"
              ],
              "type_name": "mellum"
            },
            {
              "repr_str": "peach",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rotont",
                "pantry"
              ],
              "type_name": "peach"
            },
            {
              "repr_str": "plate",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "rotont"
              ],
              "type_name": "plate"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "livingroom",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "venism",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "venism"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "rotont",
                  "pantry",
                  "toxist",
                  "livingroom",
                  "herper",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "table",
                  "ciot",
                  "elloust",
                  "cunad",
                  "upbes",
                  "wardrobe",
                  "ially",
                  "onser",
                  "pottedplant",
                  "chair",
                  "bed",
                  "couch",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "everced",
                  "mellum",
                  "peach",
                  "plate",
                  "book",
                  "venism"
                ],
                "container": [
                  "inventory",
                  "cunad",
                  "upbes",
                  "wardrobe",
                  "onser"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "table",
                  "ciot",
                  "elloust",
                  "cunad",
                  "upbes",
                  "wardrobe",
                  "ially",
                  "onser",
                  "chair",
                  "bed",
                  "couch"
                ],
                "support": [
                  "floor",
                  "table",
                  "ciot",
                  "elloust",
                  "ially",
                  "chair",
                  "bed",
                  "couch"
                ],
                "openable": [
                  "cunad",
                  "upbes",
                  "wardrobe",
                  "onser"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "everced",
                  "mellum",
                  "peach",
                  "plate",
                  "book",
                  "venism"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "everced",
                  "mellum",
                  "peach",
                  "plate",
                  "book",
                  "venism"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "everced",
                  "mellum",
                  "peach",
                  "plate",
                  "book",
                  "venism"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can ridism, hooic and ditain.\n\nYour goal for this game is: Put the nophyle in the chophal, the book on the matiorm and the eleniced on the matiorm.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(kitchen1floor1,kitchen1)",
            "at(pledle1floor1,pledle1)",
            "at(hydroft1floor1,hydroft1)",
            "at(nionia1floor1,nionia1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(matiorm1,nionia1)",
            "at(sidetable1,nionia1)",
            "at(counter1,kitchen1)",
            "at(refrigerator1,pledle1)",
            "at(cupboard1,kitchen1)",
            "at(chophal1,bedroom1)",
            "at(shelf1,nionia1)",
            "at(freezer1,pledle1)",
            "at(pottedplant1,hydroft1)",
            "at(alloger1,nionia1)",
            "at(gicalio1,bedroom1)",
            "at(nousion1,nionia1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pledle1)",
            "at(apple1,pledle1)",
            "at(glogly1,pledle1)",
            "at(orange1,pledle1)",
            "at(permity1,pledle1)",
            "at(eleniced1,kitchen1)",
            "at(book1,bedroom1)",
            "at(nophyle1,bedroom1)",
            "at(player1,bedroom1)",
            "type(kitchen1floor1,floor)",
            "type(pledle1floor1,floor)",
            "type(hydroft1floor1,floor)",
            "type(nionia1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(matiorm1,matiorm)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(chophal1,chophal)",
            "type(shelf1,shelf)",
            "type(freezer1,freezer)",
            "type(pottedplant1,pottedplant)",
            "type(alloger1,alloger)",
            "type(gicalio1,gicalio)",
            "type(nousion1,nousion)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(glogly1,glogly)",
            "type(orange1,orange)",
            "type(permity1,permity)",
            "type(eleniced1,eleniced)",
            "type(book1,book)",
            "type(nophyle1,nophyle)",
            "room(kitchen1,kitchen)",
            "room(pledle1,pledle)",
            "room(hydroft1,hydroft)",
            "room(nionia1,nionia)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(kitchen1floor1)",
            "support(pledle1floor1)",
            "support(hydroft1floor1)",
            "support(nionia1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(matiorm1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(alloger1)",
            "support(gicalio1)",
            "support(nousion1)",
            "on(nophyle1,gicalio1)",
            "on(book1,bedroom1floor1)",
            "on(eleniced1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "on(pottedplant1,hydroft1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(chophal1)",
            "container(freezer1)",
            "in(permity1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(glogly1,refrigerator1)",
            "in(apple1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(kitchen1,pledle1)",
            "exit(kitchen1,nionia1)",
            "exit(kitchen1,hydroft1)",
            "exit(pledle1,kitchen1)",
            "exit(hydroft1,kitchen1)",
            "exit(hydroft1,broomcloset1)",
            "exit(nionia1,kitchen1)",
            "exit(broomcloset1,hydroft1)",
            "exit(bedroom1,hydroft1)",
            "exit(hydroft1,bedroom1)",
            "receptacle(matiorm1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(chophal1)",
            "receptacle(shelf1)",
            "receptacle(freezer1)",
            "receptacle(alloger1)",
            "receptacle(gicalio1)",
            "receptacle(nousion1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(chophal1)",
            "openable(freezer1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(chophal1)",
            "closed(freezer1)",
            "takeable(pottedplant1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(glogly1)",
            "takeable(orange1)",
            "takeable(permity1)",
            "takeable(eleniced1)",
            "takeable(book1)",
            "takeable(nophyle1)",
            "movable(pottedplant1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(glogly1)",
            "movable(orange1)",
            "movable(permity1)",
            "movable(eleniced1)",
            "movable(book1)",
            "movable(nophyle1)",
            "needs_support(pottedplant1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(glogly1)",
            "needs_support(orange1)",
            "needs_support(permity1)",
            "needs_support(eleniced1)",
            "needs_support(book1)",
            "needs_support(nophyle1)"
          ],
          "goal_state": [
            "in(nophyle1,chophal1)",
            "on(book1,matiorm1)",
            "on(eleniced1,matiorm1)"
          ],
          "max_turns": 50,
          "optimal_turns": 12,
          "optimal_solution": [
            [
              "open",
              "chophal1"
            ],
            [
              "take",
              "book1"
            ],
            [
              "take",
              "nophyle1"
            ],
            [
              "put",
              "nophyle1",
              "chophal1"
            ],
            [
              "go",
              "hydroft1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "take",
              "eleniced1"
            ],
            [
              "go",
              "nionia1"
            ],
            [
              "put",
              "eleniced1",
              "matiorm1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "go",
              "nionia1"
            ],
            [
              "put",
              "book1",
              "matiorm1"
            ]
          ],
          "optimal_commands": [
            "open chophal",
            "take book",
            "take nophyle",
            "put nophyle in chophal",
            "go hydroft",
            "go kitchen",
            "take eleniced",
            "go nionia",
            "put eleniced on matiorm",
            "go kitchen",
            "go nionia",
            "put book on matiorm"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"ridism\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To ridism is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "ridism",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ditain\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ditain is to get something into one's hands, possession or control.",
              "new_word": "ditain",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"hooic\" WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To hooic is to physically place something somewhere.",
              "new_word": "hooic",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "kitchen",
              "standard_content": [
                "refrigerator",
                "counter",
                "matiorm"
              ],
              "exit_targets": [
                "pledle",
                "nionia",
                "hydroft"
              ],
              "max_connections": 3,
              "type_name": "kitchen"
            },
            {
              "repr_str": "pledle",
              "standard_content": [
                "refrigerator",
                "shelf",
                "freezer"
              ],
              "exit_targets": [
                "kitchen",
                "hydroft"
              ],
              "max_connections": 1,
              "type_name": "pledle"
            },
            {
              "repr_str": "hydroft",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "kitchen",
                "pledle",
                "nionia",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hydroft"
            },
            {
              "repr_str": "nionia",
              "standard_content": [
                "pottedplant",
                "matiorm",
                "alloger",
                "nousion"
              ],
              "exit_targets": [
                "kitchen",
                "hydroft"
              ],
              "max_connections": 2,
              "type_name": "nionia"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "broom"
              ],
              "exit_targets": [
                "hydroft"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "gicalio",
                "chophal"
              ],
              "exit_targets": [
                "nionia",
                "hydroft"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "matiorm",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "nionia"
              ],
              "type_name": "matiorm"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "nionia",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen",
                "pledle"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "chophal",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "chophal"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "kitchen",
                "pledle",
                "nionia"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "freezer",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "pledle"
              ],
              "type_name": "freezer"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "nionia",
                "hydroft",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "alloger",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "nionia"
              ],
              "type_name": "alloger"
            },
            {
              "repr_str": "gicalio",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "gicalio"
            },
            {
              "repr_str": "nousion",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "nionia"
              ],
              "type_name": "nousion"
            },
            {
              "repr_str": "broom",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "broom"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pledle"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "apple",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pledle"
              ],
              "type_name": "apple"
            },
            {
              "repr_str": "glogly",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pledle"
              ],
              "type_name": "glogly"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pledle"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "permity",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen",
                "pledle"
              ],
              "type_name": "permity"
            },
            {
              "repr_str": "eleniced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "kitchen"
              ],
              "type_name": "eleniced"
            },
            {
              "repr_str": "book",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "nionia",
                "bedroom"
              ],
              "type_name": "book"
            },
            {
              "repr_str": "nophyle",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "nophyle"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "kitchen",
                  "pledle",
                  "hydroft",
                  "nionia",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "matiorm",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "chophal",
                  "shelf",
                  "freezer",
                  "pottedplant",
                  "alloger",
                  "gicalio",
                  "nousion",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "glogly",
                  "orange",
                  "permity",
                  "eleniced",
                  "book",
                  "nophyle"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "chophal",
                  "freezer"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "matiorm",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "chophal",
                  "shelf",
                  "freezer",
                  "alloger",
                  "gicalio",
                  "nousion"
                ],
                "support": [
                  "floor",
                  "matiorm",
                  "sidetable",
                  "counter",
                  "shelf",
                  "alloger",
                  "gicalio",
                  "nousion"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "chophal",
                  "freezer"
                ],
                "takeable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "glogly",
                  "orange",
                  "permity",
                  "eleniced",
                  "book",
                  "nophyle"
                ],
                "movable": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "glogly",
                  "orange",
                  "permity",
                  "eleniced",
                  "book",
                  "nophyle"
                ],
                "needs_support": [
                  "pottedplant",
                  "broom",
                  "mop",
                  "sandwich",
                  "apple",
                  "glogly",
                  "orange",
                  "permity",
                  "eleniced",
                  "book",
                  "nophyle"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can ropile, ecast and sinark.\n\nYour goal for this game is: Put the aterve in the altriced, the abluty on the conader and the mop on the conader.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(irmant1floor1,irmant1)",
            "at(scalike1floor1,scalike1)",
            "at(hallway1floor1,hallway1)",
            "at(tursot1floor1,tursot1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(conader1,tursot1)",
            "at(sidetable1,tursot1)",
            "at(counter1,irmant1)",
            "at(refrigerator1,scalike1)",
            "at(cupboard1,irmant1)",
            "at(altriced1,bedroom1)",
            "at(shelf1,tursot1)",
            "at(polotit1,scalike1)",
            "at(pottedplant1,hallway1)",
            "at(chair1,tursot1)",
            "at(bed1,bedroom1)",
            "at(uningnee1,tursot1)",
            "at(onable1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,scalike1)",
            "at(athemb1,scalike1)",
            "at(banana1,scalike1)",
            "at(orange1,scalike1)",
            "at(arimiced1,scalike1)",
            "at(abluty1,irmant1)",
            "at(aterve1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(player1,bedroom1)",
            "type(irmant1floor1,floor)",
            "type(scalike1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(tursot1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(player1,player)",
            "type(conader1,conader)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(refrigerator1,refrigerator)",
            "type(cupboard1,cupboard)",
            "type(altriced1,altriced)",
            "type(shelf1,shelf)",
            "type(polotit1,polotit)",
            "type(pottedplant1,pottedplant)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(uningnee1,uningnee)",
            "type(onable1,onable)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(athemb1,athemb)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(arimiced1,arimiced)",
            "type(abluty1,abluty)",
            "type(aterve1,aterve)",
            "type(pillow1,pillow)",
            "room(irmant1,irmant)",
            "room(scalike1,scalike)",
            "room(hallway1,hallway)",
            "room(tursot1,tursot)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "support(irmant1floor1)",
            "support(scalike1floor1)",
            "support(hallway1floor1)",
            "support(tursot1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(conader1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(uningnee1)",
            "on(pillow1,bed1)",
            "on(aterve1,bedroom1floor1)",
            "on(abluty1,irmant1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(onable1,broomcloset1floor1)",
            "on(pottedplant1,hallway1floor1)",
            "container(refrigerator1)",
            "container(cupboard1)",
            "container(altriced1)",
            "container(polotit1)",
            "in(arimiced1,refrigerator1)",
            "in(orange1,refrigerator1)",
            "in(banana1,refrigerator1)",
            "in(athemb1,refrigerator1)",
            "in(sandwich1,refrigerator1)",
            "exit(irmant1,scalike1)",
            "exit(irmant1,tursot1)",
            "exit(irmant1,hallway1)",
            "exit(scalike1,irmant1)",
            "exit(hallway1,irmant1)",
            "exit(hallway1,broomcloset1)",
            "exit(tursot1,irmant1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,hallway1)",
            "exit(hallway1,bedroom1)",
            "receptacle(conader1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(refrigerator1)",
            "receptacle(cupboard1)",
            "receptacle(altriced1)",
            "receptacle(shelf1)",
            "receptacle(polotit1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(uningnee1)",
            "openable(refrigerator1)",
            "openable(cupboard1)",
            "openable(altriced1)",
            "openable(polotit1)",
            "closed(refrigerator1)",
            "closed(cupboard1)",
            "closed(altriced1)",
            "closed(polotit1)",
            "takeable(pottedplant1)",
            "takeable(onable1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(athemb1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(arimiced1)",
            "takeable(abluty1)",
            "takeable(aterve1)",
            "takeable(pillow1)",
            "movable(pottedplant1)",
            "movable(onable1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(athemb1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(arimiced1)",
            "movable(abluty1)",
            "movable(aterve1)",
            "movable(pillow1)",
            "needs_support(pottedplant1)",
            "needs_support(onable1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(athemb1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(arimiced1)",
            "needs_support(abluty1)",
            "needs_support(aterve1)",
            "needs_support(pillow1)"
          ],
          "goal_state": [
            "in(aterve1,altriced1)",
            "on(abluty1,conader1)",
            "on(mop1,conader1)"
          ],
          "max_turns": 50,
          "optimal_turns": 14,
          "optimal_solution": [
            [
              "open",
              "altriced1"
            ],
            [
              "take",
              "aterve1"
            ],
            [
              "put",
              "aterve1",
              "altriced1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "broomcloset1"
            ],
            [
              "take",
              "mop1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "irmant1"
            ],
            [
              "take",
              "abluty1"
            ],
            [
              "go",
              "tursot1"
            ],
            [
              "put",
              "abluty1",
              "conader1"
            ],
            [
              "go",
              "irmant1"
            ],
            [
              "go",
              "tursot1"
            ],
            [
              "put",
              "mop1",
              "conader1"
            ]
          ],
          "optimal_commands": [
            "open altriced",
            "take aterve",
            "put aterve in altriced",
            "go hallway",
            "go broom closet",
            "take mop",
            "go hallway",
            "go irmant",
            "take abluty",
            "go tursot",
            "put abluty on conader",
            "go irmant",
            "go tursot",
            "put mop on conader"
          ],
          "action_definitions": [
            {
              "lark": "open: OPEN thing\nOPEN.1: \"ropile\" WS",
              "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not closed.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now open. {{ container_content }}",
              "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To ropile is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
              "new_word": "ropile",
              "type_name": "open"
            },
            {
              "lark": "close: CLOSE thing\nCLOSE.1: \"sinark\" WS",
              "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not openable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not open.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now closed.",
              "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
              "epistemic": false,
              "pragmatic": false,
              "explanation": "To sinark is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
              "new_word": "sinark",
              "type_name": "close"
            },
            {
              "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ecast\" WS",
              "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?s": [
                  "arg2",
                  "arg1_receptacle"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not takeable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ s }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is already in your inventory.",
                    "entity_already_inventory"
                  ],
                  [
                    "You can't see a {{ s }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not on the {{ s }}.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a support.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ s }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ s }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ e }} is not in the {{ s }}.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
              "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ecast is to get something into one's hands, possession or control.",
              "new_word": "ecast",
              "type_name": "take"
            },
            {
              "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
              "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?t": [
                  "arg2"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ e }} is not moveable.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ t }} is not a receptacle.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "You can't see a {{ t }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ t }} is not a container.",
                    "entity_trait_mismatch"
                  ],
                  [
                    "The {{ t }} is not open.",
                    "entity_state_mismatch"
                  ],
                  [
                    "The {{ t }} is not a support.",
                    "entity_trait_mismatch"
                  ]
                ]
              },
              "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
              "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to physically place something somewhere.",
              "type_name": "put"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ],
                "?i": [
                  "inventory"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ i }} is not an inventory. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "irmant",
              "standard_content": [
                "refrigerator",
                "counter",
                "conader"
              ],
              "exit_targets": [
                "scalike",
                "tursot",
                "hallway"
              ],
              "max_connections": 3,
              "type_name": "irmant"
            },
            {
              "repr_str": "scalike",
              "standard_content": [
                "refrigerator",
                "shelf",
                "polotit"
              ],
              "exit_targets": [
                "irmant",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "scalike"
            },
            {
              "repr_str": "hallway",
              "standard_content": [
                "pottedplant"
              ],
              "exit_targets": [
                "irmant",
                "scalike",
                "tursot",
                "broomcloset"
              ],
              "max_connections": 4,
              "type_name": "hallway"
            },
            {
              "repr_str": "tursot",
              "standard_content": [
                "pottedplant",
                "conader",
                "chair",
                "uningnee"
              ],
              "exit_targets": [
                "irmant",
                "hallway"
              ],
              "max_connections": 2,
              "type_name": "tursot"
            },
            {
              "repr_str": "broom closet",
              "standard_content": [
                "onable"
              ],
              "exit_targets": [
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "broomcloset"
            },
            {
              "repr_str": "bedroom",
              "standard_content": [
                "bed",
                "altriced"
              ],
              "exit_targets": [
                "tursot",
                "hallway"
              ],
              "max_connections": 1,
              "type_name": "bedroom"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "you",
              "hidden": true,
              "traits": [],
              "type_name": "player"
            },
            {
              "repr_str": "inventory",
              "hidden": true,
              "container": true,
              "traits": [
                "container",
                "receptacle"
              ],
              "type_name": "inventory"
            },
            {
              "repr_str": "floor",
              "hidden": true,
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "type_name": "floor"
            },
            {
              "repr_str": "conader",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "irmant",
                "tursot"
              ],
              "type_name": "conader"
            },
            {
              "repr_str": "side table",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "small"
              ],
              "standard_locations": [
                "tursot",
                "bedroom"
              ],
              "type_name": "sidetable"
            },
            {
              "repr_str": "counter",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "irmant"
              ],
              "type_name": "counter"
            },
            {
              "repr_str": "refrigerator",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "fancy"
              ],
              "standard_locations": [
                "irmant",
                "scalike"
              ],
              "type_name": "refrigerator"
            },
            {
              "repr_str": "cupboard",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "irmant"
              ],
              "type_name": "cupboard"
            },
            {
              "repr_str": "altriced",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "large",
                "fancy"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "altriced"
            },
            {
              "repr_str": "shelf",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "wooden",
                "metal",
                "low",
                "high"
              ],
              "standard_locations": [
                "irmant",
                "scalike",
                "tursot"
              ],
              "type_name": "shelf"
            },
            {
              "repr_str": "polotit",
              "container": true,
              "openable": true,
              "traits": [
                "container",
                "openable",
                "receptacle"
              ],
              "possible_adjs": [
                "large",
                "deep"
              ],
              "standard_locations": [
                "scalike"
              ],
              "type_name": "polotit"
            },
            {
              "repr_str": "potted plant",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "possible_adjs": [
                "large",
                "small"
              ],
              "standard_locations": [
                "tursot",
                "hallway",
                "bedroom"
              ],
              "type_name": "pottedplant"
            },
            {
              "repr_str": "chair",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "tursot"
              ],
              "type_name": "chair"
            },
            {
              "repr_str": "bed",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "bed"
            },
            {
              "repr_str": "uningnee",
              "support": true,
              "traits": [
                "support",
                "receptacle"
              ],
              "possible_adjs": [
                "comfy",
                "wooden",
                "padded"
              ],
              "standard_locations": [
                "tursot"
              ],
              "type_name": "uningnee"
            },
            {
              "repr_str": "onable",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "onable"
            },
            {
              "repr_str": "mop",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "broomcloset"
              ],
              "type_name": "mop"
            },
            {
              "repr_str": "sandwich",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "irmant",
                "scalike"
              ],
              "type_name": "sandwich"
            },
            {
              "repr_str": "athemb",
              "takeable": true,
              "movable": true,
              "supported": true,
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "irmant",
                "scalike"
              ],
              "type_name": "athemb"
            },
            {
              "repr_str": "banana",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "jelly"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "irmant",
                "scalike"
              ],
              "type_name": "banana"
            },
            {
              "repr_str": "orange",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "irmant",
                "scalike"
              ],
              "type_name": "orange"
            },
            {
              "repr_str": "arimiced",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ripe",
                "fresh"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "irmant",
                "scalike"
              ],
              "type_name": "arimiced"
            },
            {
              "repr_str": "abluty",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "ceramic",
                "glass"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "irmant"
              ],
              "type_name": "abluty"
            },
            {
              "repr_str": "aterve",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "old",
                "thin"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "tursot",
                "bedroom"
              ],
              "type_name": "aterve"
            },
            {
              "repr_str": "pillow",
              "takeable": true,
              "movable": true,
              "supported": true,
              "possible_adjs": [
                "down",
                "small"
              ],
              "traits": [
                "takeable",
                "movable",
                "needs_support"
              ],
              "standard_locations": [
                "bedroom"
              ],
              "type_name": "pillow"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "partial_new_words",
              "types": {
                "room": [
                  "irmant",
                  "scalike",
                  "hallway",
                  "tursot",
                  "broomcloset",
                  "bedroom"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "player",
                  "inventory",
                  "floor",
                  "conader",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "altriced",
                  "shelf",
                  "polotit",
                  "pottedplant",
                  "chair",
                  "bed",
                  "uningnee",
                  "onable",
                  "mop",
                  "sandwich",
                  "athemb",
                  "banana",
                  "orange",
                  "arimiced",
                  "abluty",
                  "aterve",
                  "pillow"
                ],
                "container": [
                  "inventory",
                  "refrigerator",
                  "cupboard",
                  "altriced",
                  "polotit"
                ],
                "receptacle": [
                  "inventory",
                  "floor",
                  "conader",
                  "sidetable",
                  "counter",
                  "refrigerator",
                  "cupboard",
                  "altriced",
                  "shelf",
                  "polotit",
                  "chair",
                  "bed",
                  "uningnee"
                ],
                "support": [
                  "floor",
                  "conader",
                  "sidetable",
                  "counter",
                  "shelf",
                  "chair",
                  "bed",
                  "uningnee"
                ],
                "openable": [
                  "refrigerator",
                  "cupboard",
                  "altriced",
                  "polotit"
                ],
                "takeable": [
                  "pottedplant",
                  "onable",
                  "mop",
                  "sandwich",
                  "athemb",
                  "banana",
                  "orange",
                  "arimiced",
                  "abluty",
                  "aterve",
                  "pillow"
                ],
                "movable": [
                  "pottedplant",
                  "onable",
                  "mop",
                  "sandwich",
                  "athemb",
                  "banana",
                  "orange",
                  "arimiced",
                  "abluty",
                  "aterve",
                  "pillow"
                ],
                "needs_support": [
                  "pottedplant",
                  "onable",
                  "mop",
                  "sandwich",
                  "athemb",
                  "banana",
                  "orange",
                  "arimiced",
                  "abluty",
                  "aterve",
                  "pillow"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "open",
                  "variable": "e",
                  "mutability": "openable"
                },
                {
                  "predicate_id": "closed",
                  "variable": "e",
                  "mutability": "openable"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "new-words_created_basic_hard",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can mator, unbal, gatic, remic, ratic and proar.\n\nYour goal for this game is: Make the inat mateny, the diale unsust and the subst dented.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(decte1,unree1)",
            "at(enticed1,iness1)",
            "at(inat1,cally1)",
            "at(pante1,cally1)",
            "at(eness1,cally1)",
            "at(mical1,cally1)",
            "at(sness1,cally1)",
            "at(diale1,uness1)",
            "at(scont1,unree1)",
            "at(subst1,cally1)",
            "at(player1,cally1)",
            "type(player1,player)",
            "type(subst1,subst)",
            "type(scont1,scont)",
            "type(diale1,diale)",
            "type(sness1,sness)",
            "type(mical1,mical)",
            "type(eness1,eness)",
            "type(pante1,pante)",
            "type(inat1,inat)",
            "type(enticed1,enticed)",
            "type(decte1,decte)",
            "room(unree1,unree)",
            "room(iness1,iness)",
            "room(uness1,uness)",
            "room(cally1,cally)",
            "unsust(enticed1)",
            "unsust(pante1)",
            "unsust(eness1)",
            "unsust(mical1)",
            "exper(sness1)",
            "exper(diale1)",
            "mateny(decte1)",
            "stord(sness1)",
            "aphoned(inat1)",
            "exit(unree1,iness1)",
            "exit(iness1,unree1)",
            "exit(uness1,iness1)",
            "exit(cally1,unree1)",
            "exit(unree1,cally1)",
            "exit(iness1,uness1)",
            "dented_able(subst1)",
            "dented_able(scont1)",
            "dented_able(diale1)",
            "dented_able(mical1)",
            "dented_able(inat1)",
            "dented_able(enticed1)",
            "unsust_able(diale1)",
            "unsust_able(sness1)",
            "unsust_able(mical1)",
            "unsust_able(eness1)",
            "unsust_able(pante1)",
            "unsust_able(enticed1)",
            "mateny_able(sness1)",
            "mateny_able(inat1)",
            "mateny_able(decte1)"
          ],
          "goal_state": [
            "dented(subst1)",
            "unsust(diale1)",
            "mateny(inat1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "mator",
              "subst1"
            ],
            [
              "proar",
              "inat1"
            ],
            [
              "go",
              "unree1"
            ],
            [
              "go",
              "iness1"
            ],
            [
              "go",
              "uness1"
            ],
            [
              "gatic",
              "diale1"
            ]
          ],
          "optimal_commands": [
            "mator subst",
            "proar inat",
            "go unree",
            "go iness",
            "go uness",
            "gatic diale"
          ],
          "action_definitions": [
            {
              "lark": "mator: MATOR thing\nMATOR.1: \"mator\" WS",
              "pddl": "(:action MATOR\n    :parameters (?e - dented_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (dented ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not dented-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now dented.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To mator is to make something dented_able dented.",
              "asp": "{ action_t(TURN,mator,THING):at_t(TURN,THING,ROOM),dented_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ndented_t(TURN+1,THING) :- action_t(TURN,mator,THING).\ndented_t(TURN+1,THING) :- turn(TURN), dented_t(TURN,THING).",
              "type_name": "mator"
            },
            {
              "lark": "unbal: UNBAL thing\nUNBAL.1: \"unbal\" WS",
              "pddl": "(:action UNBAL\n    :parameters (?e - unsust_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (unsust ?e)\n        )\n    :effect (and\n        (exper ?e)\n        (not (unsust ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not unsust-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not unsust.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now exper.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To unbal is to make something unsust_able and unsust be exper.",
              "asp": "{ action_t(TURN,unbal,THING):at_t(TURN,THING,ROOM),unsust_able(THING),unsust_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nexper_t(TURN+1,THING) :- action_t(TURN,unbal,THING).\nunsust_t(TURN+1,THING) :- turn(TURN), unsust_t(TURN,THING), not action_t(TURN,unbal,THING).",
              "type_name": "unbal"
            },
            {
              "lark": "gatic: GATIC thing\nGATIC.1: \"gatic\" WS",
              "pddl": "(:action GATIC\n    :parameters (?e - unsust_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (exper ?e)\n        )\n    :effect (and\n        (unsust ?e)\n        (not (exper ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not unsust-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not exper.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now unsust.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To gatic is to make something unsust_able and exper be unsust.",
              "asp": "{ action_t(TURN,gatic,THING):at_t(TURN,THING,ROOM),unsust_able(THING),exper_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nunsust_t(TURN+1,THING) :- action_t(TURN,gatic,THING).\nexper_t(TURN+1,THING) :- turn(TURN), exper_t(TURN,THING), not action_t(TURN,gatic,THING).",
              "type_name": "gatic"
            },
            {
              "lark": "ratic: RATIC thing\nRATIC.1: \"ratic\" WS",
              "pddl": "(:action RATIC\n    :parameters (?e - mateny_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (mateny ?e)\n        )\n    :effect (and\n        (stord ?e)\n        (not (mateny ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mateny-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not mateny.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now stord.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ratic is to make something mateny_able and mateny be stord.",
              "asp": "{ action_t(TURN,ratic,THING):at_t(TURN,THING,ROOM),mateny_able(THING),mateny_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nstord_t(TURN+1,THING) :- action_t(TURN,ratic,THING).\nmateny_t(TURN+1,THING) :- turn(TURN), mateny_t(TURN,THING), not action_t(TURN,ratic,THING).",
              "type_name": "ratic"
            },
            {
              "lark": "remic: REMIC thing\nREMIC.1: \"remic\" WS",
              "pddl": "(:action REMIC\n    :parameters (?e - mateny_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (stord ?e)\n        )\n    :effect (and\n        (aphoned ?e)\n        (not (stord ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mateny-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not stord.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now aphoned.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To remic is to make something mateny_able and stord be aphoned.",
              "asp": "{ action_t(TURN,remic,THING):at_t(TURN,THING,ROOM),mateny_able(THING),stord_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naphoned_t(TURN+1,THING) :- action_t(TURN,remic,THING).\nstord_t(TURN+1,THING) :- turn(TURN), stord_t(TURN,THING), not action_t(TURN,remic,THING).",
              "type_name": "remic"
            },
            {
              "lark": "proar: PROAR thing\nPROAR.1: \"proar\" WS",
              "pddl": "(:action PROAR\n    :parameters (?e - mateny_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aphoned ?e)\n        )\n    :effect (and\n        (mateny ?e)\n        (not (aphoned ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mateny-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not aphoned.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now mateny.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To proar is to make something mateny_able and aphoned be mateny.",
              "asp": "{ action_t(TURN,proar,THING):at_t(TURN,THING,ROOM),mateny_able(THING),aphoned_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nmateny_t(TURN+1,THING) :- action_t(TURN,proar,THING).\naphoned_t(TURN+1,THING) :- turn(TURN), aphoned_t(TURN,THING), not action_t(TURN,proar,THING).",
              "type_name": "proar"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "unree",
              "exit_targets": [
                "uness",
                "iness"
              ],
              "max_connections": 1,
              "type_name": "unree"
            },
            {
              "repr_str": "iness",
              "exit_targets": [
                "unree"
              ],
              "max_connections": 3,
              "type_name": "iness"
            },
            {
              "repr_str": "uness",
              "exit_targets": [
                "iness",
                "cally"
              ],
              "max_connections": 2,
              "type_name": "uness"
            },
            {
              "repr_str": "cally",
              "exit_targets": [
                "uness",
                "iness",
                "unree"
              ],
              "max_connections": 2,
              "type_name": "cally"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "subst",
              "traits": [
                "dented_able"
              ],
              "standard_locations": [
                "iness",
                "cally"
              ],
              "type_name": "subst"
            },
            {
              "repr_str": "scont",
              "traits": [
                "dented_able"
              ],
              "standard_locations": [
                "unree"
              ],
              "type_name": "scont"
            },
            {
              "repr_str": "diale",
              "traits": [
                "unsust_able",
                "dented_able"
              ],
              "standard_locations": [
                "cally",
                "uness"
              ],
              "type_name": "diale"
            },
            {
              "repr_str": "sness",
              "traits": [
                "unsust_able",
                "mateny_able"
              ],
              "standard_locations": [
                "cally"
              ],
              "type_name": "sness"
            },
            {
              "repr_str": "mical",
              "traits": [
                "unsust_able",
                "dented_able"
              ],
              "standard_locations": [
                "cally",
                "iness"
              ],
              "type_name": "mical"
            },
            {
              "repr_str": "eness",
              "traits": [
                "unsust_able"
              ],
              "standard_locations": [
                "unree",
                "cally"
              ],
              "type_name": "eness"
            },
            {
              "repr_str": "pante",
              "traits": [
                "unsust_able"
              ],
              "standard_locations": [
                "cally"
              ],
              "type_name": "pante"
            },
            {
              "repr_str": "inat",
              "traits": [
                "mateny_able",
                "dented_able"
              ],
              "standard_locations": [
                "cally"
              ],
              "type_name": "inat"
            },
            {
              "repr_str": "enticed",
              "traits": [
                "dented_able",
                "unsust_able"
              ],
              "standard_locations": [
                "iness"
              ],
              "type_name": "enticed"
            },
            {
              "repr_str": "decte",
              "traits": [
                "mateny_able"
              ],
              "standard_locations": [
                "unree",
                "uness"
              ],
              "type_name": "decte"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "unree",
                  "iness",
                  "uness",
                  "cally"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "subst",
                  "scont",
                  "diale",
                  "sness",
                  "mical",
                  "eness",
                  "pante",
                  "inat",
                  "enticed",
                  "decte",
                  "player",
                  "inventory",
                  "floor"
                ],
                "dented_able": [
                  "subst",
                  "scont",
                  "diale",
                  "mical",
                  "inat",
                  "enticed"
                ],
                "unsust_able": [
                  "diale",
                  "sness",
                  "mical",
                  "eness",
                  "pante",
                  "enticed"
                ],
                "mateny_able": [
                  "sness",
                  "inat",
                  "decte"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "dented",
                  "variable": "e",
                  "mutability": "dented_able"
                },
                {
                  "predicate_id": "unsust",
                  "variable": "e",
                  "mutability": "unsust_able"
                },
                {
                  "predicate_id": "exper",
                  "variable": "e",
                  "mutability": "unsust_able"
                },
                {
                  "predicate_id": "mateny",
                  "variable": "e",
                  "mutability": "mateny_able"
                },
                {
                  "predicate_id": "stord",
                  "variable": "e",
                  "mutability": "mateny_able"
                },
                {
                  "predicate_id": "aphoned",
                  "variable": "e",
                  "mutability": "mateny_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can delly, heted, ousne, unalin, thoty and ceous.\n\nYour goal for this game is: Make the secti unpish, the rably nolog and the imped atory.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(nogia1,uner1)",
            "at(trionee1,natin1)",
            "at(rably1,perced1)",
            "at(stism1,perced1)",
            "at(torish1,perced1)",
            "at(inet1,perced1)",
            "at(nond1,perced1)",
            "at(imped1,trion1)",
            "at(trateler1,uner1)",
            "at(secti1,perced1)",
            "at(player1,perced1)",
            "type(player1,player)",
            "type(secti1,secti)",
            "type(trateler1,trateler)",
            "type(imped1,imped)",
            "type(nond1,nond)",
            "type(inet1,inet)",
            "type(torish1,torish)",
            "type(stism1,stism)",
            "type(rably1,rably)",
            "type(trionee1,trionee)",
            "type(nogia1,nogia)",
            "room(uner1,uner)",
            "room(natin1,natin)",
            "room(trion1,trion)",
            "room(perced1,perced)",
            "atory(trionee1)",
            "atory(stism1)",
            "atory(torish1)",
            "atory(inet1)",
            "aling(nond1)",
            "aling(imped1)",
            "nolog(nogia1)",
            "vater(nond1)",
            "atione(rably1)",
            "exit(uner1,natin1)",
            "exit(natin1,uner1)",
            "exit(trion1,natin1)",
            "exit(perced1,uner1)",
            "exit(uner1,perced1)",
            "exit(natin1,trion1)",
            "unpish_able(secti1)",
            "unpish_able(trateler1)",
            "unpish_able(imped1)",
            "unpish_able(inet1)",
            "unpish_able(rably1)",
            "unpish_able(trionee1)",
            "atory_able(imped1)",
            "atory_able(nond1)",
            "atory_able(inet1)",
            "atory_able(torish1)",
            "atory_able(stism1)",
            "atory_able(trionee1)",
            "nolog_able(nond1)",
            "nolog_able(rably1)",
            "nolog_able(nogia1)"
          ],
          "goal_state": [
            "unpish(secti1)",
            "atory(imped1)",
            "nolog(rably1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "ousne",
              "secti1"
            ],
            [
              "ceous",
              "rably1"
            ],
            [
              "go",
              "uner1"
            ],
            [
              "go",
              "natin1"
            ],
            [
              "go",
              "trion1"
            ],
            [
              "delly",
              "imped1"
            ]
          ],
          "optimal_commands": [
            "ousne secti",
            "ceous rably",
            "go uner",
            "go natin",
            "go trion",
            "delly imped"
          ],
          "action_definitions": [
            {
              "lark": "ousne: OUSNE thing\nOUSNE.1: \"ousne\" WS",
              "pddl": "(:action OUSNE\n    :parameters (?e - unpish_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (unpish ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not unpish-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now unpish.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ousne is to make something unpish_able unpish.",
              "asp": "{ action_t(TURN,ousne,THING):at_t(TURN,THING,ROOM),unpish_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nunpish_t(TURN+1,THING) :- action_t(TURN,ousne,THING).\nunpish_t(TURN+1,THING) :- turn(TURN), unpish_t(TURN,THING).",
              "type_name": "ousne"
            },
            {
              "lark": "heted: HETED thing\nHETED.1: \"heted\" WS",
              "pddl": "(:action HETED\n    :parameters (?e - atory_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (atory ?e)\n        )\n    :effect (and\n        (aling ?e)\n        (not (atory ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not atory-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not atory.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now aling.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To heted is to make something atory_able and atory be aling.",
              "asp": "{ action_t(TURN,heted,THING):at_t(TURN,THING,ROOM),atory_able(THING),atory_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naling_t(TURN+1,THING) :- action_t(TURN,heted,THING).\natory_t(TURN+1,THING) :- turn(TURN), atory_t(TURN,THING), not action_t(TURN,heted,THING).",
              "type_name": "heted"
            },
            {
              "lark": "delly: DELLY thing\nDELLY.1: \"delly\" WS",
              "pddl": "(:action DELLY\n    :parameters (?e - atory_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aling ?e)\n        )\n    :effect (and\n        (atory ?e)\n        (not (aling ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not atory-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not aling.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now atory.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To delly is to make something atory_able and aling be atory.",
              "asp": "{ action_t(TURN,delly,THING):at_t(TURN,THING,ROOM),atory_able(THING),aling_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\natory_t(TURN+1,THING) :- action_t(TURN,delly,THING).\naling_t(TURN+1,THING) :- turn(TURN), aling_t(TURN,THING), not action_t(TURN,delly,THING).",
              "type_name": "delly"
            },
            {
              "lark": "unalin: UNALIN thing\nUNALIN.1: \"unalin\" WS",
              "pddl": "(:action UNALIN\n    :parameters (?e - nolog_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (nolog ?e)\n        )\n    :effect (and\n        (vater ?e)\n        (not (nolog ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nolog-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not nolog.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now vater.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To unalin is to make something nolog_able and nolog be vater.",
              "asp": "{ action_t(TURN,unalin,THING):at_t(TURN,THING,ROOM),nolog_able(THING),nolog_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nvater_t(TURN+1,THING) :- action_t(TURN,unalin,THING).\nnolog_t(TURN+1,THING) :- turn(TURN), nolog_t(TURN,THING), not action_t(TURN,unalin,THING).",
              "type_name": "unalin"
            },
            {
              "lark": "thoty: THOTY thing\nTHOTY.1: \"thoty\" WS",
              "pddl": "(:action THOTY\n    :parameters (?e - nolog_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (vater ?e)\n        )\n    :effect (and\n        (atione ?e)\n        (not (vater ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nolog-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not vater.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now atione.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To thoty is to make something nolog_able and vater be atione.",
              "asp": "{ action_t(TURN,thoty,THING):at_t(TURN,THING,ROOM),nolog_able(THING),vater_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\natione_t(TURN+1,THING) :- action_t(TURN,thoty,THING).\nvater_t(TURN+1,THING) :- turn(TURN), vater_t(TURN,THING), not action_t(TURN,thoty,THING).",
              "type_name": "thoty"
            },
            {
              "lark": "ceous: CEOUS thing\nCEOUS.1: \"ceous\" WS",
              "pddl": "(:action CEOUS\n    :parameters (?e - nolog_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (atione ?e)\n        )\n    :effect (and\n        (nolog ?e)\n        (not (atione ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nolog-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not atione.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now nolog.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ceous is to make something nolog_able and atione be nolog.",
              "asp": "{ action_t(TURN,ceous,THING):at_t(TURN,THING,ROOM),nolog_able(THING),atione_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nnolog_t(TURN+1,THING) :- action_t(TURN,ceous,THING).\natione_t(TURN+1,THING) :- turn(TURN), atione_t(TURN,THING), not action_t(TURN,ceous,THING).",
              "type_name": "ceous"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "uner",
              "exit_targets": [
                "trion",
                "natin"
              ],
              "max_connections": 1,
              "type_name": "uner"
            },
            {
              "repr_str": "natin",
              "exit_targets": [
                "uner"
              ],
              "max_connections": 3,
              "type_name": "natin"
            },
            {
              "repr_str": "trion",
              "exit_targets": [
                "natin",
                "perced"
              ],
              "max_connections": 2,
              "type_name": "trion"
            },
            {
              "repr_str": "perced",
              "exit_targets": [
                "trion",
                "natin",
                "uner"
              ],
              "max_connections": 2,
              "type_name": "perced"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "secti",
              "traits": [
                "unpish_able"
              ],
              "standard_locations": [
                "natin",
                "perced"
              ],
              "type_name": "secti"
            },
            {
              "repr_str": "trateler",
              "traits": [
                "unpish_able"
              ],
              "standard_locations": [
                "uner"
              ],
              "type_name": "trateler"
            },
            {
              "repr_str": "imped",
              "traits": [
                "atory_able",
                "unpish_able"
              ],
              "standard_locations": [
                "perced",
                "trion"
              ],
              "type_name": "imped"
            },
            {
              "repr_str": "nond",
              "traits": [
                "atory_able",
                "nolog_able"
              ],
              "standard_locations": [
                "perced"
              ],
              "type_name": "nond"
            },
            {
              "repr_str": "inet",
              "traits": [
                "atory_able",
                "unpish_able"
              ],
              "standard_locations": [
                "perced",
                "natin"
              ],
              "type_name": "inet"
            },
            {
              "repr_str": "torish",
              "traits": [
                "atory_able"
              ],
              "standard_locations": [
                "uner",
                "perced"
              ],
              "type_name": "torish"
            },
            {
              "repr_str": "stism",
              "traits": [
                "atory_able"
              ],
              "standard_locations": [
                "perced"
              ],
              "type_name": "stism"
            },
            {
              "repr_str": "rably",
              "traits": [
                "nolog_able",
                "unpish_able"
              ],
              "standard_locations": [
                "perced"
              ],
              "type_name": "rably"
            },
            {
              "repr_str": "trionee",
              "traits": [
                "unpish_able",
                "atory_able"
              ],
              "standard_locations": [
                "natin"
              ],
              "type_name": "trionee"
            },
            {
              "repr_str": "nogia",
              "traits": [
                "nolog_able"
              ],
              "standard_locations": [
                "uner",
                "trion"
              ],
              "type_name": "nogia"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "uner",
                  "natin",
                  "trion",
                  "perced"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "secti",
                  "trateler",
                  "imped",
                  "nond",
                  "inet",
                  "torish",
                  "stism",
                  "rably",
                  "trionee",
                  "nogia",
                  "player",
                  "inventory",
                  "floor"
                ],
                "unpish_able": [
                  "secti",
                  "trateler",
                  "imped",
                  "inet",
                  "rably",
                  "trionee"
                ],
                "atory_able": [
                  "imped",
                  "nond",
                  "inet",
                  "torish",
                  "stism",
                  "trionee"
                ],
                "nolog_able": [
                  "nond",
                  "rably",
                  "nogia"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "unpish",
                  "variable": "e",
                  "mutability": "unpish_able"
                },
                {
                  "predicate_id": "atory",
                  "variable": "e",
                  "mutability": "atory_able"
                },
                {
                  "predicate_id": "aling",
                  "variable": "e",
                  "mutability": "atory_able"
                },
                {
                  "predicate_id": "nolog",
                  "variable": "e",
                  "mutability": "nolog_able"
                },
                {
                  "predicate_id": "vater",
                  "variable": "e",
                  "mutability": "nolog_able"
                },
                {
                  "predicate_id": "atione",
                  "variable": "e",
                  "mutability": "nolog_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can latory, tedne, derman, tuate, chross and sulphy.\n\nYour goal for this game is: Make the tulacy enerk, the menny soriced and the ortid alism.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(reele1,penol1)",
            "at(inging1,micon1)",
            "at(menny1,catint1)",
            "at(rist1,catint1)",
            "at(sioust1,catint1)",
            "at(pacia1,catint1)",
            "at(unflued1,catint1)",
            "at(tulacy1,fress1)",
            "at(uncest1,penol1)",
            "at(ortid1,catint1)",
            "at(player1,catint1)",
            "type(player1,player)",
            "type(ortid1,ortid)",
            "type(uncest1,uncest)",
            "type(tulacy1,tulacy)",
            "type(unflued1,unflued)",
            "type(pacia1,pacia)",
            "type(sioust1,sioust)",
            "type(rist1,rist)",
            "type(menny1,menny)",
            "type(inging1,inging)",
            "type(reele1,reele)",
            "room(penol1,penol)",
            "room(micon1,micon)",
            "room(fress1,fress)",
            "room(catint1,catint)",
            "enerk(inging1)",
            "enerk(rist1)",
            "enerk(sioust1)",
            "enerk(pacia1)",
            "prustic(unflued1)",
            "prustic(tulacy1)",
            "soriced(reele1)",
            "logal(unflued1)",
            "ramiced(menny1)",
            "exit(penol1,micon1)",
            "exit(micon1,penol1)",
            "exit(fress1,micon1)",
            "exit(catint1,penol1)",
            "exit(penol1,catint1)",
            "exit(micon1,fress1)",
            "alism_able(ortid1)",
            "alism_able(uncest1)",
            "alism_able(tulacy1)",
            "alism_able(pacia1)",
            "alism_able(menny1)",
            "alism_able(inging1)",
            "enerk_able(tulacy1)",
            "enerk_able(unflued1)",
            "enerk_able(pacia1)",
            "enerk_able(sioust1)",
            "enerk_able(rist1)",
            "enerk_able(inging1)",
            "soriced_able(unflued1)",
            "soriced_able(menny1)",
            "soriced_able(reele1)"
          ],
          "goal_state": [
            "alism(ortid1)",
            "enerk(tulacy1)",
            "soriced(menny1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "sulphy",
              "ortid1"
            ],
            [
              "latory",
              "menny1"
            ],
            [
              "go",
              "penol1"
            ],
            [
              "go",
              "micon1"
            ],
            [
              "go",
              "fress1"
            ],
            [
              "tedne",
              "tulacy1"
            ]
          ],
          "optimal_commands": [
            "sulphy ortid",
            "latory menny",
            "go penol",
            "go micon",
            "go fress",
            "tedne tulacy"
          ],
          "action_definitions": [
            {
              "lark": "sulphy: SULPHY thing\nSULPHY.1: \"sulphy\" WS",
              "pddl": "(:action SULPHY\n    :parameters (?e - alism_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (alism ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not alism-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now alism.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To sulphy is to make something alism_able alism.",
              "asp": "{ action_t(TURN,sulphy,THING):at_t(TURN,THING,ROOM),alism_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nalism_t(TURN+1,THING) :- action_t(TURN,sulphy,THING).\nalism_t(TURN+1,THING) :- turn(TURN), alism_t(TURN,THING).",
              "type_name": "sulphy"
            },
            {
              "lark": "derman: DERMAN thing\nDERMAN.1: \"derman\" WS",
              "pddl": "(:action DERMAN\n    :parameters (?e - enerk_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (enerk ?e)\n        )\n    :effect (and\n        (prustic ?e)\n        (not (enerk ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not enerk-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not enerk.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now prustic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To derman is to make something enerk_able and enerk be prustic.",
              "asp": "{ action_t(TURN,derman,THING):at_t(TURN,THING,ROOM),enerk_able(THING),enerk_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nprustic_t(TURN+1,THING) :- action_t(TURN,derman,THING).\nenerk_t(TURN+1,THING) :- turn(TURN), enerk_t(TURN,THING), not action_t(TURN,derman,THING).",
              "type_name": "derman"
            },
            {
              "lark": "tedne: TEDNE thing\nTEDNE.1: \"tedne\" WS",
              "pddl": "(:action TEDNE\n    :parameters (?e - enerk_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (prustic ?e)\n        )\n    :effect (and\n        (enerk ?e)\n        (not (prustic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not enerk-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not prustic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now enerk.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tedne is to make something enerk_able and prustic be enerk.",
              "asp": "{ action_t(TURN,tedne,THING):at_t(TURN,THING,ROOM),enerk_able(THING),prustic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nenerk_t(TURN+1,THING) :- action_t(TURN,tedne,THING).\nprustic_t(TURN+1,THING) :- turn(TURN), prustic_t(TURN,THING), not action_t(TURN,tedne,THING).",
              "type_name": "tedne"
            },
            {
              "lark": "tuate: TUATE thing\nTUATE.1: \"tuate\" WS",
              "pddl": "(:action TUATE\n    :parameters (?e - soriced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (soriced ?e)\n        )\n    :effect (and\n        (logal ?e)\n        (not (soriced ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not soriced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not soriced.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now logal.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tuate is to make something soriced_able and soriced be logal.",
              "asp": "{ action_t(TURN,tuate,THING):at_t(TURN,THING,ROOM),soriced_able(THING),soriced_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nlogal_t(TURN+1,THING) :- action_t(TURN,tuate,THING).\nsoriced_t(TURN+1,THING) :- turn(TURN), soriced_t(TURN,THING), not action_t(TURN,tuate,THING).",
              "type_name": "tuate"
            },
            {
              "lark": "chross: CHROSS thing\nCHROSS.1: \"chross\" WS",
              "pddl": "(:action CHROSS\n    :parameters (?e - soriced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (logal ?e)\n        )\n    :effect (and\n        (ramiced ?e)\n        (not (logal ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not soriced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not logal.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ramiced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To chross is to make something soriced_able and logal be ramiced.",
              "asp": "{ action_t(TURN,chross,THING):at_t(TURN,THING,ROOM),soriced_able(THING),logal_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nramiced_t(TURN+1,THING) :- action_t(TURN,chross,THING).\nlogal_t(TURN+1,THING) :- turn(TURN), logal_t(TURN,THING), not action_t(TURN,chross,THING).",
              "type_name": "chross"
            },
            {
              "lark": "latory: LATORY thing\nLATORY.1: \"latory\" WS",
              "pddl": "(:action LATORY\n    :parameters (?e - soriced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ramiced ?e)\n        )\n    :effect (and\n        (soriced ?e)\n        (not (ramiced ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not soriced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ramiced.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now soriced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To latory is to make something soriced_able and ramiced be soriced.",
              "asp": "{ action_t(TURN,latory,THING):at_t(TURN,THING,ROOM),soriced_able(THING),ramiced_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nsoriced_t(TURN+1,THING) :- action_t(TURN,latory,THING).\nramiced_t(TURN+1,THING) :- turn(TURN), ramiced_t(TURN,THING), not action_t(TURN,latory,THING).",
              "type_name": "latory"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "penol",
              "exit_targets": [
                "fress",
                "micon"
              ],
              "max_connections": 1,
              "type_name": "penol"
            },
            {
              "repr_str": "micon",
              "exit_targets": [
                "penol"
              ],
              "max_connections": 3,
              "type_name": "micon"
            },
            {
              "repr_str": "fress",
              "exit_targets": [
                "micon",
                "catint"
              ],
              "max_connections": 2,
              "type_name": "fress"
            },
            {
              "repr_str": "catint",
              "exit_targets": [
                "fress",
                "micon",
                "penol"
              ],
              "max_connections": 2,
              "type_name": "catint"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "ortid",
              "traits": [
                "alism_able"
              ],
              "standard_locations": [
                "micon",
                "catint"
              ],
              "type_name": "ortid"
            },
            {
              "repr_str": "uncest",
              "traits": [
                "alism_able"
              ],
              "standard_locations": [
                "penol"
              ],
              "type_name": "uncest"
            },
            {
              "repr_str": "tulacy",
              "traits": [
                "enerk_able",
                "alism_able"
              ],
              "standard_locations": [
                "catint",
                "fress"
              ],
              "type_name": "tulacy"
            },
            {
              "repr_str": "unflued",
              "traits": [
                "enerk_able",
                "soriced_able"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "unflued"
            },
            {
              "repr_str": "pacia",
              "traits": [
                "enerk_able",
                "alism_able"
              ],
              "standard_locations": [
                "catint",
                "micon"
              ],
              "type_name": "pacia"
            },
            {
              "repr_str": "sioust",
              "traits": [
                "enerk_able"
              ],
              "standard_locations": [
                "penol",
                "catint"
              ],
              "type_name": "sioust"
            },
            {
              "repr_str": "rist",
              "traits": [
                "enerk_able"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "rist"
            },
            {
              "repr_str": "menny",
              "traits": [
                "soriced_able",
                "alism_able"
              ],
              "standard_locations": [
                "catint"
              ],
              "type_name": "menny"
            },
            {
              "repr_str": "inging",
              "traits": [
                "alism_able",
                "enerk_able"
              ],
              "standard_locations": [
                "micon"
              ],
              "type_name": "inging"
            },
            {
              "repr_str": "reele",
              "traits": [
                "soriced_able"
              ],
              "standard_locations": [
                "penol",
                "fress"
              ],
              "type_name": "reele"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "penol",
                  "micon",
                  "fress",
                  "catint"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "ortid",
                  "uncest",
                  "tulacy",
                  "unflued",
                  "pacia",
                  "sioust",
                  "rist",
                  "menny",
                  "inging",
                  "reele",
                  "player",
                  "inventory",
                  "floor"
                ],
                "alism_able": [
                  "ortid",
                  "uncest",
                  "tulacy",
                  "pacia",
                  "menny",
                  "inging"
                ],
                "enerk_able": [
                  "tulacy",
                  "unflued",
                  "pacia",
                  "sioust",
                  "rist",
                  "inging"
                ],
                "soriced_able": [
                  "unflued",
                  "menny",
                  "reele"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "alism",
                  "variable": "e",
                  "mutability": "alism_able"
                },
                {
                  "predicate_id": "enerk",
                  "variable": "e",
                  "mutability": "enerk_able"
                },
                {
                  "predicate_id": "prustic",
                  "variable": "e",
                  "mutability": "enerk_able"
                },
                {
                  "predicate_id": "soriced",
                  "variable": "e",
                  "mutability": "soriced_able"
                },
                {
                  "predicate_id": "logal",
                  "variable": "e",
                  "mutability": "soriced_able"
                },
                {
                  "predicate_id": "ramiced",
                  "variable": "e",
                  "mutability": "soriced_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can seash, andect, lotis, belity, irear and deint.\n\nYour goal for this game is: Make the prolly lingly, the proark incry and the acion arliced.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(dermin1,comper1)",
            "at(intler1,comess1)",
            "at(prolly1,distral1)",
            "at(rabish1,distral1)",
            "at(hypner1,distral1)",
            "at(shness1,distral1)",
            "at(arger1,distral1)",
            "at(acion1,atent1)",
            "at(evism1,comper1)",
            "at(proark1,distral1)",
            "at(player1,distral1)",
            "type(player1,player)",
            "type(proark1,proark)",
            "type(evism1,evism)",
            "type(acion1,acion)",
            "type(arger1,arger)",
            "type(shness1,shness)",
            "type(hypner1,hypner)",
            "type(rabish1,rabish)",
            "type(prolly1,prolly)",
            "type(intler1,intler)",
            "type(dermin1,dermin)",
            "room(comper1,comper)",
            "room(comess1,comess)",
            "room(atent1,atent)",
            "room(distral1,distral)",
            "arliced(intler1)",
            "arliced(rabish1)",
            "arliced(hypner1)",
            "arliced(shness1)",
            "roply(arger1)",
            "roply(acion1)",
            "lingly(dermin1)",
            "riat(arger1)",
            "psessy(prolly1)",
            "exit(comper1,comess1)",
            "exit(comess1,comper1)",
            "exit(atent1,comess1)",
            "exit(distral1,comper1)",
            "exit(comper1,distral1)",
            "exit(comess1,atent1)",
            "incry_able(proark1)",
            "incry_able(evism1)",
            "incry_able(acion1)",
            "incry_able(shness1)",
            "incry_able(prolly1)",
            "incry_able(intler1)",
            "arliced_able(acion1)",
            "arliced_able(arger1)",
            "arliced_able(shness1)",
            "arliced_able(hypner1)",
            "arliced_able(rabish1)",
            "arliced_able(intler1)",
            "lingly_able(arger1)",
            "lingly_able(prolly1)",
            "lingly_able(dermin1)"
          ],
          "goal_state": [
            "incry(proark1)",
            "arliced(acion1)",
            "lingly(prolly1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "deint",
              "proark1"
            ],
            [
              "lotis",
              "prolly1"
            ],
            [
              "go",
              "comper1"
            ],
            [
              "go",
              "comess1"
            ],
            [
              "go",
              "atent1"
            ],
            [
              "irear",
              "acion1"
            ]
          ],
          "optimal_commands": [
            "deint proark",
            "lotis prolly",
            "go comper",
            "go comess",
            "go atent",
            "irear acion"
          ],
          "action_definitions": [
            {
              "lark": "deint: DEINT thing\nDEINT.1: \"deint\" WS",
              "pddl": "(:action DEINT\n    :parameters (?e - incry_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (incry ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not incry-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now incry.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To deint is to make something incry_able incry.",
              "asp": "{ action_t(TURN,deint,THING):at_t(TURN,THING,ROOM),incry_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nincry_t(TURN+1,THING) :- action_t(TURN,deint,THING).\nincry_t(TURN+1,THING) :- turn(TURN), incry_t(TURN,THING).",
              "type_name": "deint"
            },
            {
              "lark": "seash: SEASH thing\nSEASH.1: \"seash\" WS",
              "pddl": "(:action SEASH\n    :parameters (?e - arliced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (arliced ?e)\n        )\n    :effect (and\n        (roply ?e)\n        (not (arliced ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not arliced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not arliced.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now roply.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To seash is to make something arliced_able and arliced be roply.",
              "asp": "{ action_t(TURN,seash,THING):at_t(TURN,THING,ROOM),arliced_able(THING),arliced_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nroply_t(TURN+1,THING) :- action_t(TURN,seash,THING).\narliced_t(TURN+1,THING) :- turn(TURN), arliced_t(TURN,THING), not action_t(TURN,seash,THING).",
              "type_name": "seash"
            },
            {
              "lark": "irear: IREAR thing\nIREAR.1: \"irear\" WS",
              "pddl": "(:action IREAR\n    :parameters (?e - arliced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (roply ?e)\n        )\n    :effect (and\n        (arliced ?e)\n        (not (roply ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not arliced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not roply.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now arliced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To irear is to make something arliced_able and roply be arliced.",
              "asp": "{ action_t(TURN,irear,THING):at_t(TURN,THING,ROOM),arliced_able(THING),roply_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\narliced_t(TURN+1,THING) :- action_t(TURN,irear,THING).\nroply_t(TURN+1,THING) :- turn(TURN), roply_t(TURN,THING), not action_t(TURN,irear,THING).",
              "type_name": "irear"
            },
            {
              "lark": "belity: BELITY thing\nBELITY.1: \"belity\" WS",
              "pddl": "(:action BELITY\n    :parameters (?e - lingly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (lingly ?e)\n        )\n    :effect (and\n        (riat ?e)\n        (not (lingly ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lingly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not lingly.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now riat.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To belity is to make something lingly_able and lingly be riat.",
              "asp": "{ action_t(TURN,belity,THING):at_t(TURN,THING,ROOM),lingly_able(THING),lingly_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nriat_t(TURN+1,THING) :- action_t(TURN,belity,THING).\nlingly_t(TURN+1,THING) :- turn(TURN), lingly_t(TURN,THING), not action_t(TURN,belity,THING).",
              "type_name": "belity"
            },
            {
              "lark": "andect: ANDECT thing\nANDECT.1: \"andect\" WS",
              "pddl": "(:action ANDECT\n    :parameters (?e - lingly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (riat ?e)\n        )\n    :effect (and\n        (psessy ?e)\n        (not (riat ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lingly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not riat.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now psessy.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To andect is to make something lingly_able and riat be psessy.",
              "asp": "{ action_t(TURN,andect,THING):at_t(TURN,THING,ROOM),lingly_able(THING),riat_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\npsessy_t(TURN+1,THING) :- action_t(TURN,andect,THING).\nriat_t(TURN+1,THING) :- turn(TURN), riat_t(TURN,THING), not action_t(TURN,andect,THING).",
              "type_name": "andect"
            },
            {
              "lark": "lotis: LOTIS thing\nLOTIS.1: \"lotis\" WS",
              "pddl": "(:action LOTIS\n    :parameters (?e - lingly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (psessy ?e)\n        )\n    :effect (and\n        (lingly ?e)\n        (not (psessy ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lingly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not psessy.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now lingly.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lotis is to make something lingly_able and psessy be lingly.",
              "asp": "{ action_t(TURN,lotis,THING):at_t(TURN,THING,ROOM),lingly_able(THING),psessy_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nlingly_t(TURN+1,THING) :- action_t(TURN,lotis,THING).\npsessy_t(TURN+1,THING) :- turn(TURN), psessy_t(TURN,THING), not action_t(TURN,lotis,THING).",
              "type_name": "lotis"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "comper",
              "exit_targets": [
                "atent",
                "comess"
              ],
              "max_connections": 1,
              "type_name": "comper"
            },
            {
              "repr_str": "comess",
              "exit_targets": [
                "comper"
              ],
              "max_connections": 3,
              "type_name": "comess"
            },
            {
              "repr_str": "atent",
              "exit_targets": [
                "comess",
                "distral"
              ],
              "max_connections": 2,
              "type_name": "atent"
            },
            {
              "repr_str": "distral",
              "exit_targets": [
                "atent",
                "comess",
                "comper"
              ],
              "max_connections": 2,
              "type_name": "distral"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "proark",
              "traits": [
                "incry_able"
              ],
              "standard_locations": [
                "comess",
                "distral"
              ],
              "type_name": "proark"
            },
            {
              "repr_str": "evism",
              "traits": [
                "incry_able"
              ],
              "standard_locations": [
                "comper"
              ],
              "type_name": "evism"
            },
            {
              "repr_str": "acion",
              "traits": [
                "arliced_able",
                "incry_able"
              ],
              "standard_locations": [
                "distral",
                "atent"
              ],
              "type_name": "acion"
            },
            {
              "repr_str": "arger",
              "traits": [
                "arliced_able",
                "lingly_able"
              ],
              "standard_locations": [
                "distral"
              ],
              "type_name": "arger"
            },
            {
              "repr_str": "shness",
              "traits": [
                "arliced_able",
                "incry_able"
              ],
              "standard_locations": [
                "distral",
                "comess"
              ],
              "type_name": "shness"
            },
            {
              "repr_str": "hypner",
              "traits": [
                "arliced_able"
              ],
              "standard_locations": [
                "comper",
                "distral"
              ],
              "type_name": "hypner"
            },
            {
              "repr_str": "rabish",
              "traits": [
                "arliced_able"
              ],
              "standard_locations": [
                "distral"
              ],
              "type_name": "rabish"
            },
            {
              "repr_str": "prolly",
              "traits": [
                "lingly_able",
                "incry_able"
              ],
              "standard_locations": [
                "distral"
              ],
              "type_name": "prolly"
            },
            {
              "repr_str": "intler",
              "traits": [
                "incry_able",
                "arliced_able"
              ],
              "standard_locations": [
                "comess"
              ],
              "type_name": "intler"
            },
            {
              "repr_str": "dermin",
              "traits": [
                "lingly_able"
              ],
              "standard_locations": [
                "comper",
                "atent"
              ],
              "type_name": "dermin"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "comper",
                  "comess",
                  "atent",
                  "distral"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "proark",
                  "evism",
                  "acion",
                  "arger",
                  "shness",
                  "hypner",
                  "rabish",
                  "prolly",
                  "intler",
                  "dermin",
                  "player",
                  "inventory",
                  "floor"
                ],
                "incry_able": [
                  "proark",
                  "evism",
                  "acion",
                  "shness",
                  "prolly",
                  "intler"
                ],
                "arliced_able": [
                  "acion",
                  "arger",
                  "shness",
                  "hypner",
                  "rabish",
                  "intler"
                ],
                "lingly_able": [
                  "arger",
                  "prolly",
                  "dermin"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "incry",
                  "variable": "e",
                  "mutability": "incry_able"
                },
                {
                  "predicate_id": "arliced",
                  "variable": "e",
                  "mutability": "arliced_able"
                },
                {
                  "predicate_id": "roply",
                  "variable": "e",
                  "mutability": "arliced_able"
                },
                {
                  "predicate_id": "lingly",
                  "variable": "e",
                  "mutability": "lingly_able"
                },
                {
                  "predicate_id": "riat",
                  "variable": "e",
                  "mutability": "lingly_able"
                },
                {
                  "predicate_id": "psessy",
                  "variable": "e",
                  "mutability": "lingly_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can iscad, eriat, ovesis, mingne, setral and lepht.\n\nYour goal for this game is: Make the strood aphistic, the aciong dolam and the swaiced ailly.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(ostion1,stful1)",
            "at(pyelly1,emoust1)",
            "at(strood1,encal1)",
            "at(eucty1,encal1)",
            "at(inchan1,encal1)",
            "at(oming1,encal1)",
            "at(perent1,encal1)",
            "at(swaiced1,etiont1)",
            "at(oroust1,stful1)",
            "at(aciong1,encal1)",
            "at(player1,encal1)",
            "type(player1,player)",
            "type(aciong1,aciong)",
            "type(oroust1,oroust)",
            "type(swaiced1,swaiced)",
            "type(perent1,perent)",
            "type(oming1,oming)",
            "type(inchan1,inchan)",
            "type(eucty1,eucty)",
            "type(strood1,strood)",
            "type(pyelly1,pyelly)",
            "type(ostion1,ostion)",
            "room(stful1,stful)",
            "room(emoust1,emoust)",
            "room(etiont1,etiont)",
            "room(encal1,encal)",
            "ailly(pyelly1)",
            "ailly(eucty1)",
            "ailly(inchan1)",
            "ailly(oming1)",
            "retart(perent1)",
            "retart(swaiced1)",
            "aphistic(ostion1)",
            "olict(perent1)",
            "eriated(strood1)",
            "exit(stful1,emoust1)",
            "exit(emoust1,stful1)",
            "exit(etiont1,emoust1)",
            "exit(encal1,stful1)",
            "exit(stful1,encal1)",
            "exit(emoust1,etiont1)",
            "dolam_able(aciong1)",
            "dolam_able(oroust1)",
            "dolam_able(swaiced1)",
            "dolam_able(oming1)",
            "dolam_able(strood1)",
            "dolam_able(pyelly1)",
            "ailly_able(swaiced1)",
            "ailly_able(perent1)",
            "ailly_able(oming1)",
            "ailly_able(inchan1)",
            "ailly_able(eucty1)",
            "ailly_able(pyelly1)",
            "aphistic_able(perent1)",
            "aphistic_able(strood1)",
            "aphistic_able(ostion1)"
          ],
          "goal_state": [
            "dolam(aciong1)",
            "ailly(swaiced1)",
            "aphistic(strood1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "eriat",
              "aciong1"
            ],
            [
              "setral",
              "strood1"
            ],
            [
              "go",
              "stful1"
            ],
            [
              "go",
              "emoust1"
            ],
            [
              "go",
              "etiont1"
            ],
            [
              "mingne",
              "swaiced1"
            ]
          ],
          "optimal_commands": [
            "eriat aciong",
            "setral strood",
            "go stful",
            "go emoust",
            "go etiont",
            "mingne swaiced"
          ],
          "action_definitions": [
            {
              "lark": "eriat: ERIAT thing\nERIAT.1: \"eriat\" WS",
              "pddl": "(:action ERIAT\n    :parameters (?e - dolam_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (dolam ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not dolam-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now dolam.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To eriat is to make something dolam_able dolam.",
              "asp": "{ action_t(TURN,eriat,THING):at_t(TURN,THING,ROOM),dolam_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ndolam_t(TURN+1,THING) :- action_t(TURN,eriat,THING).\ndolam_t(TURN+1,THING) :- turn(TURN), dolam_t(TURN,THING).",
              "type_name": "eriat"
            },
            {
              "lark": "ovesis: OVESIS thing\nOVESIS.1: \"ovesis\" WS",
              "pddl": "(:action OVESIS\n    :parameters (?e - ailly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ailly ?e)\n        )\n    :effect (and\n        (retart ?e)\n        (not (ailly ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ailly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ailly.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now retart.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ovesis is to make something ailly_able and ailly be retart.",
              "asp": "{ action_t(TURN,ovesis,THING):at_t(TURN,THING,ROOM),ailly_able(THING),ailly_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nretart_t(TURN+1,THING) :- action_t(TURN,ovesis,THING).\nailly_t(TURN+1,THING) :- turn(TURN), ailly_t(TURN,THING), not action_t(TURN,ovesis,THING).",
              "type_name": "ovesis"
            },
            {
              "lark": "mingne: MINGNE thing\nMINGNE.1: \"mingne\" WS",
              "pddl": "(:action MINGNE\n    :parameters (?e - ailly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (retart ?e)\n        )\n    :effect (and\n        (ailly ?e)\n        (not (retart ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ailly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not retart.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ailly.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To mingne is to make something ailly_able and retart be ailly.",
              "asp": "{ action_t(TURN,mingne,THING):at_t(TURN,THING,ROOM),ailly_able(THING),retart_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nailly_t(TURN+1,THING) :- action_t(TURN,mingne,THING).\nretart_t(TURN+1,THING) :- turn(TURN), retart_t(TURN,THING), not action_t(TURN,mingne,THING).",
              "type_name": "mingne"
            },
            {
              "lark": "lepht: LEPHT thing\nLEPHT.1: \"lepht\" WS",
              "pddl": "(:action LEPHT\n    :parameters (?e - aphistic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aphistic ?e)\n        )\n    :effect (and\n        (olict ?e)\n        (not (aphistic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aphistic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not aphistic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now olict.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lepht is to make something aphistic_able and aphistic be olict.",
              "asp": "{ action_t(TURN,lepht,THING):at_t(TURN,THING,ROOM),aphistic_able(THING),aphistic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nolict_t(TURN+1,THING) :- action_t(TURN,lepht,THING).\naphistic_t(TURN+1,THING) :- turn(TURN), aphistic_t(TURN,THING), not action_t(TURN,lepht,THING).",
              "type_name": "lepht"
            },
            {
              "lark": "iscad: ISCAD thing\nISCAD.1: \"iscad\" WS",
              "pddl": "(:action ISCAD\n    :parameters (?e - aphistic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (olict ?e)\n        )\n    :effect (and\n        (eriated ?e)\n        (not (olict ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aphistic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not olict.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now eriated.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To iscad is to make something aphistic_able and olict be eriated.",
              "asp": "{ action_t(TURN,iscad,THING):at_t(TURN,THING,ROOM),aphistic_able(THING),olict_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\neriated_t(TURN+1,THING) :- action_t(TURN,iscad,THING).\nolict_t(TURN+1,THING) :- turn(TURN), olict_t(TURN,THING), not action_t(TURN,iscad,THING).",
              "type_name": "iscad"
            },
            {
              "lark": "setral: SETRAL thing\nSETRAL.1: \"setral\" WS",
              "pddl": "(:action SETRAL\n    :parameters (?e - aphistic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (eriated ?e)\n        )\n    :effect (and\n        (aphistic ?e)\n        (not (eriated ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aphistic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not eriated.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now aphistic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To setral is to make something aphistic_able and eriated be aphistic.",
              "asp": "{ action_t(TURN,setral,THING):at_t(TURN,THING,ROOM),aphistic_able(THING),eriated_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naphistic_t(TURN+1,THING) :- action_t(TURN,setral,THING).\neriated_t(TURN+1,THING) :- turn(TURN), eriated_t(TURN,THING), not action_t(TURN,setral,THING).",
              "type_name": "setral"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "stful",
              "exit_targets": [
                "etiont",
                "emoust"
              ],
              "max_connections": 1,
              "type_name": "stful"
            },
            {
              "repr_str": "emoust",
              "exit_targets": [
                "stful"
              ],
              "max_connections": 3,
              "type_name": "emoust"
            },
            {
              "repr_str": "etiont",
              "exit_targets": [
                "emoust",
                "encal"
              ],
              "max_connections": 2,
              "type_name": "etiont"
            },
            {
              "repr_str": "encal",
              "exit_targets": [
                "etiont",
                "emoust",
                "stful"
              ],
              "max_connections": 2,
              "type_name": "encal"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "aciong",
              "traits": [
                "dolam_able"
              ],
              "standard_locations": [
                "emoust",
                "encal"
              ],
              "type_name": "aciong"
            },
            {
              "repr_str": "oroust",
              "traits": [
                "dolam_able"
              ],
              "standard_locations": [
                "stful"
              ],
              "type_name": "oroust"
            },
            {
              "repr_str": "swaiced",
              "traits": [
                "ailly_able",
                "dolam_able"
              ],
              "standard_locations": [
                "encal",
                "etiont"
              ],
              "type_name": "swaiced"
            },
            {
              "repr_str": "perent",
              "traits": [
                "ailly_able",
                "aphistic_able"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "perent"
            },
            {
              "repr_str": "oming",
              "traits": [
                "ailly_able",
                "dolam_able"
              ],
              "standard_locations": [
                "encal",
                "emoust"
              ],
              "type_name": "oming"
            },
            {
              "repr_str": "inchan",
              "traits": [
                "ailly_able"
              ],
              "standard_locations": [
                "stful",
                "encal"
              ],
              "type_name": "inchan"
            },
            {
              "repr_str": "eucty",
              "traits": [
                "ailly_able"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "eucty"
            },
            {
              "repr_str": "strood",
              "traits": [
                "aphistic_able",
                "dolam_able"
              ],
              "standard_locations": [
                "encal"
              ],
              "type_name": "strood"
            },
            {
              "repr_str": "pyelly",
              "traits": [
                "dolam_able",
                "ailly_able"
              ],
              "standard_locations": [
                "emoust"
              ],
              "type_name": "pyelly"
            },
            {
              "repr_str": "ostion",
              "traits": [
                "aphistic_able"
              ],
              "standard_locations": [
                "stful",
                "etiont"
              ],
              "type_name": "ostion"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "stful",
                  "emoust",
                  "etiont",
                  "encal"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "aciong",
                  "oroust",
                  "swaiced",
                  "perent",
                  "oming",
                  "inchan",
                  "eucty",
                  "strood",
                  "pyelly",
                  "ostion",
                  "player",
                  "inventory",
                  "floor"
                ],
                "dolam_able": [
                  "aciong",
                  "oroust",
                  "swaiced",
                  "oming",
                  "strood",
                  "pyelly"
                ],
                "ailly_able": [
                  "swaiced",
                  "perent",
                  "oming",
                  "inchan",
                  "eucty",
                  "pyelly"
                ],
                "aphistic_able": [
                  "perent",
                  "strood",
                  "ostion"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "dolam",
                  "variable": "e",
                  "mutability": "dolam_able"
                },
                {
                  "predicate_id": "ailly",
                  "variable": "e",
                  "mutability": "ailly_able"
                },
                {
                  "predicate_id": "retart",
                  "variable": "e",
                  "mutability": "ailly_able"
                },
                {
                  "predicate_id": "aphistic",
                  "variable": "e",
                  "mutability": "aphistic_able"
                },
                {
                  "predicate_id": "olict",
                  "variable": "e",
                  "mutability": "aphistic_able"
                },
                {
                  "predicate_id": "eriated",
                  "variable": "e",
                  "mutability": "aphistic_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can erack, plecon, lowal, icalit, cretia and crury.\n\nYour goal for this game is: Make the eprour reging, the siaticed degra and the piesm ricke.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(taillag1,lablent1)",
            "at(dergal1,tworia1)",
            "at(siaticed1,lon1)",
            "at(riack1,lon1)",
            "at(astont1,lon1)",
            "at(orele1,lon1)",
            "at(teming1,lon1)",
            "at(piesm1,lispe1)",
            "at(iless1,lablent1)",
            "at(eprour1,lon1)",
            "at(player1,lon1)",
            "type(player1,player)",
            "type(eprour1,eprour)",
            "type(iless1,iless)",
            "type(piesm1,piesm)",
            "type(teming1,teming)",
            "type(orele1,orele)",
            "type(astont1,astont)",
            "type(riack1,riack)",
            "type(siaticed1,siaticed)",
            "type(dergal1,dergal)",
            "type(taillag1,taillag)",
            "room(lablent1,lablent)",
            "room(tworia1,tworia)",
            "room(lispe1,lispe)",
            "room(lon1,lon)",
            "ricke(dergal1)",
            "ricke(riack1)",
            "ricke(astont1)",
            "ricke(orele1)",
            "ricary(teming1)",
            "ricary(piesm1)",
            "degra(taillag1)",
            "babile(teming1)",
            "scidian(siaticed1)",
            "exit(lablent1,tworia1)",
            "exit(tworia1,lablent1)",
            "exit(lispe1,tworia1)",
            "exit(lon1,lablent1)",
            "exit(lablent1,lon1)",
            "exit(tworia1,lispe1)",
            "reging_able(eprour1)",
            "reging_able(iless1)",
            "reging_able(piesm1)",
            "reging_able(orele1)",
            "reging_able(siaticed1)",
            "reging_able(dergal1)",
            "ricke_able(piesm1)",
            "ricke_able(teming1)",
            "ricke_able(orele1)",
            "ricke_able(astont1)",
            "ricke_able(riack1)",
            "ricke_able(dergal1)",
            "degra_able(teming1)",
            "degra_able(siaticed1)",
            "degra_able(taillag1)"
          ],
          "goal_state": [
            "reging(eprour1)",
            "ricke(piesm1)",
            "degra(siaticed1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "cretia",
              "eprour1"
            ],
            [
              "erack",
              "siaticed1"
            ],
            [
              "go",
              "lablent1"
            ],
            [
              "go",
              "tworia1"
            ],
            [
              "go",
              "lispe1"
            ],
            [
              "icalit",
              "piesm1"
            ]
          ],
          "optimal_commands": [
            "cretia eprour",
            "erack siaticed",
            "go lablent",
            "go tworia",
            "go lispe",
            "icalit piesm"
          ],
          "action_definitions": [
            {
              "lark": "cretia: CRETIA thing\nCRETIA.1: \"cretia\" WS",
              "pddl": "(:action CRETIA\n    :parameters (?e - reging_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (reging ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not reging-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now reging.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To cretia is to make something reging_able reging.",
              "asp": "{ action_t(TURN,cretia,THING):at_t(TURN,THING,ROOM),reging_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nreging_t(TURN+1,THING) :- action_t(TURN,cretia,THING).\nreging_t(TURN+1,THING) :- turn(TURN), reging_t(TURN,THING).",
              "type_name": "cretia"
            },
            {
              "lark": "crury: CRURY thing\nCRURY.1: \"crury\" WS",
              "pddl": "(:action CRURY\n    :parameters (?e - ricke_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ricke ?e)\n        )\n    :effect (and\n        (ricary ?e)\n        (not (ricke ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ricke-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ricke.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ricary.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To crury is to make something ricke_able and ricke be ricary.",
              "asp": "{ action_t(TURN,crury,THING):at_t(TURN,THING,ROOM),ricke_able(THING),ricke_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nricary_t(TURN+1,THING) :- action_t(TURN,crury,THING).\nricke_t(TURN+1,THING) :- turn(TURN), ricke_t(TURN,THING), not action_t(TURN,crury,THING).",
              "type_name": "crury"
            },
            {
              "lark": "icalit: ICALIT thing\nICALIT.1: \"icalit\" WS",
              "pddl": "(:action ICALIT\n    :parameters (?e - ricke_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ricary ?e)\n        )\n    :effect (and\n        (ricke ?e)\n        (not (ricary ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ricke-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ricary.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ricke.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To icalit is to make something ricke_able and ricary be ricke.",
              "asp": "{ action_t(TURN,icalit,THING):at_t(TURN,THING,ROOM),ricke_able(THING),ricary_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nricke_t(TURN+1,THING) :- action_t(TURN,icalit,THING).\nricary_t(TURN+1,THING) :- turn(TURN), ricary_t(TURN,THING), not action_t(TURN,icalit,THING).",
              "type_name": "icalit"
            },
            {
              "lark": "lowal: LOWAL thing\nLOWAL.1: \"lowal\" WS",
              "pddl": "(:action LOWAL\n    :parameters (?e - degra_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (degra ?e)\n        )\n    :effect (and\n        (babile ?e)\n        (not (degra ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not degra-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not degra.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now babile.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lowal is to make something degra_able and degra be babile.",
              "asp": "{ action_t(TURN,lowal,THING):at_t(TURN,THING,ROOM),degra_able(THING),degra_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nbabile_t(TURN+1,THING) :- action_t(TURN,lowal,THING).\ndegra_t(TURN+1,THING) :- turn(TURN), degra_t(TURN,THING), not action_t(TURN,lowal,THING).",
              "type_name": "lowal"
            },
            {
              "lark": "plecon: PLECON thing\nPLECON.1: \"plecon\" WS",
              "pddl": "(:action PLECON\n    :parameters (?e - degra_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (babile ?e)\n        )\n    :effect (and\n        (scidian ?e)\n        (not (babile ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not degra-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not babile.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now scidian.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To plecon is to make something degra_able and babile be scidian.",
              "asp": "{ action_t(TURN,plecon,THING):at_t(TURN,THING,ROOM),degra_able(THING),babile_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nscidian_t(TURN+1,THING) :- action_t(TURN,plecon,THING).\nbabile_t(TURN+1,THING) :- turn(TURN), babile_t(TURN,THING), not action_t(TURN,plecon,THING).",
              "type_name": "plecon"
            },
            {
              "lark": "erack: ERACK thing\nERACK.1: \"erack\" WS",
              "pddl": "(:action ERACK\n    :parameters (?e - degra_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (scidian ?e)\n        )\n    :effect (and\n        (degra ?e)\n        (not (scidian ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not degra-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not scidian.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now degra.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To erack is to make something degra_able and scidian be degra.",
              "asp": "{ action_t(TURN,erack,THING):at_t(TURN,THING,ROOM),degra_able(THING),scidian_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ndegra_t(TURN+1,THING) :- action_t(TURN,erack,THING).\nscidian_t(TURN+1,THING) :- turn(TURN), scidian_t(TURN,THING), not action_t(TURN,erack,THING).",
              "type_name": "erack"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "lablent",
              "exit_targets": [
                "lispe",
                "tworia"
              ],
              "max_connections": 1,
              "type_name": "lablent"
            },
            {
              "repr_str": "tworia",
              "exit_targets": [
                "lablent"
              ],
              "max_connections": 3,
              "type_name": "tworia"
            },
            {
              "repr_str": "lispe",
              "exit_targets": [
                "tworia",
                "lon"
              ],
              "max_connections": 2,
              "type_name": "lispe"
            },
            {
              "repr_str": "lon",
              "exit_targets": [
                "lispe",
                "tworia",
                "lablent"
              ],
              "max_connections": 2,
              "type_name": "lon"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "eprour",
              "traits": [
                "reging_able"
              ],
              "standard_locations": [
                "tworia",
                "lon"
              ],
              "type_name": "eprour"
            },
            {
              "repr_str": "iless",
              "traits": [
                "reging_able"
              ],
              "standard_locations": [
                "lablent"
              ],
              "type_name": "iless"
            },
            {
              "repr_str": "piesm",
              "traits": [
                "ricke_able",
                "reging_able"
              ],
              "standard_locations": [
                "lon",
                "lispe"
              ],
              "type_name": "piesm"
            },
            {
              "repr_str": "teming",
              "traits": [
                "ricke_able",
                "degra_able"
              ],
              "standard_locations": [
                "lon"
              ],
              "type_name": "teming"
            },
            {
              "repr_str": "orele",
              "traits": [
                "ricke_able",
                "reging_able"
              ],
              "standard_locations": [
                "lon",
                "tworia"
              ],
              "type_name": "orele"
            },
            {
              "repr_str": "astont",
              "traits": [
                "ricke_able"
              ],
              "standard_locations": [
                "lablent",
                "lon"
              ],
              "type_name": "astont"
            },
            {
              "repr_str": "riack",
              "traits": [
                "ricke_able"
              ],
              "standard_locations": [
                "lon"
              ],
              "type_name": "riack"
            },
            {
              "repr_str": "siaticed",
              "traits": [
                "degra_able",
                "reging_able"
              ],
              "standard_locations": [
                "lon"
              ],
              "type_name": "siaticed"
            },
            {
              "repr_str": "dergal",
              "traits": [
                "reging_able",
                "ricke_able"
              ],
              "standard_locations": [
                "tworia"
              ],
              "type_name": "dergal"
            },
            {
              "repr_str": "taillag",
              "traits": [
                "degra_able"
              ],
              "standard_locations": [
                "lablent",
                "lispe"
              ],
              "type_name": "taillag"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "lablent",
                  "tworia",
                  "lispe",
                  "lon"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "eprour",
                  "iless",
                  "piesm",
                  "teming",
                  "orele",
                  "astont",
                  "riack",
                  "siaticed",
                  "dergal",
                  "taillag",
                  "player",
                  "inventory",
                  "floor"
                ],
                "reging_able": [
                  "eprour",
                  "iless",
                  "piesm",
                  "orele",
                  "siaticed",
                  "dergal"
                ],
                "ricke_able": [
                  "piesm",
                  "teming",
                  "orele",
                  "astont",
                  "riack",
                  "dergal"
                ],
                "degra_able": [
                  "teming",
                  "siaticed",
                  "taillag"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "reging",
                  "variable": "e",
                  "mutability": "reging_able"
                },
                {
                  "predicate_id": "ricke",
                  "variable": "e",
                  "mutability": "ricke_able"
                },
                {
                  "predicate_id": "ricary",
                  "variable": "e",
                  "mutability": "ricke_able"
                },
                {
                  "predicate_id": "degra",
                  "variable": "e",
                  "mutability": "degra_able"
                },
                {
                  "predicate_id": "babile",
                  "variable": "e",
                  "mutability": "degra_able"
                },
                {
                  "predicate_id": "scidian",
                  "variable": "e",
                  "mutability": "degra_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can bioch, snemic, intess, emood, oustion and erson.\n\nYour goal for this game is: Make the torhy padery, the rot lotta and the astable preciny.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(rialiced1,ram1)",
            "at(ilitid1,stingly1)",
            "at(torhy1,iscum1)",
            "at(tisof1,iscum1)",
            "at(hirry1,iscum1)",
            "at(ishing1,iscum1)",
            "at(lonon1,iscum1)",
            "at(rot1,atoust1)",
            "at(omante1,ram1)",
            "at(astable1,iscum1)",
            "at(player1,iscum1)",
            "type(player1,player)",
            "type(astable1,astable)",
            "type(omante1,omante)",
            "type(rot1,rot)",
            "type(lonon1,lonon)",
            "type(ishing1,ishing)",
            "type(hirry1,hirry)",
            "type(tisof1,tisof)",
            "type(torhy1,torhy)",
            "type(ilitid1,ilitid)",
            "type(rialiced1,rialiced)",
            "room(ram1,ram)",
            "room(stingly1,stingly)",
            "room(atoust1,atoust)",
            "room(iscum1,iscum)",
            "lotta(ilitid1)",
            "lotta(tisof1)",
            "lotta(hirry1)",
            "lotta(ishing1)",
            "gumary(lonon1)",
            "gumary(rot1)",
            "padery(rialiced1)",
            "antally(lonon1)",
            "helum(torhy1)",
            "exit(ram1,stingly1)",
            "exit(stingly1,ram1)",
            "exit(atoust1,stingly1)",
            "exit(iscum1,ram1)",
            "exit(ram1,iscum1)",
            "exit(stingly1,atoust1)",
            "preciny_able(astable1)",
            "preciny_able(omante1)",
            "preciny_able(rot1)",
            "preciny_able(ishing1)",
            "preciny_able(torhy1)",
            "preciny_able(ilitid1)",
            "lotta_able(rot1)",
            "lotta_able(lonon1)",
            "lotta_able(ishing1)",
            "lotta_able(hirry1)",
            "lotta_able(tisof1)",
            "lotta_able(ilitid1)",
            "padery_able(lonon1)",
            "padery_able(torhy1)",
            "padery_able(rialiced1)"
          ],
          "goal_state": [
            "preciny(astable1)",
            "lotta(rot1)",
            "padery(torhy1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "bioch",
              "astable1"
            ],
            [
              "emood",
              "torhy1"
            ],
            [
              "go",
              "ram1"
            ],
            [
              "go",
              "stingly1"
            ],
            [
              "go",
              "atoust1"
            ],
            [
              "snemic",
              "rot1"
            ]
          ],
          "optimal_commands": [
            "bioch astable",
            "emood torhy",
            "go ram",
            "go stingly",
            "go atoust",
            "snemic rot"
          ],
          "action_definitions": [
            {
              "lark": "bioch: BIOCH thing\nBIOCH.1: \"bioch\" WS",
              "pddl": "(:action BIOCH\n    :parameters (?e - preciny_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (preciny ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not preciny-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now preciny.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To bioch is to make something preciny_able preciny.",
              "asp": "{ action_t(TURN,bioch,THING):at_t(TURN,THING,ROOM),preciny_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\npreciny_t(TURN+1,THING) :- action_t(TURN,bioch,THING).\npreciny_t(TURN+1,THING) :- turn(TURN), preciny_t(TURN,THING).",
              "type_name": "bioch"
            },
            {
              "lark": "erson: ERSON thing\nERSON.1: \"erson\" WS",
              "pddl": "(:action ERSON\n    :parameters (?e - lotta_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (lotta ?e)\n        )\n    :effect (and\n        (gumary ?e)\n        (not (lotta ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lotta-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not lotta.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now gumary.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To erson is to make something lotta_able and lotta be gumary.",
              "asp": "{ action_t(TURN,erson,THING):at_t(TURN,THING,ROOM),lotta_able(THING),lotta_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ngumary_t(TURN+1,THING) :- action_t(TURN,erson,THING).\nlotta_t(TURN+1,THING) :- turn(TURN), lotta_t(TURN,THING), not action_t(TURN,erson,THING).",
              "type_name": "erson"
            },
            {
              "lark": "snemic: SNEMIC thing\nSNEMIC.1: \"snemic\" WS",
              "pddl": "(:action SNEMIC\n    :parameters (?e - lotta_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (gumary ?e)\n        )\n    :effect (and\n        (lotta ?e)\n        (not (gumary ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not lotta-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not gumary.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now lotta.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To snemic is to make something lotta_able and gumary be lotta.",
              "asp": "{ action_t(TURN,snemic,THING):at_t(TURN,THING,ROOM),lotta_able(THING),gumary_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nlotta_t(TURN+1,THING) :- action_t(TURN,snemic,THING).\ngumary_t(TURN+1,THING) :- turn(TURN), gumary_t(TURN,THING), not action_t(TURN,snemic,THING).",
              "type_name": "snemic"
            },
            {
              "lark": "intess: INTESS thing\nINTESS.1: \"intess\" WS",
              "pddl": "(:action INTESS\n    :parameters (?e - padery_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (padery ?e)\n        )\n    :effect (and\n        (antally ?e)\n        (not (padery ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not padery-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not padery.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now antally.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To intess is to make something padery_able and padery be antally.",
              "asp": "{ action_t(TURN,intess,THING):at_t(TURN,THING,ROOM),padery_able(THING),padery_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nantally_t(TURN+1,THING) :- action_t(TURN,intess,THING).\npadery_t(TURN+1,THING) :- turn(TURN), padery_t(TURN,THING), not action_t(TURN,intess,THING).",
              "type_name": "intess"
            },
            {
              "lark": "oustion: OUSTION thing\nOUSTION.1: \"oustion\" WS",
              "pddl": "(:action OUSTION\n    :parameters (?e - padery_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (antally ?e)\n        )\n    :effect (and\n        (helum ?e)\n        (not (antally ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not padery-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not antally.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now helum.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To oustion is to make something padery_able and antally be helum.",
              "asp": "{ action_t(TURN,oustion,THING):at_t(TURN,THING,ROOM),padery_able(THING),antally_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nhelum_t(TURN+1,THING) :- action_t(TURN,oustion,THING).\nantally_t(TURN+1,THING) :- turn(TURN), antally_t(TURN,THING), not action_t(TURN,oustion,THING).",
              "type_name": "oustion"
            },
            {
              "lark": "emood: EMOOD thing\nEMOOD.1: \"emood\" WS",
              "pddl": "(:action EMOOD\n    :parameters (?e - padery_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (helum ?e)\n        )\n    :effect (and\n        (padery ?e)\n        (not (helum ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not padery-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not helum.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now padery.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To emood is to make something padery_able and helum be padery.",
              "asp": "{ action_t(TURN,emood,THING):at_t(TURN,THING,ROOM),padery_able(THING),helum_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\npadery_t(TURN+1,THING) :- action_t(TURN,emood,THING).\nhelum_t(TURN+1,THING) :- turn(TURN), helum_t(TURN,THING), not action_t(TURN,emood,THING).",
              "type_name": "emood"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "ram",
              "exit_targets": [
                "atoust",
                "stingly"
              ],
              "max_connections": 1,
              "type_name": "ram"
            },
            {
              "repr_str": "stingly",
              "exit_targets": [
                "ram"
              ],
              "max_connections": 3,
              "type_name": "stingly"
            },
            {
              "repr_str": "atoust",
              "exit_targets": [
                "stingly",
                "iscum"
              ],
              "max_connections": 2,
              "type_name": "atoust"
            },
            {
              "repr_str": "iscum",
              "exit_targets": [
                "atoust",
                "stingly",
                "ram"
              ],
              "max_connections": 2,
              "type_name": "iscum"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "astable",
              "traits": [
                "preciny_able"
              ],
              "standard_locations": [
                "stingly",
                "iscum"
              ],
              "type_name": "astable"
            },
            {
              "repr_str": "omante",
              "traits": [
                "preciny_able"
              ],
              "standard_locations": [
                "ram"
              ],
              "type_name": "omante"
            },
            {
              "repr_str": "rot",
              "traits": [
                "lotta_able",
                "preciny_able"
              ],
              "standard_locations": [
                "iscum",
                "atoust"
              ],
              "type_name": "rot"
            },
            {
              "repr_str": "lonon",
              "traits": [
                "lotta_able",
                "padery_able"
              ],
              "standard_locations": [
                "iscum"
              ],
              "type_name": "lonon"
            },
            {
              "repr_str": "ishing",
              "traits": [
                "lotta_able",
                "preciny_able"
              ],
              "standard_locations": [
                "iscum",
                "stingly"
              ],
              "type_name": "ishing"
            },
            {
              "repr_str": "hirry",
              "traits": [
                "lotta_able"
              ],
              "standard_locations": [
                "ram",
                "iscum"
              ],
              "type_name": "hirry"
            },
            {
              "repr_str": "tisof",
              "traits": [
                "lotta_able"
              ],
              "standard_locations": [
                "iscum"
              ],
              "type_name": "tisof"
            },
            {
              "repr_str": "torhy",
              "traits": [
                "padery_able",
                "preciny_able"
              ],
              "standard_locations": [
                "iscum"
              ],
              "type_name": "torhy"
            },
            {
              "repr_str": "ilitid",
              "traits": [
                "preciny_able",
                "lotta_able"
              ],
              "standard_locations": [
                "stingly"
              ],
              "type_name": "ilitid"
            },
            {
              "repr_str": "rialiced",
              "traits": [
                "padery_able"
              ],
              "standard_locations": [
                "ram",
                "atoust"
              ],
              "type_name": "rialiced"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "ram",
                  "stingly",
                  "atoust",
                  "iscum"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "astable",
                  "omante",
                  "rot",
                  "lonon",
                  "ishing",
                  "hirry",
                  "tisof",
                  "torhy",
                  "ilitid",
                  "rialiced",
                  "player",
                  "inventory",
                  "floor"
                ],
                "preciny_able": [
                  "astable",
                  "omante",
                  "rot",
                  "ishing",
                  "torhy",
                  "ilitid"
                ],
                "lotta_able": [
                  "rot",
                  "lonon",
                  "ishing",
                  "hirry",
                  "tisof",
                  "ilitid"
                ],
                "padery_able": [
                  "lonon",
                  "torhy",
                  "rialiced"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "preciny",
                  "variable": "e",
                  "mutability": "preciny_able"
                },
                {
                  "predicate_id": "lotta",
                  "variable": "e",
                  "mutability": "lotta_able"
                },
                {
                  "predicate_id": "gumary",
                  "variable": "e",
                  "mutability": "lotta_able"
                },
                {
                  "predicate_id": "padery",
                  "variable": "e",
                  "mutability": "padery_able"
                },
                {
                  "predicate_id": "antally",
                  "variable": "e",
                  "mutability": "padery_able"
                },
                {
                  "predicate_id": "helum",
                  "variable": "e",
                  "mutability": "padery_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can onser, mellum, clogery, ellous, ially and upbes.\n\nYour goal for this game is: Make the hetle anird, the ioness opige and the rotont reforian.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(venism1,routiced1)",
            "at(toxist1,guaced1)",
            "at(rotont1,atival1)",
            "at(herper1,atival1)",
            "at(equadish1,atival1)",
            "at(fervan1,atival1)",
            "at(thium1,atival1)",
            "at(hetle1,emingly1)",
            "at(attle1,routiced1)",
            "at(ioness1,atival1)",
            "at(player1,atival1)",
            "type(player1,player)",
            "type(ioness1,ioness)",
            "type(attle1,attle)",
            "type(hetle1,hetle)",
            "type(thium1,thium)",
            "type(fervan1,fervan)",
            "type(equadish1,equadish)",
            "type(herper1,herper)",
            "type(rotont1,rotont)",
            "type(toxist1,toxist)",
            "type(venism1,venism)",
            "room(routiced1,routiced)",
            "room(guaced1,guaced)",
            "room(emingly1,emingly)",
            "room(atival1,atival)",
            "anird(toxist1)",
            "anird(herper1)",
            "anird(equadish1)",
            "anird(fervan1)",
            "everce(thium1)",
            "everce(hetle1)",
            "reforian(venism1)",
            "cunad(thium1)",
            "cioty(rotont1)",
            "exit(routiced1,guaced1)",
            "exit(guaced1,routiced1)",
            "exit(emingly1,guaced1)",
            "exit(atival1,routiced1)",
            "exit(routiced1,atival1)",
            "exit(guaced1,emingly1)",
            "opige_able(ioness1)",
            "opige_able(attle1)",
            "opige_able(hetle1)",
            "opige_able(fervan1)",
            "opige_able(rotont1)",
            "opige_able(toxist1)",
            "anird_able(hetle1)",
            "anird_able(thium1)",
            "anird_able(fervan1)",
            "anird_able(equadish1)",
            "anird_able(herper1)",
            "anird_able(toxist1)",
            "reforian_able(thium1)",
            "reforian_able(rotont1)",
            "reforian_able(venism1)"
          ],
          "goal_state": [
            "opige(ioness1)",
            "anird(hetle1)",
            "reforian(rotont1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "mellum",
              "ioness1"
            ],
            [
              "clogery",
              "rotont1"
            ],
            [
              "go",
              "routiced1"
            ],
            [
              "go",
              "guaced1"
            ],
            [
              "go",
              "emingly1"
            ],
            [
              "ially",
              "hetle1"
            ]
          ],
          "optimal_commands": [
            "mellum ioness",
            "clogery rotont",
            "go routiced",
            "go guaced",
            "go emingly",
            "ially hetle"
          ],
          "action_definitions": [
            {
              "lark": "mellum: MELLUM thing\nMELLUM.1: \"mellum\" WS",
              "pddl": "(:action MELLUM\n    :parameters (?e - opige_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (opige ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not opige-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now opige.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To mellum is to make something opige_able opige.",
              "asp": "{ action_t(TURN,mellum,THING):at_t(TURN,THING,ROOM),opige_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopige_t(TURN+1,THING) :- action_t(TURN,mellum,THING).\nopige_t(TURN+1,THING) :- turn(TURN), opige_t(TURN,THING).",
              "type_name": "mellum"
            },
            {
              "lark": "upbes: UPBES thing\nUPBES.1: \"upbes\" WS",
              "pddl": "(:action UPBES\n    :parameters (?e - anird_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (anird ?e)\n        )\n    :effect (and\n        (everce ?e)\n        (not (anird ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not anird-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not anird.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now everce.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To upbes is to make something anird_able and anird be everce.",
              "asp": "{ action_t(TURN,upbes,THING):at_t(TURN,THING,ROOM),anird_able(THING),anird_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\neverce_t(TURN+1,THING) :- action_t(TURN,upbes,THING).\nanird_t(TURN+1,THING) :- turn(TURN), anird_t(TURN,THING), not action_t(TURN,upbes,THING).",
              "type_name": "upbes"
            },
            {
              "lark": "ially: IALLY thing\nIALLY.1: \"ially\" WS",
              "pddl": "(:action IALLY\n    :parameters (?e - anird_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (everce ?e)\n        )\n    :effect (and\n        (anird ?e)\n        (not (everce ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not anird-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not everce.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now anird.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ially is to make something anird_able and everce be anird.",
              "asp": "{ action_t(TURN,ially,THING):at_t(TURN,THING,ROOM),anird_able(THING),everce_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nanird_t(TURN+1,THING) :- action_t(TURN,ially,THING).\neverce_t(TURN+1,THING) :- turn(TURN), everce_t(TURN,THING), not action_t(TURN,ially,THING).",
              "type_name": "ially"
            },
            {
              "lark": "onser: ONSER thing\nONSER.1: \"onser\" WS",
              "pddl": "(:action ONSER\n    :parameters (?e - reforian_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (reforian ?e)\n        )\n    :effect (and\n        (cunad ?e)\n        (not (reforian ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not reforian-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not reforian.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now cunad.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To onser is to make something reforian_able and reforian be cunad.",
              "asp": "{ action_t(TURN,onser,THING):at_t(TURN,THING,ROOM),reforian_able(THING),reforian_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ncunad_t(TURN+1,THING) :- action_t(TURN,onser,THING).\nreforian_t(TURN+1,THING) :- turn(TURN), reforian_t(TURN,THING), not action_t(TURN,onser,THING).",
              "type_name": "onser"
            },
            {
              "lark": "ellous: ELLOUS thing\nELLOUS.1: \"ellous\" WS",
              "pddl": "(:action ELLOUS\n    :parameters (?e - reforian_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (cunad ?e)\n        )\n    :effect (and\n        (cioty ?e)\n        (not (cunad ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not reforian-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not cunad.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now cioty.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ellous is to make something reforian_able and cunad be cioty.",
              "asp": "{ action_t(TURN,ellous,THING):at_t(TURN,THING,ROOM),reforian_able(THING),cunad_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ncioty_t(TURN+1,THING) :- action_t(TURN,ellous,THING).\ncunad_t(TURN+1,THING) :- turn(TURN), cunad_t(TURN,THING), not action_t(TURN,ellous,THING).",
              "type_name": "ellous"
            },
            {
              "lark": "clogery: CLOGERY thing\nCLOGERY.1: \"clogery\" WS",
              "pddl": "(:action CLOGERY\n    :parameters (?e - reforian_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (cioty ?e)\n        )\n    :effect (and\n        (reforian ?e)\n        (not (cioty ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not reforian-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not cioty.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now reforian.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To clogery is to make something reforian_able and cioty be reforian.",
              "asp": "{ action_t(TURN,clogery,THING):at_t(TURN,THING,ROOM),reforian_able(THING),cioty_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nreforian_t(TURN+1,THING) :- action_t(TURN,clogery,THING).\ncioty_t(TURN+1,THING) :- turn(TURN), cioty_t(TURN,THING), not action_t(TURN,clogery,THING).",
              "type_name": "clogery"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "routiced",
              "exit_targets": [
                "emingly",
                "guaced"
              ],
              "max_connections": 1,
              "type_name": "routiced"
            },
            {
              "repr_str": "guaced",
              "exit_targets": [
                "routiced"
              ],
              "max_connections": 3,
              "type_name": "guaced"
            },
            {
              "repr_str": "emingly",
              "exit_targets": [
                "guaced",
                "atival"
              ],
              "max_connections": 2,
              "type_name": "emingly"
            },
            {
              "repr_str": "atival",
              "exit_targets": [
                "emingly",
                "guaced",
                "routiced"
              ],
              "max_connections": 2,
              "type_name": "atival"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "ioness",
              "traits": [
                "opige_able"
              ],
              "standard_locations": [
                "guaced",
                "atival"
              ],
              "type_name": "ioness"
            },
            {
              "repr_str": "attle",
              "traits": [
                "opige_able"
              ],
              "standard_locations": [
                "routiced"
              ],
              "type_name": "attle"
            },
            {
              "repr_str": "hetle",
              "traits": [
                "anird_able",
                "opige_able"
              ],
              "standard_locations": [
                "atival",
                "emingly"
              ],
              "type_name": "hetle"
            },
            {
              "repr_str": "thium",
              "traits": [
                "anird_able",
                "reforian_able"
              ],
              "standard_locations": [
                "atival"
              ],
              "type_name": "thium"
            },
            {
              "repr_str": "fervan",
              "traits": [
                "anird_able",
                "opige_able"
              ],
              "standard_locations": [
                "atival",
                "guaced"
              ],
              "type_name": "fervan"
            },
            {
              "repr_str": "equadish",
              "traits": [
                "anird_able"
              ],
              "standard_locations": [
                "routiced",
                "atival"
              ],
              "type_name": "equadish"
            },
            {
              "repr_str": "herper",
              "traits": [
                "anird_able"
              ],
              "standard_locations": [
                "atival"
              ],
              "type_name": "herper"
            },
            {
              "repr_str": "rotont",
              "traits": [
                "reforian_able",
                "opige_able"
              ],
              "standard_locations": [
                "atival"
              ],
              "type_name": "rotont"
            },
            {
              "repr_str": "toxist",
              "traits": [
                "opige_able",
                "anird_able"
              ],
              "standard_locations": [
                "guaced"
              ],
              "type_name": "toxist"
            },
            {
              "repr_str": "venism",
              "traits": [
                "reforian_able"
              ],
              "standard_locations": [
                "routiced",
                "emingly"
              ],
              "type_name": "venism"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "routiced",
                  "guaced",
                  "emingly",
                  "atival"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "ioness",
                  "attle",
                  "hetle",
                  "thium",
                  "fervan",
                  "equadish",
                  "herper",
                  "rotont",
                  "toxist",
                  "venism",
                  "player",
                  "inventory",
                  "floor"
                ],
                "opige_able": [
                  "ioness",
                  "attle",
                  "hetle",
                  "fervan",
                  "rotont",
                  "toxist"
                ],
                "anird_able": [
                  "hetle",
                  "thium",
                  "fervan",
                  "equadish",
                  "herper",
                  "toxist"
                ],
                "reforian_able": [
                  "thium",
                  "rotont",
                  "venism"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "opige",
                  "variable": "e",
                  "mutability": "opige_able"
                },
                {
                  "predicate_id": "anird",
                  "variable": "e",
                  "mutability": "anird_able"
                },
                {
                  "predicate_id": "everce",
                  "variable": "e",
                  "mutability": "anird_able"
                },
                {
                  "predicate_id": "reforian",
                  "variable": "e",
                  "mutability": "reforian_able"
                },
                {
                  "predicate_id": "cunad",
                  "variable": "e",
                  "mutability": "reforian_able"
                },
                {
                  "predicate_id": "cioty",
                  "variable": "e",
                  "mutability": "reforian_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can abluty, uningne, athemb, altric, polotit and arimic.\n\nYour goal for this game is: Make the chophal permity, the hooiced nionian and the nousion nophyle.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(ditain1,itink1)",
            "at(ridism1,ambint1)",
            "at(hooiced1,hydroft1)",
            "at(glogly1,hydroft1)",
            "at(gicalio1,hydroft1)",
            "at(eleniced1,hydroft1)",
            "at(alloger1,hydroft1)",
            "at(nousion1,pledle1)",
            "at(matiorm1,itink1)",
            "at(chophal1,hydroft1)",
            "at(player1,hydroft1)",
            "type(player1,player)",
            "type(chophal1,chophal)",
            "type(matiorm1,matiorm)",
            "type(nousion1,nousion)",
            "type(alloger1,alloger)",
            "type(eleniced1,eleniced)",
            "type(gicalio1,gicalio)",
            "type(glogly1,glogly)",
            "type(hooiced1,hooiced)",
            "type(ridism1,ridism)",
            "type(ditain1,ditain)",
            "room(itink1,itink)",
            "room(ambint1,ambint)",
            "room(pledle1,pledle)",
            "room(hydroft1,hydroft)",
            "nophyle(ridism1)",
            "nophyle(glogly1)",
            "nophyle(gicalio1)",
            "nophyle(eleniced1)",
            "tursotic(alloger1)",
            "tursotic(nousion1)",
            "nionian(ditain1)",
            "irmanty(alloger1)",
            "scalike(hooiced1)",
            "exit(itink1,ambint1)",
            "exit(ambint1,itink1)",
            "exit(pledle1,ambint1)",
            "exit(hydroft1,itink1)",
            "exit(itink1,hydroft1)",
            "exit(ambint1,pledle1)",
            "permity_able(chophal1)",
            "permity_able(matiorm1)",
            "permity_able(nousion1)",
            "permity_able(eleniced1)",
            "permity_able(hooiced1)",
            "permity_able(ridism1)",
            "nophyle_able(nousion1)",
            "nophyle_able(alloger1)",
            "nophyle_able(eleniced1)",
            "nophyle_able(gicalio1)",
            "nophyle_able(glogly1)",
            "nophyle_able(ridism1)",
            "nionian_able(alloger1)",
            "nionian_able(hooiced1)",
            "nionian_able(ditain1)"
          ],
          "goal_state": [
            "permity(chophal1)",
            "nophyle(nousion1)",
            "nionian(hooiced1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "athemb",
              "chophal1"
            ],
            [
              "arimic",
              "hooiced1"
            ],
            [
              "go",
              "itink1"
            ],
            [
              "go",
              "ambint1"
            ],
            [
              "go",
              "pledle1"
            ],
            [
              "altric",
              "nousion1"
            ]
          ],
          "optimal_commands": [
            "athemb chophal",
            "arimic hooiced",
            "go itink",
            "go ambint",
            "go pledle",
            "altric nousion"
          ],
          "action_definitions": [
            {
              "lark": "athemb: ATHEMB thing\nATHEMB.1: \"athemb\" WS",
              "pddl": "(:action ATHEMB\n    :parameters (?e - permity_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (permity ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not permity-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now permity.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To athemb is to make something permity_able permity.",
              "asp": "{ action_t(TURN,athemb,THING):at_t(TURN,THING,ROOM),permity_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\npermity_t(TURN+1,THING) :- action_t(TURN,athemb,THING).\npermity_t(TURN+1,THING) :- turn(TURN), permity_t(TURN,THING).",
              "type_name": "athemb"
            },
            {
              "lark": "abluty: ABLUTY thing\nABLUTY.1: \"abluty\" WS",
              "pddl": "(:action ABLUTY\n    :parameters (?e - nophyle_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (nophyle ?e)\n        )\n    :effect (and\n        (tursotic ?e)\n        (not (nophyle ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nophyle-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not nophyle.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now tursotic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To abluty is to make something nophyle_able and nophyle be tursotic.",
              "asp": "{ action_t(TURN,abluty,THING):at_t(TURN,THING,ROOM),nophyle_able(THING),nophyle_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ntursotic_t(TURN+1,THING) :- action_t(TURN,abluty,THING).\nnophyle_t(TURN+1,THING) :- turn(TURN), nophyle_t(TURN,THING), not action_t(TURN,abluty,THING).",
              "type_name": "abluty"
            },
            {
              "lark": "altric: ALTRIC thing\nALTRIC.1: \"altric\" WS",
              "pddl": "(:action ALTRIC\n    :parameters (?e - nophyle_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (tursotic ?e)\n        )\n    :effect (and\n        (nophyle ?e)\n        (not (tursotic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nophyle-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not tursotic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now nophyle.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To altric is to make something nophyle_able and tursotic be nophyle.",
              "asp": "{ action_t(TURN,altric,THING):at_t(TURN,THING,ROOM),nophyle_able(THING),tursotic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nnophyle_t(TURN+1,THING) :- action_t(TURN,altric,THING).\ntursotic_t(TURN+1,THING) :- turn(TURN), tursotic_t(TURN,THING), not action_t(TURN,altric,THING).",
              "type_name": "altric"
            },
            {
              "lark": "uningne: UNINGNE thing\nUNINGNE.1: \"uningne\" WS",
              "pddl": "(:action UNINGNE\n    :parameters (?e - nionian_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (nionian ?e)\n        )\n    :effect (and\n        (irmanty ?e)\n        (not (nionian ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nionian-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not nionian.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now irmanty.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To uningne is to make something nionian_able and nionian be irmanty.",
              "asp": "{ action_t(TURN,uningne,THING):at_t(TURN,THING,ROOM),nionian_able(THING),nionian_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nirmanty_t(TURN+1,THING) :- action_t(TURN,uningne,THING).\nnionian_t(TURN+1,THING) :- turn(TURN), nionian_t(TURN,THING), not action_t(TURN,uningne,THING).",
              "type_name": "uningne"
            },
            {
              "lark": "polotit: POLOTIT thing\nPOLOTIT.1: \"polotit\" WS",
              "pddl": "(:action POLOTIT\n    :parameters (?e - nionian_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (irmanty ?e)\n        )\n    :effect (and\n        (scalike ?e)\n        (not (irmanty ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nionian-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not irmanty.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now scalike.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To polotit is to make something nionian_able and irmanty be scalike.",
              "asp": "{ action_t(TURN,polotit,THING):at_t(TURN,THING,ROOM),nionian_able(THING),irmanty_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nscalike_t(TURN+1,THING) :- action_t(TURN,polotit,THING).\nirmanty_t(TURN+1,THING) :- turn(TURN), irmanty_t(TURN,THING), not action_t(TURN,polotit,THING).",
              "type_name": "polotit"
            },
            {
              "lark": "arimic: ARIMIC thing\nARIMIC.1: \"arimic\" WS",
              "pddl": "(:action ARIMIC\n    :parameters (?e - nionian_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (scalike ?e)\n        )\n    :effect (and\n        (nionian ?e)\n        (not (scalike ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not nionian-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not scalike.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now nionian.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To arimic is to make something nionian_able and scalike be nionian.",
              "asp": "{ action_t(TURN,arimic,THING):at_t(TURN,THING,ROOM),nionian_able(THING),scalike_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nnionian_t(TURN+1,THING) :- action_t(TURN,arimic,THING).\nscalike_t(TURN+1,THING) :- turn(TURN), scalike_t(TURN,THING), not action_t(TURN,arimic,THING).",
              "type_name": "arimic"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "itink",
              "exit_targets": [
                "pledle",
                "ambint"
              ],
              "max_connections": 1,
              "type_name": "itink"
            },
            {
              "repr_str": "ambint",
              "exit_targets": [
                "itink"
              ],
              "max_connections": 3,
              "type_name": "ambint"
            },
            {
              "repr_str": "pledle",
              "exit_targets": [
                "ambint",
                "hydroft"
              ],
              "max_connections": 2,
              "type_name": "pledle"
            },
            {
              "repr_str": "hydroft",
              "exit_targets": [
                "pledle",
                "ambint",
                "itink"
              ],
              "max_connections": 2,
              "type_name": "hydroft"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "chophal",
              "traits": [
                "permity_able"
              ],
              "standard_locations": [
                "ambint",
                "hydroft"
              ],
              "type_name": "chophal"
            },
            {
              "repr_str": "matiorm",
              "traits": [
                "permity_able"
              ],
              "standard_locations": [
                "itink"
              ],
              "type_name": "matiorm"
            },
            {
              "repr_str": "nousion",
              "traits": [
                "nophyle_able",
                "permity_able"
              ],
              "standard_locations": [
                "hydroft",
                "pledle"
              ],
              "type_name": "nousion"
            },
            {
              "repr_str": "alloger",
              "traits": [
                "nophyle_able",
                "nionian_able"
              ],
              "standard_locations": [
                "hydroft"
              ],
              "type_name": "alloger"
            },
            {
              "repr_str": "eleniced",
              "traits": [
                "nophyle_able",
                "permity_able"
              ],
              "standard_locations": [
                "hydroft",
                "ambint"
              ],
              "type_name": "eleniced"
            },
            {
              "repr_str": "gicalio",
              "traits": [
                "nophyle_able"
              ],
              "standard_locations": [
                "itink",
                "hydroft"
              ],
              "type_name": "gicalio"
            },
            {
              "repr_str": "glogly",
              "traits": [
                "nophyle_able"
              ],
              "standard_locations": [
                "hydroft"
              ],
              "type_name": "glogly"
            },
            {
              "repr_str": "hooiced",
              "traits": [
                "nionian_able",
                "permity_able"
              ],
              "standard_locations": [
                "hydroft"
              ],
              "type_name": "hooiced"
            },
            {
              "repr_str": "ridism",
              "traits": [
                "permity_able",
                "nophyle_able"
              ],
              "standard_locations": [
                "ambint"
              ],
              "type_name": "ridism"
            },
            {
              "repr_str": "ditain",
              "traits": [
                "nionian_able"
              ],
              "standard_locations": [
                "itink",
                "pledle"
              ],
              "type_name": "ditain"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "itink",
                  "ambint",
                  "pledle",
                  "hydroft"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "chophal",
                  "matiorm",
                  "nousion",
                  "alloger",
                  "eleniced",
                  "gicalio",
                  "glogly",
                  "hooiced",
                  "ridism",
                  "ditain",
                  "player",
                  "inventory",
                  "floor"
                ],
                "permity_able": [
                  "chophal",
                  "matiorm",
                  "nousion",
                  "eleniced",
                  "hooiced",
                  "ridism"
                ],
                "nophyle_able": [
                  "nousion",
                  "alloger",
                  "eleniced",
                  "gicalio",
                  "glogly",
                  "ridism"
                ],
                "nionian_able": [
                  "alloger",
                  "hooiced",
                  "ditain"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "permity",
                  "variable": "e",
                  "mutability": "permity_able"
                },
                {
                  "predicate_id": "nophyle",
                  "variable": "e",
                  "mutability": "nophyle_able"
                },
                {
                  "predicate_id": "tursotic",
                  "variable": "e",
                  "mutability": "nophyle_able"
                },
                {
                  "predicate_id": "nionian",
                  "variable": "e",
                  "mutability": "nionian_able"
                },
                {
                  "predicate_id": "irmanty",
                  "variable": "e",
                  "mutability": "nionian_able"
                },
                {
                  "predicate_id": "scalike",
                  "variable": "e",
                  "mutability": "nionian_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can propress, atifory, alful, adcry, spidene and pnestay.\n\nYour goal for this game is: Make the oubiced ecastic, the prachon dedulag and the mindly ropile.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(eriant1,conader1)",
            "at(tationsh1,onable1)",
            "at(mindly1,sinark1)",
            "at(ionity1,sinark1)",
            "at(epteria1,sinark1)",
            "at(uncepist1,sinark1)",
            "at(clednee1,sinark1)",
            "at(oubiced1,aterve1)",
            "at(ickle1,conader1)",
            "at(prachon1,sinark1)",
            "at(player1,sinark1)",
            "type(player1,player)",
            "type(prachon1,prachon)",
            "type(ickle1,ickle)",
            "type(oubiced1,oubiced)",
            "type(clednee1,clednee)",
            "type(uncepist1,uncepist)",
            "type(epteria1,epteria)",
            "type(ionity1,ionity)",
            "type(mindly1,mindly)",
            "type(tationsh1,tationsh)",
            "type(eriant1,eriant)",
            "room(conader1,conader)",
            "room(onable1,onable)",
            "room(aterve1,aterve)",
            "room(sinark1,sinark)",
            "ecastic(tationsh1)",
            "ecastic(ionity1)",
            "ecastic(epteria1)",
            "ecastic(uncepist1)",
            "phothipy(clednee1)",
            "phothipy(oubiced1)",
            "ropile(eriant1)",
            "fuster(clednee1)",
            "rancal(mindly1)",
            "exit(conader1,onable1)",
            "exit(onable1,conader1)",
            "exit(aterve1,onable1)",
            "exit(sinark1,conader1)",
            "exit(conader1,sinark1)",
            "exit(onable1,aterve1)",
            "dedulag_able(prachon1)",
            "dedulag_able(ickle1)",
            "dedulag_able(oubiced1)",
            "dedulag_able(uncepist1)",
            "dedulag_able(mindly1)",
            "dedulag_able(tationsh1)",
            "ecastic_able(oubiced1)",
            "ecastic_able(clednee1)",
            "ecastic_able(uncepist1)",
            "ecastic_able(epteria1)",
            "ecastic_able(ionity1)",
            "ecastic_able(tationsh1)",
            "ropile_able(clednee1)",
            "ropile_able(mindly1)",
            "ropile_able(eriant1)"
          ],
          "goal_state": [
            "dedulag(prachon1)",
            "ecastic(oubiced1)",
            "ropile(mindly1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "spidene",
              "prachon1"
            ],
            [
              "pnestay",
              "mindly1"
            ],
            [
              "go",
              "conader1"
            ],
            [
              "go",
              "onable1"
            ],
            [
              "go",
              "aterve1"
            ],
            [
              "atifory",
              "oubiced1"
            ]
          ],
          "optimal_commands": [
            "spidene prachon",
            "pnestay mindly",
            "go conader",
            "go onable",
            "go aterve",
            "atifory oubiced"
          ],
          "action_definitions": [
            {
              "lark": "spidene: SPIDENE thing\nSPIDENE.1: \"spidene\" WS",
              "pddl": "(:action SPIDENE\n    :parameters (?e - dedulag_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (dedulag ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not dedulag-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now dedulag.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To spidene is to make something dedulag_able dedulag.",
              "asp": "{ action_t(TURN,spidene,THING):at_t(TURN,THING,ROOM),dedulag_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ndedulag_t(TURN+1,THING) :- action_t(TURN,spidene,THING).\ndedulag_t(TURN+1,THING) :- turn(TURN), dedulag_t(TURN,THING).",
              "type_name": "spidene"
            },
            {
              "lark": "adcry: ADCRY thing\nADCRY.1: \"adcry\" WS",
              "pddl": "(:action ADCRY\n    :parameters (?e - ecastic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ecastic ?e)\n        )\n    :effect (and\n        (phothipy ?e)\n        (not (ecastic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ecastic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ecastic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now phothipy.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To adcry is to make something ecastic_able and ecastic be phothipy.",
              "asp": "{ action_t(TURN,adcry,THING):at_t(TURN,THING,ROOM),ecastic_able(THING),ecastic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nphothipy_t(TURN+1,THING) :- action_t(TURN,adcry,THING).\necastic_t(TURN+1,THING) :- turn(TURN), ecastic_t(TURN,THING), not action_t(TURN,adcry,THING).",
              "type_name": "adcry"
            },
            {
              "lark": "atifory: ATIFORY thing\nATIFORY.1: \"atifory\" WS",
              "pddl": "(:action ATIFORY\n    :parameters (?e - ecastic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (phothipy ?e)\n        )\n    :effect (and\n        (ecastic ?e)\n        (not (phothipy ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ecastic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not phothipy.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ecastic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To atifory is to make something ecastic_able and phothipy be ecastic.",
              "asp": "{ action_t(TURN,atifory,THING):at_t(TURN,THING,ROOM),ecastic_able(THING),phothipy_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\necastic_t(TURN+1,THING) :- action_t(TURN,atifory,THING).\nphothipy_t(TURN+1,THING) :- turn(TURN), phothipy_t(TURN,THING), not action_t(TURN,atifory,THING).",
              "type_name": "atifory"
            },
            {
              "lark": "alful: ALFUL thing\nALFUL.1: \"alful\" WS",
              "pddl": "(:action ALFUL\n    :parameters (?e - ropile_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ropile ?e)\n        )\n    :effect (and\n        (fuster ?e)\n        (not (ropile ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ropile-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ropile.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now fuster.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To alful is to make something ropile_able and ropile be fuster.",
              "asp": "{ action_t(TURN,alful,THING):at_t(TURN,THING,ROOM),ropile_able(THING),ropile_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nfuster_t(TURN+1,THING) :- action_t(TURN,alful,THING).\nropile_t(TURN+1,THING) :- turn(TURN), ropile_t(TURN,THING), not action_t(TURN,alful,THING).",
              "type_name": "alful"
            },
            {
              "lark": "propress: PROPRESS thing\nPROPRESS.1: \"propress\" WS",
              "pddl": "(:action PROPRESS\n    :parameters (?e - ropile_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (fuster ?e)\n        )\n    :effect (and\n        (rancal ?e)\n        (not (fuster ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ropile-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not fuster.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now rancal.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To propress is to make something ropile_able and fuster be rancal.",
              "asp": "{ action_t(TURN,propress,THING):at_t(TURN,THING,ROOM),ropile_able(THING),fuster_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nrancal_t(TURN+1,THING) :- action_t(TURN,propress,THING).\nfuster_t(TURN+1,THING) :- turn(TURN), fuster_t(TURN,THING), not action_t(TURN,propress,THING).",
              "type_name": "propress"
            },
            {
              "lark": "pnestay: PNESTAY thing\nPNESTAY.1: \"pnestay\" WS",
              "pddl": "(:action PNESTAY\n    :parameters (?e - ropile_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (rancal ?e)\n        )\n    :effect (and\n        (ropile ?e)\n        (not (rancal ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ropile-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not rancal.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ropile.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To pnestay is to make something ropile_able and rancal be ropile.",
              "asp": "{ action_t(TURN,pnestay,THING):at_t(TURN,THING,ROOM),ropile_able(THING),rancal_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nropile_t(TURN+1,THING) :- action_t(TURN,pnestay,THING).\nrancal_t(TURN+1,THING) :- turn(TURN), rancal_t(TURN,THING), not action_t(TURN,pnestay,THING).",
              "type_name": "pnestay"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "conader",
              "exit_targets": [
                "aterve",
                "onable"
              ],
              "max_connections": 1,
              "type_name": "conader"
            },
            {
              "repr_str": "onable",
              "exit_targets": [
                "conader"
              ],
              "max_connections": 3,
              "type_name": "onable"
            },
            {
              "repr_str": "aterve",
              "exit_targets": [
                "onable",
                "sinark"
              ],
              "max_connections": 2,
              "type_name": "aterve"
            },
            {
              "repr_str": "sinark",
              "exit_targets": [
                "aterve",
                "onable",
                "conader"
              ],
              "max_connections": 2,
              "type_name": "sinark"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "prachon",
              "traits": [
                "dedulag_able"
              ],
              "standard_locations": [
                "onable",
                "sinark"
              ],
              "type_name": "prachon"
            },
            {
              "repr_str": "ickle",
              "traits": [
                "dedulag_able"
              ],
              "standard_locations": [
                "conader"
              ],
              "type_name": "ickle"
            },
            {
              "repr_str": "oubiced",
              "traits": [
                "ecastic_able",
                "dedulag_able"
              ],
              "standard_locations": [
                "sinark",
                "aterve"
              ],
              "type_name": "oubiced"
            },
            {
              "repr_str": "clednee",
              "traits": [
                "ecastic_able",
                "ropile_able"
              ],
              "standard_locations": [
                "sinark"
              ],
              "type_name": "clednee"
            },
            {
              "repr_str": "uncepist",
              "traits": [
                "ecastic_able",
                "dedulag_able"
              ],
              "standard_locations": [
                "sinark",
                "onable"
              ],
              "type_name": "uncepist"
            },
            {
              "repr_str": "epteria",
              "traits": [
                "ecastic_able"
              ],
              "standard_locations": [
                "conader",
                "sinark"
              ],
              "type_name": "epteria"
            },
            {
              "repr_str": "ionity",
              "traits": [
                "ecastic_able"
              ],
              "standard_locations": [
                "sinark"
              ],
              "type_name": "ionity"
            },
            {
              "repr_str": "mindly",
              "traits": [
                "ropile_able",
                "dedulag_able"
              ],
              "standard_locations": [
                "sinark"
              ],
              "type_name": "mindly"
            },
            {
              "repr_str": "tationsh",
              "traits": [
                "dedulag_able",
                "ecastic_able"
              ],
              "standard_locations": [
                "onable"
              ],
              "type_name": "tationsh"
            },
            {
              "repr_str": "eriant",
              "traits": [
                "ropile_able"
              ],
              "standard_locations": [
                "conader",
                "aterve"
              ],
              "type_name": "eriant"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "conader",
                  "onable",
                  "aterve",
                  "sinark"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "prachon",
                  "ickle",
                  "oubiced",
                  "clednee",
                  "uncepist",
                  "epteria",
                  "ionity",
                  "mindly",
                  "tationsh",
                  "eriant",
                  "player",
                  "inventory",
                  "floor"
                ],
                "dedulag_able": [
                  "prachon",
                  "ickle",
                  "oubiced",
                  "uncepist",
                  "mindly",
                  "tationsh"
                ],
                "ecastic_able": [
                  "oubiced",
                  "clednee",
                  "uncepist",
                  "epteria",
                  "ionity",
                  "tationsh"
                ],
                "ropile_able": [
                  "clednee",
                  "mindly",
                  "eriant"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "dedulag",
                  "variable": "e",
                  "mutability": "dedulag_able"
                },
                {
                  "predicate_id": "ecastic",
                  "variable": "e",
                  "mutability": "ecastic_able"
                },
                {
                  "predicate_id": "phothipy",
                  "variable": "e",
                  "mutability": "ecastic_able"
                },
                {
                  "predicate_id": "ropile",
                  "variable": "e",
                  "mutability": "ropile_able"
                },
                {
                  "predicate_id": "fuster",
                  "variable": "e",
                  "mutability": "ropile_able"
                },
                {
                  "predicate_id": "rancal",
                  "variable": "e",
                  "mutability": "ropile_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can udial, aterous, ingnus, ivess, ceorid and unmastic.\n\nYour goal for this game is: Make the pholoiced connone, the aeval proggiced and the rheably exsem.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(ousles1,erove1)",
            "at(roofid1,omenan1)",
            "at(pholoiced1,peroury1)",
            "at(shromen1,peroury1)",
            "at(eical1,peroury1)",
            "at(oidess1,peroury1)",
            "at(versch1,peroury1)",
            "at(rheably1,apsing1)",
            "at(soest1,erove1)",
            "at(aeval1,peroury1)",
            "at(player1,peroury1)",
            "type(player1,player)",
            "type(aeval1,aeval)",
            "type(soest1,soest)",
            "type(rheably1,rheably)",
            "type(versch1,versch)",
            "type(oidess1,oidess)",
            "type(eical1,eical)",
            "type(shromen1,shromen)",
            "type(pholoiced1,pholoiced)",
            "type(roofid1,roofid)",
            "type(ousles1,ousles)",
            "room(erove1,erove)",
            "room(omenan1,omenan)",
            "room(apsing1,apsing)",
            "room(peroury1,peroury)",
            "exsem(roofid1)",
            "exsem(shromen1)",
            "exsem(eical1)",
            "exsem(oidess1)",
            "thighth(versch1)",
            "thighth(rheably1)",
            "connone(ousles1)",
            "dingnessy(versch1)",
            "alomeny(pholoiced1)",
            "exit(erove1,omenan1)",
            "exit(omenan1,erove1)",
            "exit(apsing1,omenan1)",
            "exit(peroury1,erove1)",
            "exit(erove1,peroury1)",
            "exit(omenan1,apsing1)",
            "proggiced_able(aeval1)",
            "proggiced_able(soest1)",
            "proggiced_able(rheably1)",
            "proggiced_able(oidess1)",
            "proggiced_able(pholoiced1)",
            "proggiced_able(roofid1)",
            "exsem_able(rheably1)",
            "exsem_able(versch1)",
            "exsem_able(oidess1)",
            "exsem_able(eical1)",
            "exsem_able(shromen1)",
            "exsem_able(roofid1)",
            "connone_able(versch1)",
            "connone_able(pholoiced1)",
            "connone_able(ousles1)"
          ],
          "goal_state": [
            "proggiced(aeval1)",
            "exsem(rheably1)",
            "connone(pholoiced1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "udial",
              "aeval1"
            ],
            [
              "aterous",
              "pholoiced1"
            ],
            [
              "go",
              "erove1"
            ],
            [
              "go",
              "omenan1"
            ],
            [
              "go",
              "apsing1"
            ],
            [
              "unmastic",
              "rheably1"
            ]
          ],
          "optimal_commands": [
            "udial aeval",
            "aterous pholoiced",
            "go erove",
            "go omenan",
            "go apsing",
            "unmastic rheably"
          ],
          "action_definitions": [
            {
              "lark": "udial: UDIAL thing\nUDIAL.1: \"udial\" WS",
              "pddl": "(:action UDIAL\n    :parameters (?e - proggiced_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (proggiced ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not proggiced-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now proggiced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To udial is to make something proggiced_able proggiced.",
              "asp": "{ action_t(TURN,udial,THING):at_t(TURN,THING,ROOM),proggiced_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nproggiced_t(TURN+1,THING) :- action_t(TURN,udial,THING).\nproggiced_t(TURN+1,THING) :- turn(TURN), proggiced_t(TURN,THING).",
              "type_name": "udial"
            },
            {
              "lark": "ivess: IVESS thing\nIVESS.1: \"ivess\" WS",
              "pddl": "(:action IVESS\n    :parameters (?e - exsem_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (exsem ?e)\n        )\n    :effect (and\n        (thighth ?e)\n        (not (exsem ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not exsem-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not exsem.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now thighth.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ivess is to make something exsem_able and exsem be thighth.",
              "asp": "{ action_t(TURN,ivess,THING):at_t(TURN,THING,ROOM),exsem_able(THING),exsem_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nthighth_t(TURN+1,THING) :- action_t(TURN,ivess,THING).\nexsem_t(TURN+1,THING) :- turn(TURN), exsem_t(TURN,THING), not action_t(TURN,ivess,THING).",
              "type_name": "ivess"
            },
            {
              "lark": "unmastic: UNMASTIC thing\nUNMASTIC.1: \"unmastic\" WS",
              "pddl": "(:action UNMASTIC\n    :parameters (?e - exsem_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (thighth ?e)\n        )\n    :effect (and\n        (exsem ?e)\n        (not (thighth ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not exsem-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not thighth.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now exsem.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To unmastic is to make something exsem_able and thighth be exsem.",
              "asp": "{ action_t(TURN,unmastic,THING):at_t(TURN,THING,ROOM),exsem_able(THING),thighth_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nexsem_t(TURN+1,THING) :- action_t(TURN,unmastic,THING).\nthighth_t(TURN+1,THING) :- turn(TURN), thighth_t(TURN,THING), not action_t(TURN,unmastic,THING).",
              "type_name": "unmastic"
            },
            {
              "lark": "ceorid: CEORID thing\nCEORID.1: \"ceorid\" WS",
              "pddl": "(:action CEORID\n    :parameters (?e - connone_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (connone ?e)\n        )\n    :effect (and\n        (dingnessy ?e)\n        (not (connone ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not connone-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not connone.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now dingnessy.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ceorid is to make something connone_able and connone be dingnessy.",
              "asp": "{ action_t(TURN,ceorid,THING):at_t(TURN,THING,ROOM),connone_able(THING),connone_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ndingnessy_t(TURN+1,THING) :- action_t(TURN,ceorid,THING).\nconnone_t(TURN+1,THING) :- turn(TURN), connone_t(TURN,THING), not action_t(TURN,ceorid,THING).",
              "type_name": "ceorid"
            },
            {
              "lark": "ingnus: INGNUS thing\nINGNUS.1: \"ingnus\" WS",
              "pddl": "(:action INGNUS\n    :parameters (?e - connone_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (dingnessy ?e)\n        )\n    :effect (and\n        (alomeny ?e)\n        (not (dingnessy ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not connone-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not dingnessy.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now alomeny.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ingnus is to make something connone_able and dingnessy be alomeny.",
              "asp": "{ action_t(TURN,ingnus,THING):at_t(TURN,THING,ROOM),connone_able(THING),dingnessy_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nalomeny_t(TURN+1,THING) :- action_t(TURN,ingnus,THING).\ndingnessy_t(TURN+1,THING) :- turn(TURN), dingnessy_t(TURN,THING), not action_t(TURN,ingnus,THING).",
              "type_name": "ingnus"
            },
            {
              "lark": "aterous: ATEROUS thing\nATEROUS.1: \"aterous\" WS",
              "pddl": "(:action ATEROUS\n    :parameters (?e - connone_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (alomeny ?e)\n        )\n    :effect (and\n        (connone ?e)\n        (not (alomeny ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not connone-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not alomeny.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now connone.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To aterous is to make something connone_able and alomeny be connone.",
              "asp": "{ action_t(TURN,aterous,THING):at_t(TURN,THING,ROOM),connone_able(THING),alomeny_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nconnone_t(TURN+1,THING) :- action_t(TURN,aterous,THING).\nalomeny_t(TURN+1,THING) :- turn(TURN), alomeny_t(TURN,THING), not action_t(TURN,aterous,THING).",
              "type_name": "aterous"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "erove",
              "exit_targets": [
                "apsing",
                "omenan"
              ],
              "max_connections": 1,
              "type_name": "erove"
            },
            {
              "repr_str": "omenan",
              "exit_targets": [
                "erove"
              ],
              "max_connections": 3,
              "type_name": "omenan"
            },
            {
              "repr_str": "apsing",
              "exit_targets": [
                "omenan",
                "peroury"
              ],
              "max_connections": 2,
              "type_name": "apsing"
            },
            {
              "repr_str": "peroury",
              "exit_targets": [
                "apsing",
                "omenan",
                "erove"
              ],
              "max_connections": 2,
              "type_name": "peroury"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "aeval",
              "traits": [
                "proggiced_able"
              ],
              "standard_locations": [
                "omenan",
                "peroury"
              ],
              "type_name": "aeval"
            },
            {
              "repr_str": "soest",
              "traits": [
                "proggiced_able"
              ],
              "standard_locations": [
                "erove"
              ],
              "type_name": "soest"
            },
            {
              "repr_str": "rheably",
              "traits": [
                "exsem_able",
                "proggiced_able"
              ],
              "standard_locations": [
                "peroury",
                "apsing"
              ],
              "type_name": "rheably"
            },
            {
              "repr_str": "versch",
              "traits": [
                "exsem_able",
                "connone_able"
              ],
              "standard_locations": [
                "peroury"
              ],
              "type_name": "versch"
            },
            {
              "repr_str": "oidess",
              "traits": [
                "exsem_able",
                "proggiced_able"
              ],
              "standard_locations": [
                "peroury",
                "omenan"
              ],
              "type_name": "oidess"
            },
            {
              "repr_str": "eical",
              "traits": [
                "exsem_able"
              ],
              "standard_locations": [
                "erove",
                "peroury"
              ],
              "type_name": "eical"
            },
            {
              "repr_str": "shromen",
              "traits": [
                "exsem_able"
              ],
              "standard_locations": [
                "peroury"
              ],
              "type_name": "shromen"
            },
            {
              "repr_str": "pholoiced",
              "traits": [
                "connone_able",
                "proggiced_able"
              ],
              "standard_locations": [
                "peroury"
              ],
              "type_name": "pholoiced"
            },
            {
              "repr_str": "roofid",
              "traits": [
                "proggiced_able",
                "exsem_able"
              ],
              "standard_locations": [
                "omenan"
              ],
              "type_name": "roofid"
            },
            {
              "repr_str": "ousles",
              "traits": [
                "connone_able"
              ],
              "standard_locations": [
                "erove",
                "apsing"
              ],
              "type_name": "ousles"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "erove",
                  "omenan",
                  "apsing",
                  "peroury"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "aeval",
                  "soest",
                  "rheably",
                  "versch",
                  "oidess",
                  "eical",
                  "shromen",
                  "pholoiced",
                  "roofid",
                  "ousles",
                  "player",
                  "inventory",
                  "floor"
                ],
                "proggiced_able": [
                  "aeval",
                  "soest",
                  "rheably",
                  "oidess",
                  "pholoiced",
                  "roofid"
                ],
                "exsem_able": [
                  "rheably",
                  "versch",
                  "oidess",
                  "eical",
                  "shromen",
                  "roofid"
                ],
                "connone_able": [
                  "versch",
                  "pholoiced",
                  "ousles"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "proggiced",
                  "variable": "e",
                  "mutability": "proggiced_able"
                },
                {
                  "predicate_id": "exsem",
                  "variable": "e",
                  "mutability": "exsem_able"
                },
                {
                  "predicate_id": "thighth",
                  "variable": "e",
                  "mutability": "exsem_able"
                },
                {
                  "predicate_id": "connone",
                  "variable": "e",
                  "mutability": "connone_able"
                },
                {
                  "predicate_id": "dingnessy",
                  "variable": "e",
                  "mutability": "connone_able"
                },
                {
                  "predicate_id": "alomeny",
                  "variable": "e",
                  "mutability": "connone_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can amyoid, jolene, tritioush, oryter, atheris and urseum.\n\nYour goal for this game is: Make the utist hetioner, the icess tubilly and the anonaticed ippet.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(obilard1,oidemat1)",
            "at(robve1,chlove1)",
            "at(icess1,endroust1)",
            "at(lableve1,endroust1)",
            "at(stoaced1,endroust1)",
            "at(atedist1,endroust1)",
            "at(coepticed1,endroust1)",
            "at(anonaticed1,menzinee1)",
            "at(linkly1,oidemat1)",
            "at(utist1,endroust1)",
            "at(player1,endroust1)",
            "type(player1,player)",
            "type(utist1,utist)",
            "type(linkly1,linkly)",
            "type(anonaticed1,anonaticed)",
            "type(coepticed1,coepticed)",
            "type(atedist1,atedist)",
            "type(stoaced1,stoaced)",
            "type(lableve1,lableve)",
            "type(icess1,icess)",
            "type(robve1,robve)",
            "type(obilard1,obilard)",
            "room(oidemat1,oidemat)",
            "room(chlove1,chlove)",
            "room(menzinee1,menzinee)",
            "room(endroust1,endroust)",
            "ippet(robve1)",
            "ippet(lableve1)",
            "ippet(stoaced1)",
            "ippet(atedist1)",
            "hoxopal(coepticed1)",
            "hoxopal(anonaticed1)",
            "tubilly(obilard1)",
            "phorpiced(coepticed1)",
            "alidow(icess1)",
            "exit(oidemat1,chlove1)",
            "exit(chlove1,oidemat1)",
            "exit(menzinee1,chlove1)",
            "exit(endroust1,oidemat1)",
            "exit(oidemat1,endroust1)",
            "exit(chlove1,menzinee1)",
            "hetioner_able(utist1)",
            "hetioner_able(linkly1)",
            "hetioner_able(anonaticed1)",
            "hetioner_able(atedist1)",
            "hetioner_able(icess1)",
            "hetioner_able(robve1)",
            "ippet_able(anonaticed1)",
            "ippet_able(coepticed1)",
            "ippet_able(atedist1)",
            "ippet_able(stoaced1)",
            "ippet_able(lableve1)",
            "ippet_able(robve1)",
            "tubilly_able(coepticed1)",
            "tubilly_able(icess1)",
            "tubilly_able(obilard1)"
          ],
          "goal_state": [
            "hetioner(utist1)",
            "ippet(anonaticed1)",
            "tubilly(icess1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "oryter",
              "utist1"
            ],
            [
              "urseum",
              "icess1"
            ],
            [
              "go",
              "oidemat1"
            ],
            [
              "go",
              "chlove1"
            ],
            [
              "go",
              "menzinee1"
            ],
            [
              "tritioush",
              "anonaticed1"
            ]
          ],
          "optimal_commands": [
            "oryter utist",
            "urseum icess",
            "go oidemat",
            "go chlove",
            "go menzinee",
            "tritioush anonaticed"
          ],
          "action_definitions": [
            {
              "lark": "oryter: ORYTER thing\nORYTER.1: \"oryter\" WS",
              "pddl": "(:action ORYTER\n    :parameters (?e - hetioner_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (hetioner ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not hetioner-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now hetioner.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To oryter is to make something hetioner_able hetioner.",
              "asp": "{ action_t(TURN,oryter,THING):at_t(TURN,THING,ROOM),hetioner_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nhetioner_t(TURN+1,THING) :- action_t(TURN,oryter,THING).\nhetioner_t(TURN+1,THING) :- turn(TURN), hetioner_t(TURN,THING).",
              "type_name": "oryter"
            },
            {
              "lark": "atheris: ATHERIS thing\nATHERIS.1: \"atheris\" WS",
              "pddl": "(:action ATHERIS\n    :parameters (?e - ippet_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ippet ?e)\n        )\n    :effect (and\n        (hoxopal ?e)\n        (not (ippet ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ippet-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ippet.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now hoxopal.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To atheris is to make something ippet_able and ippet be hoxopal.",
              "asp": "{ action_t(TURN,atheris,THING):at_t(TURN,THING,ROOM),ippet_able(THING),ippet_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nhoxopal_t(TURN+1,THING) :- action_t(TURN,atheris,THING).\nippet_t(TURN+1,THING) :- turn(TURN), ippet_t(TURN,THING), not action_t(TURN,atheris,THING).",
              "type_name": "atheris"
            },
            {
              "lark": "tritioush: TRITIOUSH thing\nTRITIOUSH.1: \"tritioush\" WS",
              "pddl": "(:action TRITIOUSH\n    :parameters (?e - ippet_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (hoxopal ?e)\n        )\n    :effect (and\n        (ippet ?e)\n        (not (hoxopal ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ippet-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not hoxopal.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ippet.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tritioush is to make something ippet_able and hoxopal be ippet.",
              "asp": "{ action_t(TURN,tritioush,THING):at_t(TURN,THING,ROOM),ippet_able(THING),hoxopal_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nippet_t(TURN+1,THING) :- action_t(TURN,tritioush,THING).\nhoxopal_t(TURN+1,THING) :- turn(TURN), hoxopal_t(TURN,THING), not action_t(TURN,tritioush,THING).",
              "type_name": "tritioush"
            },
            {
              "lark": "jolene: JOLENE thing\nJOLENE.1: \"jolene\" WS",
              "pddl": "(:action JOLENE\n    :parameters (?e - tubilly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (tubilly ?e)\n        )\n    :effect (and\n        (phorpiced ?e)\n        (not (tubilly ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not tubilly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not tubilly.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now phorpiced.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To jolene is to make something tubilly_able and tubilly be phorpiced.",
              "asp": "{ action_t(TURN,jolene,THING):at_t(TURN,THING,ROOM),tubilly_able(THING),tubilly_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nphorpiced_t(TURN+1,THING) :- action_t(TURN,jolene,THING).\ntubilly_t(TURN+1,THING) :- turn(TURN), tubilly_t(TURN,THING), not action_t(TURN,jolene,THING).",
              "type_name": "jolene"
            },
            {
              "lark": "amyoid: AMYOID thing\nAMYOID.1: \"amyoid\" WS",
              "pddl": "(:action AMYOID\n    :parameters (?e - tubilly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (phorpiced ?e)\n        )\n    :effect (and\n        (alidow ?e)\n        (not (phorpiced ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not tubilly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not phorpiced.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now alidow.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To amyoid is to make something tubilly_able and phorpiced be alidow.",
              "asp": "{ action_t(TURN,amyoid,THING):at_t(TURN,THING,ROOM),tubilly_able(THING),phorpiced_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nalidow_t(TURN+1,THING) :- action_t(TURN,amyoid,THING).\nphorpiced_t(TURN+1,THING) :- turn(TURN), phorpiced_t(TURN,THING), not action_t(TURN,amyoid,THING).",
              "type_name": "amyoid"
            },
            {
              "lark": "urseum: URSEUM thing\nURSEUM.1: \"urseum\" WS",
              "pddl": "(:action URSEUM\n    :parameters (?e - tubilly_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (alidow ?e)\n        )\n    :effect (and\n        (tubilly ?e)\n        (not (alidow ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not tubilly-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not alidow.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now tubilly.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To urseum is to make something tubilly_able and alidow be tubilly.",
              "asp": "{ action_t(TURN,urseum,THING):at_t(TURN,THING,ROOM),tubilly_able(THING),alidow_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ntubilly_t(TURN+1,THING) :- action_t(TURN,urseum,THING).\nalidow_t(TURN+1,THING) :- turn(TURN), alidow_t(TURN,THING), not action_t(TURN,urseum,THING).",
              "type_name": "urseum"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "oidemat",
              "exit_targets": [
                "menzinee",
                "chlove"
              ],
              "max_connections": 1,
              "type_name": "oidemat"
            },
            {
              "repr_str": "chlove",
              "exit_targets": [
                "oidemat"
              ],
              "max_connections": 3,
              "type_name": "chlove"
            },
            {
              "repr_str": "menzinee",
              "exit_targets": [
                "chlove",
                "endroust"
              ],
              "max_connections": 2,
              "type_name": "menzinee"
            },
            {
              "repr_str": "endroust",
              "exit_targets": [
                "menzinee",
                "chlove",
                "oidemat"
              ],
              "max_connections": 2,
              "type_name": "endroust"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "utist",
              "traits": [
                "hetioner_able"
              ],
              "standard_locations": [
                "chlove",
                "endroust"
              ],
              "type_name": "utist"
            },
            {
              "repr_str": "linkly",
              "traits": [
                "hetioner_able"
              ],
              "standard_locations": [
                "oidemat"
              ],
              "type_name": "linkly"
            },
            {
              "repr_str": "anonaticed",
              "traits": [
                "ippet_able",
                "hetioner_able"
              ],
              "standard_locations": [
                "endroust",
                "menzinee"
              ],
              "type_name": "anonaticed"
            },
            {
              "repr_str": "coepticed",
              "traits": [
                "ippet_able",
                "tubilly_able"
              ],
              "standard_locations": [
                "endroust"
              ],
              "type_name": "coepticed"
            },
            {
              "repr_str": "atedist",
              "traits": [
                "ippet_able",
                "hetioner_able"
              ],
              "standard_locations": [
                "endroust",
                "chlove"
              ],
              "type_name": "atedist"
            },
            {
              "repr_str": "stoaced",
              "traits": [
                "ippet_able"
              ],
              "standard_locations": [
                "oidemat",
                "endroust"
              ],
              "type_name": "stoaced"
            },
            {
              "repr_str": "lableve",
              "traits": [
                "ippet_able"
              ],
              "standard_locations": [
                "endroust"
              ],
              "type_name": "lableve"
            },
            {
              "repr_str": "icess",
              "traits": [
                "tubilly_able",
                "hetioner_able"
              ],
              "standard_locations": [
                "endroust"
              ],
              "type_name": "icess"
            },
            {
              "repr_str": "robve",
              "traits": [
                "hetioner_able",
                "ippet_able"
              ],
              "standard_locations": [
                "chlove"
              ],
              "type_name": "robve"
            },
            {
              "repr_str": "obilard",
              "traits": [
                "tubilly_able"
              ],
              "standard_locations": [
                "oidemat",
                "menzinee"
              ],
              "type_name": "obilard"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "oidemat",
                  "chlove",
                  "menzinee",
                  "endroust"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "utist",
                  "linkly",
                  "anonaticed",
                  "coepticed",
                  "atedist",
                  "stoaced",
                  "lableve",
                  "icess",
                  "robve",
                  "obilard",
                  "player",
                  "inventory",
                  "floor"
                ],
                "hetioner_able": [
                  "utist",
                  "linkly",
                  "anonaticed",
                  "atedist",
                  "icess",
                  "robve"
                ],
                "ippet_able": [
                  "anonaticed",
                  "coepticed",
                  "atedist",
                  "stoaced",
                  "lableve",
                  "robve"
                ],
                "tubilly_able": [
                  "coepticed",
                  "icess",
                  "obilard"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "hetioner",
                  "variable": "e",
                  "mutability": "hetioner_able"
                },
                {
                  "predicate_id": "ippet",
                  "variable": "e",
                  "mutability": "ippet_able"
                },
                {
                  "predicate_id": "hoxopal",
                  "variable": "e",
                  "mutability": "ippet_able"
                },
                {
                  "predicate_id": "tubilly",
                  "variable": "e",
                  "mutability": "tubilly_able"
                },
                {
                  "predicate_id": "phorpiced",
                  "variable": "e",
                  "mutability": "tubilly_able"
                },
                {
                  "predicate_id": "alidow",
                  "variable": "e",
                  "mutability": "tubilly_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can eredle, unsibion, phophous, isecin, horehet and indiable.\n\nYour goal for this game is: Make the rimess horpler, the urermat ytoust and the loscred tibing.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(ragmat1,gligiced1)",
            "at(entabul1,urgily1)",
            "at(loscred1,discroust1)",
            "at(suncente1,discroust1)",
            "at(eposper1,discroust1)",
            "at(hidist1,discroust1)",
            "at(conitity1,discroust1)",
            "at(rimess1,ibret1)",
            "at(thempary1,gligiced1)",
            "at(urermat1,discroust1)",
            "at(player1,discroust1)",
            "type(player1,player)",
            "type(urermat1,urermat)",
            "type(thempary1,thempary)",
            "type(rimess1,rimess)",
            "type(conitity1,conitity)",
            "type(hidist1,hidist)",
            "type(eposper1,eposper)",
            "type(suncente1,suncente)",
            "type(loscred1,loscred)",
            "type(entabul1,entabul)",
            "type(ragmat1,ragmat)",
            "room(gligiced1,gligiced)",
            "room(urgily1,urgily)",
            "room(ibret1,ibret)",
            "room(discroust1,discroust)",
            "horpler(entabul1)",
            "horpler(suncente1)",
            "horpler(eposper1)",
            "horpler(hidist1)",
            "suatocky(conitity1)",
            "suatocky(rimess1)",
            "tibing(ragmat1)",
            "orposee(conitity1)",
            "oanicky(loscred1)",
            "exit(gligiced1,urgily1)",
            "exit(urgily1,gligiced1)",
            "exit(ibret1,urgily1)",
            "exit(discroust1,gligiced1)",
            "exit(gligiced1,discroust1)",
            "exit(urgily1,ibret1)",
            "ytoust_able(urermat1)",
            "ytoust_able(thempary1)",
            "ytoust_able(rimess1)",
            "ytoust_able(hidist1)",
            "ytoust_able(loscred1)",
            "ytoust_able(entabul1)",
            "horpler_able(rimess1)",
            "horpler_able(conitity1)",
            "horpler_able(hidist1)",
            "horpler_able(eposper1)",
            "horpler_able(suncente1)",
            "horpler_able(entabul1)",
            "tibing_able(conitity1)",
            "tibing_able(loscred1)",
            "tibing_able(ragmat1)"
          ],
          "goal_state": [
            "ytoust(urermat1)",
            "horpler(rimess1)",
            "tibing(loscred1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "eredle",
              "urermat1"
            ],
            [
              "indiable",
              "loscred1"
            ],
            [
              "go",
              "gligiced1"
            ],
            [
              "go",
              "urgily1"
            ],
            [
              "go",
              "ibret1"
            ],
            [
              "phophous",
              "rimess1"
            ]
          ],
          "optimal_commands": [
            "eredle urermat",
            "indiable loscred",
            "go gligiced",
            "go urgily",
            "go ibret",
            "phophous rimess"
          ],
          "action_definitions": [
            {
              "lark": "eredle: EREDLE thing\nEREDLE.1: \"eredle\" WS",
              "pddl": "(:action EREDLE\n    :parameters (?e - ytoust_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (ytoust ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not ytoust-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ytoust.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To eredle is to make something ytoust_able ytoust.",
              "asp": "{ action_t(TURN,eredle,THING):at_t(TURN,THING,ROOM),ytoust_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nytoust_t(TURN+1,THING) :- action_t(TURN,eredle,THING).\nytoust_t(TURN+1,THING) :- turn(TURN), ytoust_t(TURN,THING).",
              "type_name": "eredle"
            },
            {
              "lark": "unsibion: UNSIBION thing\nUNSIBION.1: \"unsibion\" WS",
              "pddl": "(:action UNSIBION\n    :parameters (?e - horpler_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (horpler ?e)\n        )\n    :effect (and\n        (suatocky ?e)\n        (not (horpler ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not horpler-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not horpler.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now suatocky.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To unsibion is to make something horpler_able and horpler be suatocky.",
              "asp": "{ action_t(TURN,unsibion,THING):at_t(TURN,THING,ROOM),horpler_able(THING),horpler_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nsuatocky_t(TURN+1,THING) :- action_t(TURN,unsibion,THING).\nhorpler_t(TURN+1,THING) :- turn(TURN), horpler_t(TURN,THING), not action_t(TURN,unsibion,THING).",
              "type_name": "unsibion"
            },
            {
              "lark": "phophous: PHOPHOUS thing\nPHOPHOUS.1: \"phophous\" WS",
              "pddl": "(:action PHOPHOUS\n    :parameters (?e - horpler_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (suatocky ?e)\n        )\n    :effect (and\n        (horpler ?e)\n        (not (suatocky ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not horpler-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not suatocky.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now horpler.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To phophous is to make something horpler_able and suatocky be horpler.",
              "asp": "{ action_t(TURN,phophous,THING):at_t(TURN,THING,ROOM),horpler_able(THING),suatocky_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nhorpler_t(TURN+1,THING) :- action_t(TURN,phophous,THING).\nsuatocky_t(TURN+1,THING) :- turn(TURN), suatocky_t(TURN,THING), not action_t(TURN,phophous,THING).",
              "type_name": "phophous"
            },
            {
              "lark": "isecin: ISECIN thing\nISECIN.1: \"isecin\" WS",
              "pddl": "(:action ISECIN\n    :parameters (?e - tibing_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (tibing ?e)\n        )\n    :effect (and\n        (orposee ?e)\n        (not (tibing ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not tibing-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not tibing.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now orposee.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To isecin is to make something tibing_able and tibing be orposee.",
              "asp": "{ action_t(TURN,isecin,THING):at_t(TURN,THING,ROOM),tibing_able(THING),tibing_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\norposee_t(TURN+1,THING) :- action_t(TURN,isecin,THING).\ntibing_t(TURN+1,THING) :- turn(TURN), tibing_t(TURN,THING), not action_t(TURN,isecin,THING).",
              "type_name": "isecin"
            },
            {
              "lark": "horehet: HOREHET thing\nHOREHET.1: \"horehet\" WS",
              "pddl": "(:action HOREHET\n    :parameters (?e - tibing_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (orposee ?e)\n        )\n    :effect (and\n        (oanicky ?e)\n        (not (orposee ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not tibing-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not orposee.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now oanicky.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To horehet is to make something tibing_able and orposee be oanicky.",
              "asp": "{ action_t(TURN,horehet,THING):at_t(TURN,THING,ROOM),tibing_able(THING),orposee_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\noanicky_t(TURN+1,THING) :- action_t(TURN,horehet,THING).\norposee_t(TURN+1,THING) :- turn(TURN), orposee_t(TURN,THING), not action_t(TURN,horehet,THING).",
              "type_name": "horehet"
            },
            {
              "lark": "indiable: INDIABLE thing\nINDIABLE.1: \"indiable\" WS",
              "pddl": "(:action INDIABLE\n    :parameters (?e - tibing_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (oanicky ?e)\n        )\n    :effect (and\n        (tibing ?e)\n        (not (oanicky ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not tibing-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not oanicky.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now tibing.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To indiable is to make something tibing_able and oanicky be tibing.",
              "asp": "{ action_t(TURN,indiable,THING):at_t(TURN,THING,ROOM),tibing_able(THING),oanicky_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ntibing_t(TURN+1,THING) :- action_t(TURN,indiable,THING).\noanicky_t(TURN+1,THING) :- turn(TURN), oanicky_t(TURN,THING), not action_t(TURN,indiable,THING).",
              "type_name": "indiable"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "gligiced",
              "exit_targets": [
                "ibret",
                "urgily"
              ],
              "max_connections": 1,
              "type_name": "gligiced"
            },
            {
              "repr_str": "urgily",
              "exit_targets": [
                "gligiced"
              ],
              "max_connections": 3,
              "type_name": "urgily"
            },
            {
              "repr_str": "ibret",
              "exit_targets": [
                "urgily",
                "discroust"
              ],
              "max_connections": 2,
              "type_name": "ibret"
            },
            {
              "repr_str": "discroust",
              "exit_targets": [
                "ibret",
                "urgily",
                "gligiced"
              ],
              "max_connections": 2,
              "type_name": "discroust"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "urermat",
              "traits": [
                "ytoust_able"
              ],
              "standard_locations": [
                "urgily",
                "discroust"
              ],
              "type_name": "urermat"
            },
            {
              "repr_str": "thempary",
              "traits": [
                "ytoust_able"
              ],
              "standard_locations": [
                "gligiced"
              ],
              "type_name": "thempary"
            },
            {
              "repr_str": "rimess",
              "traits": [
                "horpler_able",
                "ytoust_able"
              ],
              "standard_locations": [
                "discroust",
                "ibret"
              ],
              "type_name": "rimess"
            },
            {
              "repr_str": "conitity",
              "traits": [
                "horpler_able",
                "tibing_able"
              ],
              "standard_locations": [
                "discroust"
              ],
              "type_name": "conitity"
            },
            {
              "repr_str": "hidist",
              "traits": [
                "horpler_able",
                "ytoust_able"
              ],
              "standard_locations": [
                "discroust",
                "urgily"
              ],
              "type_name": "hidist"
            },
            {
              "repr_str": "eposper",
              "traits": [
                "horpler_able"
              ],
              "standard_locations": [
                "gligiced",
                "discroust"
              ],
              "type_name": "eposper"
            },
            {
              "repr_str": "suncente",
              "traits": [
                "horpler_able"
              ],
              "standard_locations": [
                "discroust"
              ],
              "type_name": "suncente"
            },
            {
              "repr_str": "loscred",
              "traits": [
                "tibing_able",
                "ytoust_able"
              ],
              "standard_locations": [
                "discroust"
              ],
              "type_name": "loscred"
            },
            {
              "repr_str": "entabul",
              "traits": [
                "ytoust_able",
                "horpler_able"
              ],
              "standard_locations": [
                "urgily"
              ],
              "type_name": "entabul"
            },
            {
              "repr_str": "ragmat",
              "traits": [
                "tibing_able"
              ],
              "standard_locations": [
                "gligiced",
                "ibret"
              ],
              "type_name": "ragmat"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "gligiced",
                  "urgily",
                  "ibret",
                  "discroust"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "urermat",
                  "thempary",
                  "rimess",
                  "conitity",
                  "hidist",
                  "eposper",
                  "suncente",
                  "loscred",
                  "entabul",
                  "ragmat",
                  "player",
                  "inventory",
                  "floor"
                ],
                "ytoust_able": [
                  "urermat",
                  "thempary",
                  "rimess",
                  "hidist",
                  "loscred",
                  "entabul"
                ],
                "horpler_able": [
                  "rimess",
                  "conitity",
                  "hidist",
                  "eposper",
                  "suncente",
                  "entabul"
                ],
                "tibing_able": [
                  "conitity",
                  "loscred",
                  "ragmat"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "ytoust",
                  "variable": "e",
                  "mutability": "ytoust_able"
                },
                {
                  "predicate_id": "horpler",
                  "variable": "e",
                  "mutability": "horpler_able"
                },
                {
                  "predicate_id": "suatocky",
                  "variable": "e",
                  "mutability": "horpler_able"
                },
                {
                  "predicate_id": "tibing",
                  "variable": "e",
                  "mutability": "tibing_able"
                },
                {
                  "predicate_id": "orposee",
                  "variable": "e",
                  "mutability": "tibing_able"
                },
                {
                  "predicate_id": "oanicky",
                  "variable": "e",
                  "mutability": "tibing_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can alitst, lophante, rhypnon, ophabor, ompous and hoadve.\n\nYour goal for this game is: Make the rakeer skenic, the asceles tinhal and the mituark mationymb.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(mementiced1,trapseng1)",
            "at(untastion1,ammidiced1)",
            "at(mituark1,heccop1)",
            "at(otioct1,heccop1)",
            "at(inagness1,heccop1)",
            "at(horbact1,heccop1)",
            "at(ctaticed1,heccop1)",
            "at(rakeer1,nontroust1)",
            "at(cenotor1,trapseng1)",
            "at(asceles1,heccop1)",
            "at(player1,heccop1)",
            "type(player1,player)",
            "type(asceles1,asceles)",
            "type(cenotor1,cenotor)",
            "type(rakeer1,rakeer)",
            "type(ctaticed1,ctaticed)",
            "type(horbact1,horbact)",
            "type(inagness1,inagness)",
            "type(otioct1,otioct)",
            "type(mituark1,mituark)",
            "type(untastion1,untastion)",
            "type(mementiced1,mementiced)",
            "room(trapseng1,trapseng)",
            "room(ammidiced1,ammidiced)",
            "room(nontroust1,nontroust)",
            "room(heccop1,heccop)",
            "skenic(untastion1)",
            "skenic(otioct1)",
            "skenic(inagness1)",
            "skenic(horbact1)",
            "icarity(ctaticed1)",
            "icarity(rakeer1)",
            "mationymb(mementiced1)",
            "bactiogy(ctaticed1)",
            "trendol(mituark1)",
            "exit(trapseng1,ammidiced1)",
            "exit(ammidiced1,trapseng1)",
            "exit(nontroust1,ammidiced1)",
            "exit(heccop1,trapseng1)",
            "exit(trapseng1,heccop1)",
            "exit(ammidiced1,nontroust1)",
            "tinhal_able(asceles1)",
            "tinhal_able(cenotor1)",
            "tinhal_able(rakeer1)",
            "tinhal_able(horbact1)",
            "tinhal_able(mituark1)",
            "tinhal_able(untastion1)",
            "skenic_able(rakeer1)",
            "skenic_able(ctaticed1)",
            "skenic_able(horbact1)",
            "skenic_able(inagness1)",
            "skenic_able(otioct1)",
            "skenic_able(untastion1)",
            "mationymb_able(ctaticed1)",
            "mationymb_able(mituark1)",
            "mationymb_able(mementiced1)"
          ],
          "goal_state": [
            "tinhal(asceles1)",
            "skenic(rakeer1)",
            "mationymb(mituark1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "lophante",
              "asceles1"
            ],
            [
              "rhypnon",
              "mituark1"
            ],
            [
              "go",
              "trapseng1"
            ],
            [
              "go",
              "ammidiced1"
            ],
            [
              "go",
              "nontroust1"
            ],
            [
              "hoadve",
              "rakeer1"
            ]
          ],
          "optimal_commands": [
            "lophante asceles",
            "rhypnon mituark",
            "go trapseng",
            "go ammidiced",
            "go nontroust",
            "hoadve rakeer"
          ],
          "action_definitions": [
            {
              "lark": "lophante: LOPHANTE thing\nLOPHANTE.1: \"lophante\" WS",
              "pddl": "(:action LOPHANTE\n    :parameters (?e - tinhal_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (tinhal ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not tinhal-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now tinhal.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lophante is to make something tinhal_able tinhal.",
              "asp": "{ action_t(TURN,lophante,THING):at_t(TURN,THING,ROOM),tinhal_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ntinhal_t(TURN+1,THING) :- action_t(TURN,lophante,THING).\ntinhal_t(TURN+1,THING) :- turn(TURN), tinhal_t(TURN,THING).",
              "type_name": "lophante"
            },
            {
              "lark": "alitst: ALITST thing\nALITST.1: \"alitst\" WS",
              "pddl": "(:action ALITST\n    :parameters (?e - skenic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (skenic ?e)\n        )\n    :effect (and\n        (icarity ?e)\n        (not (skenic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not skenic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not skenic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now icarity.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To alitst is to make something skenic_able and skenic be icarity.",
              "asp": "{ action_t(TURN,alitst,THING):at_t(TURN,THING,ROOM),skenic_able(THING),skenic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nicarity_t(TURN+1,THING) :- action_t(TURN,alitst,THING).\nskenic_t(TURN+1,THING) :- turn(TURN), skenic_t(TURN,THING), not action_t(TURN,alitst,THING).",
              "type_name": "alitst"
            },
            {
              "lark": "hoadve: HOADVE thing\nHOADVE.1: \"hoadve\" WS",
              "pddl": "(:action HOADVE\n    :parameters (?e - skenic_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (icarity ?e)\n        )\n    :effect (and\n        (skenic ?e)\n        (not (icarity ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not skenic-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not icarity.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now skenic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To hoadve is to make something skenic_able and icarity be skenic.",
              "asp": "{ action_t(TURN,hoadve,THING):at_t(TURN,THING,ROOM),skenic_able(THING),icarity_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nskenic_t(TURN+1,THING) :- action_t(TURN,hoadve,THING).\nicarity_t(TURN+1,THING) :- turn(TURN), icarity_t(TURN,THING), not action_t(TURN,hoadve,THING).",
              "type_name": "hoadve"
            },
            {
              "lark": "ompous: OMPOUS thing\nOMPOUS.1: \"ompous\" WS",
              "pddl": "(:action OMPOUS\n    :parameters (?e - mationymb_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (mationymb ?e)\n        )\n    :effect (and\n        (bactiogy ?e)\n        (not (mationymb ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mationymb-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not mationymb.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now bactiogy.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ompous is to make something mationymb_able and mationymb be bactiogy.",
              "asp": "{ action_t(TURN,ompous,THING):at_t(TURN,THING,ROOM),mationymb_able(THING),mationymb_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nbactiogy_t(TURN+1,THING) :- action_t(TURN,ompous,THING).\nmationymb_t(TURN+1,THING) :- turn(TURN), mationymb_t(TURN,THING), not action_t(TURN,ompous,THING).",
              "type_name": "ompous"
            },
            {
              "lark": "ophabor: OPHABOR thing\nOPHABOR.1: \"ophabor\" WS",
              "pddl": "(:action OPHABOR\n    :parameters (?e - mationymb_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (bactiogy ?e)\n        )\n    :effect (and\n        (trendol ?e)\n        (not (bactiogy ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mationymb-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not bactiogy.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now trendol.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ophabor is to make something mationymb_able and bactiogy be trendol.",
              "asp": "{ action_t(TURN,ophabor,THING):at_t(TURN,THING,ROOM),mationymb_able(THING),bactiogy_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\ntrendol_t(TURN+1,THING) :- action_t(TURN,ophabor,THING).\nbactiogy_t(TURN+1,THING) :- turn(TURN), bactiogy_t(TURN,THING), not action_t(TURN,ophabor,THING).",
              "type_name": "ophabor"
            },
            {
              "lark": "rhypnon: RHYPNON thing\nRHYPNON.1: \"rhypnon\" WS",
              "pddl": "(:action RHYPNON\n    :parameters (?e - mationymb_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (trendol ?e)\n        )\n    :effect (and\n        (mationymb ?e)\n        (not (trendol ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not mationymb-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not trendol.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now mationymb.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To rhypnon is to make something mationymb_able and trendol be mationymb.",
              "asp": "{ action_t(TURN,rhypnon,THING):at_t(TURN,THING,ROOM),mationymb_able(THING),trendol_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nmationymb_t(TURN+1,THING) :- action_t(TURN,rhypnon,THING).\ntrendol_t(TURN+1,THING) :- turn(TURN), trendol_t(TURN,THING), not action_t(TURN,rhypnon,THING).",
              "type_name": "rhypnon"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "trapseng",
              "exit_targets": [
                "nontroust",
                "ammidiced"
              ],
              "max_connections": 1,
              "type_name": "trapseng"
            },
            {
              "repr_str": "ammidiced",
              "exit_targets": [
                "trapseng"
              ],
              "max_connections": 3,
              "type_name": "ammidiced"
            },
            {
              "repr_str": "nontroust",
              "exit_targets": [
                "ammidiced",
                "heccop"
              ],
              "max_connections": 2,
              "type_name": "nontroust"
            },
            {
              "repr_str": "heccop",
              "exit_targets": [
                "nontroust",
                "ammidiced",
                "trapseng"
              ],
              "max_connections": 2,
              "type_name": "heccop"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "asceles",
              "traits": [
                "tinhal_able"
              ],
              "standard_locations": [
                "ammidiced",
                "heccop"
              ],
              "type_name": "asceles"
            },
            {
              "repr_str": "cenotor",
              "traits": [
                "tinhal_able"
              ],
              "standard_locations": [
                "trapseng"
              ],
              "type_name": "cenotor"
            },
            {
              "repr_str": "rakeer",
              "traits": [
                "skenic_able",
                "tinhal_able"
              ],
              "standard_locations": [
                "heccop",
                "nontroust"
              ],
              "type_name": "rakeer"
            },
            {
              "repr_str": "ctaticed",
              "traits": [
                "skenic_able",
                "mationymb_able"
              ],
              "standard_locations": [
                "heccop"
              ],
              "type_name": "ctaticed"
            },
            {
              "repr_str": "horbact",
              "traits": [
                "skenic_able",
                "tinhal_able"
              ],
              "standard_locations": [
                "heccop",
                "ammidiced"
              ],
              "type_name": "horbact"
            },
            {
              "repr_str": "inagness",
              "traits": [
                "skenic_able"
              ],
              "standard_locations": [
                "trapseng",
                "heccop"
              ],
              "type_name": "inagness"
            },
            {
              "repr_str": "otioct",
              "traits": [
                "skenic_able"
              ],
              "standard_locations": [
                "heccop"
              ],
              "type_name": "otioct"
            },
            {
              "repr_str": "mituark",
              "traits": [
                "mationymb_able",
                "tinhal_able"
              ],
              "standard_locations": [
                "heccop"
              ],
              "type_name": "mituark"
            },
            {
              "repr_str": "untastion",
              "traits": [
                "tinhal_able",
                "skenic_able"
              ],
              "standard_locations": [
                "ammidiced"
              ],
              "type_name": "untastion"
            },
            {
              "repr_str": "mementiced",
              "traits": [
                "mationymb_able"
              ],
              "standard_locations": [
                "trapseng",
                "nontroust"
              ],
              "type_name": "mementiced"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "trapseng",
                  "ammidiced",
                  "nontroust",
                  "heccop"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "asceles",
                  "cenotor",
                  "rakeer",
                  "ctaticed",
                  "horbact",
                  "inagness",
                  "otioct",
                  "mituark",
                  "untastion",
                  "mementiced",
                  "player",
                  "inventory",
                  "floor"
                ],
                "tinhal_able": [
                  "asceles",
                  "cenotor",
                  "rakeer",
                  "horbact",
                  "mituark",
                  "untastion"
                ],
                "skenic_able": [
                  "rakeer",
                  "ctaticed",
                  "horbact",
                  "inagness",
                  "otioct",
                  "untastion"
                ],
                "mationymb_able": [
                  "ctaticed",
                  "mituark",
                  "mementiced"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "tinhal",
                  "variable": "e",
                  "mutability": "tinhal_able"
                },
                {
                  "predicate_id": "skenic",
                  "variable": "e",
                  "mutability": "skenic_able"
                },
                {
                  "predicate_id": "icarity",
                  "variable": "e",
                  "mutability": "skenic_able"
                },
                {
                  "predicate_id": "mationymb",
                  "variable": "e",
                  "mutability": "mationymb_able"
                },
                {
                  "predicate_id": "bactiogy",
                  "variable": "e",
                  "mutability": "mationymb_able"
                },
                {
                  "predicate_id": "trendol",
                  "variable": "e",
                  "mutability": "mationymb_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can anumman, phinding, llatic, eoster, ntion and cumative.\n\nYour goal for this game is: Make the bintioust atilioned, the forotoly serhing and the retritt aurpher.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(torifism1,rofflum1)",
            "at(sancyter1,iciante1)",
            "at(retritt1,realighy1)",
            "at(avirriced1,realighy1)",
            "at(iscolad1,realighy1)",
            "at(urafflag1,realighy1)",
            "at(shemood1,realighy1)",
            "at(bintioust1,llism1)",
            "at(harantal1,rofflum1)",
            "at(forotoly1,realighy1)",
            "at(player1,realighy1)",
            "type(player1,player)",
            "type(forotoly1,forotoly)",
            "type(harantal1,harantal)",
            "type(bintioust1,bintioust)",
            "type(shemood1,shemood)",
            "type(urafflag1,urafflag)",
            "type(iscolad1,iscolad)",
            "type(avirriced1,avirriced)",
            "type(retritt1,retritt)",
            "type(sancyter1,sancyter)",
            "type(torifism1,torifism)",
            "room(rofflum1,rofflum)",
            "room(iciante1,iciante)",
            "room(llism1,llism)",
            "room(realighy1,realighy)",
            "atilioned(sancyter1)",
            "atilioned(avirriced1)",
            "atilioned(iscolad1)",
            "atilioned(urafflag1)",
            "rapicary(shemood1)",
            "rapicary(bintioust1)",
            "aurpher(torifism1)",
            "chlectic(shemood1)",
            "llike(retritt1)",
            "exit(rofflum1,iciante1)",
            "exit(iciante1,rofflum1)",
            "exit(llism1,iciante1)",
            "exit(realighy1,rofflum1)",
            "exit(rofflum1,realighy1)",
            "exit(iciante1,llism1)",
            "serhing_able(forotoly1)",
            "serhing_able(harantal1)",
            "serhing_able(bintioust1)",
            "serhing_able(urafflag1)",
            "serhing_able(retritt1)",
            "serhing_able(sancyter1)",
            "atilioned_able(bintioust1)",
            "atilioned_able(shemood1)",
            "atilioned_able(urafflag1)",
            "atilioned_able(iscolad1)",
            "atilioned_able(avirriced1)",
            "atilioned_able(sancyter1)",
            "aurpher_able(shemood1)",
            "aurpher_able(retritt1)",
            "aurpher_able(torifism1)"
          ],
          "goal_state": [
            "serhing(forotoly1)",
            "atilioned(bintioust1)",
            "aurpher(retritt1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "ntion",
              "forotoly1"
            ],
            [
              "phinding",
              "retritt1"
            ],
            [
              "go",
              "rofflum1"
            ],
            [
              "go",
              "iciante1"
            ],
            [
              "go",
              "llism1"
            ],
            [
              "eoster",
              "bintioust1"
            ]
          ],
          "optimal_commands": [
            "ntion forotoly",
            "phinding retritt",
            "go rofflum",
            "go iciante",
            "go llism",
            "eoster bintioust"
          ],
          "action_definitions": [
            {
              "lark": "ntion: NTION thing\nNTION.1: \"ntion\" WS",
              "pddl": "(:action NTION\n    :parameters (?e - serhing_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (serhing ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not serhing-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now serhing.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To ntion is to make something serhing_able serhing.",
              "asp": "{ action_t(TURN,ntion,THING):at_t(TURN,THING,ROOM),serhing_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nserhing_t(TURN+1,THING) :- action_t(TURN,ntion,THING).\nserhing_t(TURN+1,THING) :- turn(TURN), serhing_t(TURN,THING).",
              "type_name": "ntion"
            },
            {
              "lark": "anumman: ANUMMAN thing\nANUMMAN.1: \"anumman\" WS",
              "pddl": "(:action ANUMMAN\n    :parameters (?e - atilioned_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (atilioned ?e)\n        )\n    :effect (and\n        (rapicary ?e)\n        (not (atilioned ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not atilioned-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not atilioned.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now rapicary.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To anumman is to make something atilioned_able and atilioned be rapicary.",
              "asp": "{ action_t(TURN,anumman,THING):at_t(TURN,THING,ROOM),atilioned_able(THING),atilioned_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nrapicary_t(TURN+1,THING) :- action_t(TURN,anumman,THING).\natilioned_t(TURN+1,THING) :- turn(TURN), atilioned_t(TURN,THING), not action_t(TURN,anumman,THING).",
              "type_name": "anumman"
            },
            {
              "lark": "eoster: EOSTER thing\nEOSTER.1: \"eoster\" WS",
              "pddl": "(:action EOSTER\n    :parameters (?e - atilioned_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (rapicary ?e)\n        )\n    :effect (and\n        (atilioned ?e)\n        (not (rapicary ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not atilioned-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not rapicary.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now atilioned.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To eoster is to make something atilioned_able and rapicary be atilioned.",
              "asp": "{ action_t(TURN,eoster,THING):at_t(TURN,THING,ROOM),atilioned_able(THING),rapicary_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\natilioned_t(TURN+1,THING) :- action_t(TURN,eoster,THING).\nrapicary_t(TURN+1,THING) :- turn(TURN), rapicary_t(TURN,THING), not action_t(TURN,eoster,THING).",
              "type_name": "eoster"
            },
            {
              "lark": "llatic: LLATIC thing\nLLATIC.1: \"llatic\" WS",
              "pddl": "(:action LLATIC\n    :parameters (?e - aurpher_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (aurpher ?e)\n        )\n    :effect (and\n        (chlectic ?e)\n        (not (aurpher ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aurpher-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not aurpher.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now chlectic.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To llatic is to make something aurpher_able and aurpher be chlectic.",
              "asp": "{ action_t(TURN,llatic,THING):at_t(TURN,THING,ROOM),aurpher_able(THING),aurpher_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nchlectic_t(TURN+1,THING) :- action_t(TURN,llatic,THING).\naurpher_t(TURN+1,THING) :- turn(TURN), aurpher_t(TURN,THING), not action_t(TURN,llatic,THING).",
              "type_name": "llatic"
            },
            {
              "lark": "cumative: CUMATIVE thing\nCUMATIVE.1: \"cumative\" WS",
              "pddl": "(:action CUMATIVE\n    :parameters (?e - aurpher_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (chlectic ?e)\n        )\n    :effect (and\n        (llike ?e)\n        (not (chlectic ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aurpher-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not chlectic.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now llike.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To cumative is to make something aurpher_able and chlectic be llike.",
              "asp": "{ action_t(TURN,cumative,THING):at_t(TURN,THING,ROOM),aurpher_able(THING),chlectic_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nllike_t(TURN+1,THING) :- action_t(TURN,cumative,THING).\nchlectic_t(TURN+1,THING) :- turn(TURN), chlectic_t(TURN,THING), not action_t(TURN,cumative,THING).",
              "type_name": "cumative"
            },
            {
              "lark": "phinding: PHINDING thing\nPHINDING.1: \"phinding\" WS",
              "pddl": "(:action PHINDING\n    :parameters (?e - aurpher_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (llike ?e)\n        )\n    :effect (and\n        (aurpher ?e)\n        (not (llike ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not aurpher-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not llike.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now aurpher.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To phinding is to make something aurpher_able and llike be aurpher.",
              "asp": "{ action_t(TURN,phinding,THING):at_t(TURN,THING,ROOM),aurpher_able(THING),llike_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\naurpher_t(TURN+1,THING) :- action_t(TURN,phinding,THING).\nllike_t(TURN+1,THING) :- turn(TURN), llike_t(TURN,THING), not action_t(TURN,phinding,THING).",
              "type_name": "phinding"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "rofflum",
              "exit_targets": [
                "llism",
                "iciante"
              ],
              "max_connections": 1,
              "type_name": "rofflum"
            },
            {
              "repr_str": "iciante",
              "exit_targets": [
                "rofflum"
              ],
              "max_connections": 3,
              "type_name": "iciante"
            },
            {
              "repr_str": "llism",
              "exit_targets": [
                "iciante",
                "realighy"
              ],
              "max_connections": 2,
              "type_name": "llism"
            },
            {
              "repr_str": "realighy",
              "exit_targets": [
                "llism",
                "iciante",
                "rofflum"
              ],
              "max_connections": 2,
              "type_name": "realighy"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "forotoly",
              "traits": [
                "serhing_able"
              ],
              "standard_locations": [
                "iciante",
                "realighy"
              ],
              "type_name": "forotoly"
            },
            {
              "repr_str": "harantal",
              "traits": [
                "serhing_able"
              ],
              "standard_locations": [
                "rofflum"
              ],
              "type_name": "harantal"
            },
            {
              "repr_str": "bintioust",
              "traits": [
                "atilioned_able",
                "serhing_able"
              ],
              "standard_locations": [
                "realighy",
                "llism"
              ],
              "type_name": "bintioust"
            },
            {
              "repr_str": "shemood",
              "traits": [
                "atilioned_able",
                "aurpher_able"
              ],
              "standard_locations": [
                "realighy"
              ],
              "type_name": "shemood"
            },
            {
              "repr_str": "urafflag",
              "traits": [
                "atilioned_able",
                "serhing_able"
              ],
              "standard_locations": [
                "realighy",
                "iciante"
              ],
              "type_name": "urafflag"
            },
            {
              "repr_str": "iscolad",
              "traits": [
                "atilioned_able"
              ],
              "standard_locations": [
                "rofflum",
                "realighy"
              ],
              "type_name": "iscolad"
            },
            {
              "repr_str": "avirriced",
              "traits": [
                "atilioned_able"
              ],
              "standard_locations": [
                "realighy"
              ],
              "type_name": "avirriced"
            },
            {
              "repr_str": "retritt",
              "traits": [
                "aurpher_able",
                "serhing_able"
              ],
              "standard_locations": [
                "realighy"
              ],
              "type_name": "retritt"
            },
            {
              "repr_str": "sancyter",
              "traits": [
                "serhing_able",
                "atilioned_able"
              ],
              "standard_locations": [
                "iciante"
              ],
              "type_name": "sancyter"
            },
            {
              "repr_str": "torifism",
              "traits": [
                "aurpher_able"
              ],
              "standard_locations": [
                "rofflum",
                "llism"
              ],
              "type_name": "torifism"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "rofflum",
                  "iciante",
                  "llism",
                  "realighy"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "forotoly",
                  "harantal",
                  "bintioust",
                  "shemood",
                  "urafflag",
                  "iscolad",
                  "avirriced",
                  "retritt",
                  "sancyter",
                  "torifism",
                  "player",
                  "inventory",
                  "floor"
                ],
                "serhing_able": [
                  "forotoly",
                  "harantal",
                  "bintioust",
                  "urafflag",
                  "retritt",
                  "sancyter"
                ],
                "atilioned_able": [
                  "bintioust",
                  "shemood",
                  "urafflag",
                  "iscolad",
                  "avirriced",
                  "sancyter"
                ],
                "aurpher_able": [
                  "shemood",
                  "retritt",
                  "torifism"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "serhing",
                  "variable": "e",
                  "mutability": "serhing_able"
                },
                {
                  "predicate_id": "atilioned",
                  "variable": "e",
                  "mutability": "atilioned_able"
                },
                {
                  "predicate_id": "rapicary",
                  "variable": "e",
                  "mutability": "atilioned_able"
                },
                {
                  "predicate_id": "aurpher",
                  "variable": "e",
                  "mutability": "aurpher_able"
                },
                {
                  "predicate_id": "chlectic",
                  "variable": "e",
                  "mutability": "aurpher_able"
                },
                {
                  "predicate_id": "llike",
                  "variable": "e",
                  "mutability": "aurpher_able"
                }
              ]
            }
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nIn addition to common actions, you can prophedly, lystly, curatily, uncomagol, tationnis and sifoat.\n\nYour goal for this game is: Make the telyphy vatmene, the rogisart pineger and the pienthor exabarb.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "at(ansubder1,gurlite1)",
            "at(hocyard1,puranity1)",
            "at(rogisart1,caligaticed1)",
            "at(pakably1,caligaticed1)",
            "at(tecural1,caligaticed1)",
            "at(ubdonee1,caligaticed1)",
            "at(aribess1,caligaticed1)",
            "at(telyphy1,redaka1)",
            "at(cophaal1,gurlite1)",
            "at(pienthor1,caligaticed1)",
            "at(player1,caligaticed1)",
            "type(player1,player)",
            "type(pienthor1,pienthor)",
            "type(cophaal1,cophaal)",
            "type(telyphy1,telyphy)",
            "type(aribess1,aribess)",
            "type(ubdonee1,ubdonee)",
            "type(tecural1,tecural)",
            "type(pakably1,pakably)",
            "type(rogisart1,rogisart)",
            "type(hocyard1,hocyard)",
            "type(ansubder1,ansubder)",
            "room(gurlite1,gurlite)",
            "room(puranity1,puranity)",
            "room(redaka1,redaka)",
            "room(caligaticed1,caligaticed)",
            "vatmene(hocyard1)",
            "vatmene(pakably1)",
            "vatmene(tecural1)",
            "vatmene(ubdonee1)",
            "ioblex(aribess1)",
            "ioblex(telyphy1)",
            "pineger(ansubder1)",
            "earatory(aribess1)",
            "onesive(rogisart1)",
            "exit(gurlite1,puranity1)",
            "exit(puranity1,gurlite1)",
            "exit(redaka1,puranity1)",
            "exit(caligaticed1,gurlite1)",
            "exit(gurlite1,caligaticed1)",
            "exit(puranity1,redaka1)",
            "exabarb_able(pienthor1)",
            "exabarb_able(cophaal1)",
            "exabarb_able(telyphy1)",
            "exabarb_able(ubdonee1)",
            "exabarb_able(rogisart1)",
            "exabarb_able(hocyard1)",
            "vatmene_able(telyphy1)",
            "vatmene_able(aribess1)",
            "vatmene_able(ubdonee1)",
            "vatmene_able(tecural1)",
            "vatmene_able(pakably1)",
            "vatmene_able(hocyard1)",
            "pineger_able(aribess1)",
            "pineger_able(rogisart1)",
            "pineger_able(ansubder1)"
          ],
          "goal_state": [
            "exabarb(pienthor1)",
            "vatmene(telyphy1)",
            "pineger(rogisart1)"
          ],
          "max_turns": 50,
          "optimal_turns": 6,
          "optimal_solution": [
            [
              "lystly",
              "pienthor1"
            ],
            [
              "tationnis",
              "rogisart1"
            ],
            [
              "go",
              "gurlite1"
            ],
            [
              "go",
              "puranity1"
            ],
            [
              "go",
              "redaka1"
            ],
            [
              "prophedly",
              "telyphy1"
            ]
          ],
          "optimal_commands": [
            "lystly pienthor",
            "tationnis rogisart",
            "go gurlite",
            "go puranity",
            "go redaka",
            "prophedly telyphy"
          ],
          "action_definitions": [
            {
              "lark": "lystly: LYSTLY thing\nLYSTLY.1: \"lystly\" WS",
              "pddl": "(:action LYSTLY\n    :parameters (?e - exabarb_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n)\n    :effect (and\n        (exabarb ?e)\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not exabarb-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now exabarb.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To lystly is to make something exabarb_able exabarb.",
              "asp": "{ action_t(TURN,lystly,THING):at_t(TURN,THING,ROOM),exabarb_able(THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nexabarb_t(TURN+1,THING) :- action_t(TURN,lystly,THING).\nexabarb_t(TURN+1,THING) :- turn(TURN), exabarb_t(TURN,THING).",
              "type_name": "lystly"
            },
            {
              "lark": "sifoat: SIFOAT thing\nSIFOAT.1: \"sifoat\" WS",
              "pddl": "(:action SIFOAT\n    :parameters (?e - vatmene_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (vatmene ?e)\n        )\n    :effect (and\n        (ioblex ?e)\n        (not (vatmene ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not vatmene-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not vatmene.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now ioblex.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To sifoat is to make something vatmene_able and vatmene be ioblex.",
              "asp": "{ action_t(TURN,sifoat,THING):at_t(TURN,THING,ROOM),vatmene_able(THING),vatmene_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nioblex_t(TURN+1,THING) :- action_t(TURN,sifoat,THING).\nvatmene_t(TURN+1,THING) :- turn(TURN), vatmene_t(TURN,THING), not action_t(TURN,sifoat,THING).",
              "type_name": "sifoat"
            },
            {
              "lark": "prophedly: PROPHEDLY thing\nPROPHEDLY.1: \"prophedly\" WS",
              "pddl": "(:action PROPHEDLY\n    :parameters (?e - vatmene_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (ioblex ?e)\n        )\n    :effect (and\n        (vatmene ?e)\n        (not (ioblex ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not vatmene-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not ioblex.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now vatmene.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To prophedly is to make something vatmene_able and ioblex be vatmene.",
              "asp": "{ action_t(TURN,prophedly,THING):at_t(TURN,THING,ROOM),vatmene_able(THING),ioblex_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nvatmene_t(TURN+1,THING) :- action_t(TURN,prophedly,THING).\nioblex_t(TURN+1,THING) :- turn(TURN), ioblex_t(TURN,THING), not action_t(TURN,prophedly,THING).",
              "type_name": "prophedly"
            },
            {
              "lark": "curatily: CURATILY thing\nCURATILY.1: \"curatily\" WS",
              "pddl": "(:action CURATILY\n    :parameters (?e - pineger_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (pineger ?e)\n        )\n    :effect (and\n        (earatory ?e)\n        (not (pineger ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not pineger-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not pineger.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now earatory.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To curatily is to make something pineger_able and pineger be earatory.",
              "asp": "{ action_t(TURN,curatily,THING):at_t(TURN,THING,ROOM),pineger_able(THING),pineger_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nearatory_t(TURN+1,THING) :- action_t(TURN,curatily,THING).\npineger_t(TURN+1,THING) :- turn(TURN), pineger_t(TURN,THING), not action_t(TURN,curatily,THING).",
              "type_name": "curatily"
            },
            {
              "lark": "uncomagol: UNCOMAGOL thing\nUNCOMAGOL.1: \"uncomagol\" WS",
              "pddl": "(:action UNCOMAGOL\n    :parameters (?e - pineger_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (earatory ?e)\n        )\n    :effect (and\n        (onesive ?e)\n        (not (earatory ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not pineger-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not earatory.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now onesive.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To uncomagol is to make something pineger_able and earatory be onesive.",
              "asp": "{ action_t(TURN,uncomagol,THING):at_t(TURN,THING,ROOM),pineger_able(THING),earatory_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nonesive_t(TURN+1,THING) :- action_t(TURN,uncomagol,THING).\nearatory_t(TURN+1,THING) :- turn(TURN), earatory_t(TURN,THING), not action_t(TURN,uncomagol,THING).",
              "type_name": "uncomagol"
            },
            {
              "lark": "tationnis: TATIONNIS thing\nTATIONNIS.1: \"tationnis\" WS",
              "pddl": "(:action TATIONNIS\n    :parameters (?e - pineger_able ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (onesive ?e)\n        )\n    :effect (and\n        (pineger ?e)\n        (not (onesive ?e))\n    )\n)",
              "pddl_parameter_mapping": {
                "?e": [
                  "arg1"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "The {{ e }} is not pineger-able.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "The {{ e }} is not onesive.",
                    "entity_state_mismatch"
                  ]
                ]
              },
              "success_feedback": "The {{ e }} is now pineger.",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To tationnis is to make something pineger_able and onesive be pineger.",
              "asp": "{ action_t(TURN,tationnis,THING):at_t(TURN,THING,ROOM),pineger_able(THING),onesive_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\npineger_t(TURN+1,THING) :- action_t(TURN,tationnis,THING).\nonesive_t(TURN+1,THING) :- turn(TURN), onesive_t(TURN,THING), not action_t(TURN,tationnis,THING).",
              "type_name": "tationnis"
            },
            {
              "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
              "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player)\n    :precondition (and\n        (at ?p ?c)\n        (exit ?c ?d)\n        (not (at ?p ?d))\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n    )\n)",
              "pddl_parameter_mapping": {
                "?c": [
                  "current_player_room"
                ],
                "?d": [
                  "arg1"
                ],
                "?p": [
                  "player"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ c }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ d }} is not a room.",
                    "domain_trait_type_mismatch"
                  ],
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't go to a {{ d }} from here.",
                    "no_exit_to"
                  ],
                  [
                    "You are already in the {{ d }}.",
                    "going_to_current_room"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not THING = player1.",
              "epistemic": true,
              "pragmatic": true,
              "explanation": "To VERB is to move through space, especially to a place.",
              "type_name": "go"
            },
            {
              "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
              "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "You consider yourself done.",
              "asp": "",
              "epistemic": false,
              "pragmatic": true,
              "explanation": "To VERB is to end the game.",
              "type_name": "done"
            },
            {
              "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ],
                "?e": [
                  "arg1"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ e }} is not an entity. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ],
                  [
                    "Your inventory is not an entity. (This should not occur.)",
                    "world_state_discrepancy"
                  ],
                  [
                    "You can't see a {{ e }} here.",
                    "entity_not_accessible"
                  ]
                ]
              },
              "success_feedback": "{{ arg1_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to observe or inspect carefully.",
              "type_name": "examine"
            },
            {
              "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
              "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
              "pddl_parameter_mapping": {
                "?p": [
                  "player"
                ],
                "?r": [
                  "current_player_room"
                ]
              },
              "failure_feedback": {
                "parameters": [
                  [
                    "{{ p }} is not a player. (This should not occur.)",
                    "domain_type_discrepancy"
                  ],
                  [
                    "{{ r }} is not a room. (This should not occur.)",
                    "domain_type_discrepancy"
                  ]
                ],
                "precondition": [
                  [
                    "You are not where you are! (This should not occur.)",
                    "world_state_discrepancy"
                  ]
                ]
              },
              "success_feedback": "{{ room_desc }}",
              "asp": "",
              "epistemic": true,
              "pragmatic": false,
              "explanation": "To VERB is to inspect a room.",
              "type_name": "look"
            }
          ],
          "room_definitions": [
            {
              "repr_str": "gurlite",
              "exit_targets": [
                "redaka",
                "puranity"
              ],
              "max_connections": 1,
              "type_name": "gurlite"
            },
            {
              "repr_str": "puranity",
              "exit_targets": [
                "gurlite"
              ],
              "max_connections": 3,
              "type_name": "puranity"
            },
            {
              "repr_str": "redaka",
              "exit_targets": [
                "puranity",
                "caligaticed"
              ],
              "max_connections": 2,
              "type_name": "redaka"
            },
            {
              "repr_str": "caligaticed",
              "exit_targets": [
                "redaka",
                "puranity",
                "gurlite"
              ],
              "max_connections": 2,
              "type_name": "caligaticed"
            }
          ],
          "entity_definitions": [
            {
              "repr_str": "pienthor",
              "traits": [
                "exabarb_able"
              ],
              "standard_locations": [
                "puranity",
                "caligaticed"
              ],
              "type_name": "pienthor"
            },
            {
              "repr_str": "cophaal",
              "traits": [
                "exabarb_able"
              ],
              "standard_locations": [
                "gurlite"
              ],
              "type_name": "cophaal"
            },
            {
              "repr_str": "telyphy",
              "traits": [
                "vatmene_able",
                "exabarb_able"
              ],
              "standard_locations": [
                "caligaticed",
                "redaka"
              ],
              "type_name": "telyphy"
            },
            {
              "repr_str": "aribess",
              "traits": [
                "vatmene_able",
                "pineger_able"
              ],
              "standard_locations": [
                "caligaticed"
              ],
              "type_name": "aribess"
            },
            {
              "repr_str": "ubdonee",
              "traits": [
                "vatmene_able",
                "exabarb_able"
              ],
              "standard_locations": [
                "caligaticed",
                "puranity"
              ],
              "type_name": "ubdonee"
            },
            {
              "repr_str": "tecural",
              "traits": [
                "vatmene_able"
              ],
              "standard_locations": [
                "gurlite",
                "caligaticed"
              ],
              "type_name": "tecural"
            },
            {
              "repr_str": "pakably",
              "traits": [
                "vatmene_able"
              ],
              "standard_locations": [
                "caligaticed"
              ],
              "type_name": "pakably"
            },
            {
              "repr_str": "rogisart",
              "traits": [
                "pineger_able",
                "exabarb_able"
              ],
              "standard_locations": [
                "caligaticed"
              ],
              "type_name": "rogisart"
            },
            {
              "repr_str": "hocyard",
              "traits": [
                "exabarb_able",
                "vatmene_able"
              ],
              "standard_locations": [
                "puranity"
              ],
              "type_name": "hocyard"
            },
            {
              "repr_str": "ansubder",
              "traits": [
                "pineger_able"
              ],
              "standard_locations": [
                "gurlite",
                "redaka"
              ],
              "type_name": "ansubder"
            },
            {
              "repr_str": "you",
              "traits": [],
              "hidden": true,
              "type_name": "player"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "inventory"
            },
            {
              "repr_str": "",
              "traits": [],
              "hidden": true,
              "type_name": "floor"
            }
          ],
          "domain_definitions": [
            {
              "domain_id": "new_words",
              "types": {
                "room": [
                  "gurlite",
                  "puranity",
                  "redaka",
                  "caligaticed"
                ],
                "entity": [
                  "player",
                  "inventory",
                  "floor",
                  "pienthor",
                  "cophaal",
                  "telyphy",
                  "aribess",
                  "ubdonee",
                  "tecural",
                  "pakably",
                  "rogisart",
                  "hocyard",
                  "ansubder",
                  "player",
                  "inventory",
                  "floor"
                ],
                "exabarb_able": [
                  "pienthor",
                  "cophaal",
                  "telyphy",
                  "ubdonee",
                  "rogisart",
                  "hocyard"
                ],
                "vatmene_able": [
                  "telyphy",
                  "aribess",
                  "ubdonee",
                  "tecural",
                  "pakably",
                  "hocyard"
                ],
                "pineger_able": [
                  "aribess",
                  "rogisart",
                  "ansubder"
                ]
              },
              "predicates": [
                {
                  "predicate_id": "exabarb",
                  "variable": "e",
                  "mutability": "exabarb_able"
                },
                {
                  "predicate_id": "vatmene",
                  "variable": "e",
                  "mutability": "vatmene_able"
                },
                {
                  "predicate_id": "ioblex",
                  "variable": "e",
                  "mutability": "vatmene_able"
                },
                {
                  "predicate_id": "pineger",
                  "variable": "e",
                  "mutability": "pineger_able"
                },
                {
                  "predicate_id": "earatory",
                  "variable": "e",
                  "mutability": "pineger_able"
                },
                {
                  "predicate_id": "onesive",
                  "variable": "e",
                  "mutability": "pineger_able"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "potion_brewing_basic_undefined",
      "game_instances": [
        {
          "game_id": 0,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,cellar1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(book1,bed1)",
            "on(potionrecipe1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Corvidae potion\nIngredients: Water, banana, peach, eye of newt.\n1. Pour water into your cauldron.\n2. Mix the liquid using a borpulus.\n3. Add the eye of newt into your cauldron.\n4. Swirl a zulpowand over your cauldron.\n5. Put the banana into your cauldron.\n6. Put the peach into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 24,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "zulpowand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "zulpowand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "take",
              "eyeofnewt1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "put",
              "banana1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "put",
              "eyeofnewt1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "water1",
              "borpulus1"
            ],
            [
              "put",
              "banana1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "take borpulus",
            "go hallway",
            "go magic workshop",
            "take zulpowand",
            "go kitchen",
            "wave cauldron zulpowand",
            "go pantry",
            "open ice box",
            "take peach",
            "take banana",
            "take eye of newt",
            "go kitchen",
            "dump bucket of water cauldron",
            "put banana in cauldron",
            "put peach in cauldron",
            "put eye of newt in cauldron",
            "go pantry",
            "go kitchen",
            "stir water borpulus",
            "put banana in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l water)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The water undulates with a phase shift creating a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), borpulusstirred_t(TURN,water1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,water1) :- turn(TURN), borpulusstirred_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i eyeofnewt)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i eyeofnewt))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The eye of newt combines with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,eyeofnewt1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,eyeofnewt1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,eyeofnewt1,ROOM) :- turn(TURN), at_t(TURN,eyeofnewt1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,eyeofnewt1,cauldron1) :- turn(TURN), in_t(TURN,eyeofnewt1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(zulponated ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the zulponated cauldron churgulates with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), zulponated_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i banana)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i banana))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The banana combines with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,banana1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,banana1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,banana1,ROOM) :- turn(TURN), at_t(TURN,banana1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,banana1,cauldron1) :- turn(TURN), in_t(TURN,banana1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type peach1 peach))\n\t\t(not (at peach1 ?r))\n\t\t(not (in peach1 ?c))\n\t\t(not (accessible peach1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The peach mingles with the liquid with a swirling pattern creating the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 1,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,cellar1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(book1,bed1)",
            "on(potionrecipe1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Espeldertatarum potion\nIngredients: Water, red beetle, spiderweb, sandwich.\n1. Pour water into your cauldron.\n2. Add the red beetle into your cauldron.\n3. Wiggle a fairy wand on your cauldron.\n4. Wiggle a ice wand over your cauldron.\n5. Put the spiderweb into your cauldron.\n6. Put the sandwich into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "spiderweb1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "redbeetle1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "fairywand1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "put",
              "redbeetle1",
              "cauldron1"
            ],
            [
              "put",
              "spiderweb1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "fairywand1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "take spiderweb",
            "go cellar",
            "take red beetle",
            "go hallway",
            "go magic workshop",
            "take fairy wand",
            "take ice wand",
            "go kitchen",
            "wave cauldron ice wand",
            "go pantry",
            "go kitchen",
            "dump bucket of water cauldron",
            "put red beetle in cauldron",
            "put spiderweb in cauldron",
            "go pantry",
            "open ice box",
            "take sandwich",
            "go kitchen",
            "wave cauldron fairy wand",
            "put sandwich in cauldron",
            "put sandwich in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at water1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i redbeetle)\n\t\t(in ?i ?c)\n\t\t(in water1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type water1 water))\n\t\t(not (at water1 ?r))\n\t\t(not (in water1 ?c))\n\t\t(not (accessible water1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i redbeetle))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The red beetle absorbs into the water with a gloopy sound producing a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,redbeetle1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), in_t(TURN,redbeetle1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,redbeetle1,ROOM) :- turn(TURN), at_t(TURN,redbeetle1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,redbeetle1,cauldron1) :- turn(TURN), in_t(TURN,redbeetle1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid1 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid1 liquid)\n\t\t(glittery ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2 ?r)\n\t\t(in liquid2 ?c)\n\t\t(accessible liquid2)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the glittery cauldron sloshes with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), glittery_t(TURN,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron whistles with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spiderweb)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spiderweb))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The spiderweb combines with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spiderweb1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,spiderweb1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,spiderweb1,ROOM) :- turn(TURN), at_t(TURN,spiderweb1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,spiderweb1,cauldron1) :- turn(TURN), in_t(TURN,spiderweb1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i sandwich)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type sandwich1 sandwich))\n\t\t(not (at sandwich1 ?r))\n\t\t(not (in sandwich1 ?c))\n\t\t(not (accessible sandwich1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The sandwich absorbs into the liquid with a phase shift leaving the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,sandwich1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,sandwich1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,sandwich1,ROOM) :- turn(TURN), at_t(TURN,sandwich1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,sandwich1,cauldron1) :- turn(TURN), in_t(TURN,sandwich1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 2,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,cellar1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Hungro's potion\nIngredients: Water, spider egg, sandwich, eye of newt.\n1. Pour water into your cauldron.\n2. Swirl a fire wand at your cauldron.\n3. Add the sandwich into your cauldron.\n4. Wave a ice wand at your cauldron.\n5. Add the eye of newt into your cauldron.\n6. Add the spider egg into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spideregg1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "eyeofnewt1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ],
            [
              "put",
              "spideregg1",
              "cauldron1"
            ],
            [
              "put",
              "eyeofnewt1",
              "cauldron1"
            ],
            [
              "put",
              "spideregg1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "go cellar",
            "take spider egg",
            "go hallway",
            "go magic workshop",
            "take ice wand",
            "take fire wand",
            "go kitchen",
            "dump bucket of water cauldron",
            "go pantry",
            "open ice box",
            "take eye of newt",
            "go kitchen",
            "wave cauldron fire wand",
            "go pantry",
            "take sandwich",
            "go kitchen",
            "wave cauldron ice wand",
            "put sandwich in cauldron",
            "put spider egg in cauldron",
            "put eye of newt in cauldron",
            "put spider egg in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l water)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The water in the hot cauldron bubbles with a puff of vapor leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), hot_t(TURN,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nhot_t(TURN+1,cauldron1) :- turn(TURN), hot_t(TURN,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i sandwich)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i sandwich))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The sandwich combines with the liquid in the cauldron with a swirling pattern.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,sandwich1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,sandwich1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,sandwich1,ROOM) :- turn(TURN), at_t(TURN,sandwich1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,sandwich1,cauldron1) :- turn(TURN), in_t(TURN,sandwich1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron swirls with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i eyeofnewt)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i eyeofnewt))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The eye of newt mingles with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,eyeofnewt1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,eyeofnewt1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,eyeofnewt1,ROOM) :- turn(TURN), at_t(TURN,eyeofnewt1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,eyeofnewt1,cauldron1) :- turn(TURN), in_t(TURN,eyeofnewt1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spideregg)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type spideregg1 spideregg))\n\t\t(not (at spideregg1 ?r))\n\t\t(not (in spideregg1 ?c))\n\t\t(not (accessible spideregg1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The spider egg mingles with the liquid with a swirling pattern leaving the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spideregg1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,spideregg1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,spideregg1,ROOM) :- turn(TURN), at_t(TURN,spideregg1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,spideregg1,cauldron1) :- turn(TURN), in_t(TURN,spideregg1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 3,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,cellar1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Very tasty potion\nIngredients: Ectoplasm, plonkle crystal, peach, plunkle crystal.\n1. Pour ectoplasm into your cauldron.\n2. Mix the liquid using a borpulus.\n3. Add the plonkle crystal into your cauldron.\n4. Put the peach into your cauldron.\n5. Swirl a fire wand at your cauldron.\n6. Put the plunkle crystal into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 24,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "plonklecrystal1"
            ],
            [
              "take",
              "plunklecrystal1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "put",
              "plunklecrystal1",
              "cauldron1"
            ],
            [
              "put",
              "plonklecrystal1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "borpulus1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take plonkle crystal",
            "take plunkle crystal",
            "take borpulus",
            "go hallway",
            "go magic workshop",
            "take fire wand",
            "go kitchen",
            "wave cauldron fire wand",
            "put plunkle crystal in cauldron",
            "put plonkle crystal in cauldron",
            "go pantry",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "open ice box",
            "take peach",
            "go kitchen",
            "stir ectoplasm borpulus",
            "put peach in cauldron",
            "put peach in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm rectangulates with a gloopy sound leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), borpulusstirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,ectoplasm1) :- turn(TURN), borpulusstirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i plonklecrystal)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i plonklecrystal))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The plonkle crystal mingles with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,plonklecrystal1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,plonklecrystal1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,plonklecrystal1,ROOM) :- turn(TURN), at_t(TURN,plonklecrystal1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,plonklecrystal1,cauldron1) :- turn(TURN), in_t(TURN,plonklecrystal1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i peach))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The peach combines with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid3 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid3 liquid)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4 ?r)\n\t\t(in liquid4 ?c)\n\t\t(accessible liquid4)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the hot cauldron swirls with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid3,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), hot_t(TURN,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i plunklecrystal)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type plunklecrystal1 plunklecrystal))\n\t\t(not (at plunklecrystal1 ?r))\n\t\t(not (in plunklecrystal1 ?c))\n\t\t(not (accessible plunklecrystal1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The plunkle crystal mingles with the liquid with a pop creating the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,plunklecrystal1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,plunklecrystal1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,plunklecrystal1,ROOM) :- turn(TURN), at_t(TURN,plunklecrystal1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,plunklecrystal1,cauldron1) :- turn(TURN), in_t(TURN,plunklecrystal1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 4,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,cellar1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Rincewind's potion\nIngredients: Ectoplasm, apple, peach, spider egg.\n1. Pour ectoplasm into your cauldron.\n2. Stir the liquid using a borpulus.\n3. Add the apple into your cauldron.\n4. Wave a ice wand on your cauldron.\n5. Put the spider egg into your cauldron.\n6. Put the peach into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spideregg1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "spideregg1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "borpulus1"
            ],
            [
              "put",
              "apple1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "take",
              "plate1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take borpulus",
            "go cellar",
            "take spider egg",
            "go hallway",
            "go magic workshop",
            "take ice wand",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "open ice box",
            "take peach",
            "go kitchen",
            "wave cauldron ice wand",
            "put spider egg in cauldron",
            "go pantry",
            "take apple",
            "go kitchen",
            "stir ectoplasm borpulus",
            "put apple in cauldron",
            "put peach in cauldron",
            "take plate"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm sloshes with a puff of vapor leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), borpulusstirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,ectoplasm1) :- turn(TURN), borpulusstirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i apple)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i apple))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The apple absorbs into the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,apple1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,apple1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,apple1,ROOM) :- turn(TURN), at_t(TURN,apple1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,apple1,cauldron1) :- turn(TURN), in_t(TURN,apple1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron dances with a phase shift.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spideregg)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spideregg))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The spider egg mingles with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spideregg1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,spideregg1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,spideregg1,ROOM) :- turn(TURN), at_t(TURN,spideregg1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,spideregg1,cauldron1) :- turn(TURN), in_t(TURN,spideregg1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type peach1 peach))\n\t\t(not (at peach1 ?r))\n\t\t(not (in peach1 ?c))\n\t\t(not (accessible peach1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The peach mingles with the liquid with a pop producing the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 5,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,cellar1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,That odd potion\nIngredients: Ectoplasm, spiderweb, nightshade, lily of the valley.\n1. Pour ectoplasm into your cauldron.\n2. Add the lily of the valley into your cauldron.\n3. Put the spiderweb into your cauldron.\n4. Wiggle a zulpowand at your cauldron.\n5. Wiggle a ice wand on your cauldron.\n6. Put the nightshade into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 23,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "take",
              "nightshade1"
            ],
            [
              "take",
              "lilyofthevalley1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "spiderweb1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "take",
              "zulpowand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "nightshade1",
              "cauldron1"
            ],
            [
              "put",
              "lilyofthevalley1",
              "cauldron1"
            ],
            [
              "put",
              "spiderweb1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "zulpowand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "put",
              "spiderweb1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "take nightshade",
            "take lily of the valley",
            "go storage room",
            "take spiderweb",
            "go hallway",
            "go magic workshop",
            "take ice wand",
            "take zulpowand",
            "go kitchen",
            "wave cauldron ice wand",
            "put nightshade in cauldron",
            "put lily of the valley in cauldron",
            "put spiderweb in cauldron",
            "go pantry",
            "go kitchen",
            "wave cauldron zulpowand",
            "go pantry",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "put spiderweb in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ectoplasm1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i lilyofthevalley)\n\t\t(in ?i ?c)\n\t\t(in ectoplasm1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type ectoplasm1 ectoplasm))\n\t\t(not (at ectoplasm1 ?r))\n\t\t(not (in ectoplasm1 ?c))\n\t\t(not (accessible ectoplasm1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i lilyofthevalley))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The lily of the valley mingles with the ectoplasm with a gloopy sound producing a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,lilyofthevalley1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), in_t(TURN,lilyofthevalley1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,lilyofthevalley1,ROOM) :- turn(TURN), at_t(TURN,lilyofthevalley1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,lilyofthevalley1,cauldron1) :- turn(TURN), in_t(TURN,lilyofthevalley1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spiderweb)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spiderweb))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The spiderweb mingles with the liquid in the cauldron with a swirling pattern.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spiderweb1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,spiderweb1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,spiderweb1,ROOM) :- turn(TURN), at_t(TURN,spiderweb1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,spiderweb1,cauldron1) :- turn(TURN), in_t(TURN,spiderweb1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(zulponated ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the zulponated cauldron churgulates with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), zulponated_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid3 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid3 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4 ?r)\n\t\t(in liquid4 ?c)\n\t\t(accessible liquid4)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron bubbles with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid3,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i nightshade)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type nightshade1 nightshade))\n\t\t(not (at nightshade1 ?r))\n\t\t(not (in nightshade1 ?c))\n\t\t(not (accessible nightshade1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The nightshade mingles with the liquid with a pop producing the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,nightshade1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,nightshade1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,nightshade1,ROOM) :- turn(TURN), at_t(TURN,nightshade1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,nightshade1,cauldron1) :- turn(TURN), in_t(TURN,nightshade1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 6,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,cellar1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,cellar1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Floorboard potion\nIngredients: Ectoplasm, eye of newt, peach, spider egg.\n1. Pour ectoplasm into your cauldron.\n2. Add the peach into your cauldron.\n3. Wiggle a zulpowand over your cauldron.\n4. Use a fairy wand over your cauldron.\n5. Add the eye of newt into your cauldron.\n6. Put the spider egg into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spideregg1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "fairywand1"
            ],
            [
              "take",
              "zulpowand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "fairywand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "take",
              "eyeofnewt1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "zulpowand1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "put",
              "eyeofnewt1",
              "cauldron1"
            ],
            [
              "put",
              "spideregg1",
              "cauldron1"
            ],
            [
              "go",
              "conservatory1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "go cellar",
            "take spider egg",
            "go hallway",
            "go magic workshop",
            "take fairy wand",
            "take zulpowand",
            "go kitchen",
            "wave cauldron fairy wand",
            "go pantry",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "open ice box",
            "take peach",
            "take eye of newt",
            "go kitchen",
            "wave cauldron zulpowand",
            "put peach in cauldron",
            "put eye of newt in cauldron",
            "put spider egg in cauldron",
            "go conservatory"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ectoplasm1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in ectoplasm1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type ectoplasm1 ectoplasm))\n\t\t(not (at ectoplasm1 ?r))\n\t\t(not (in ectoplasm1 ?c))\n\t\t(not (accessible ectoplasm1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i peach))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The peach combines with the ectoplasm with a swirling pattern creating a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid1 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid1 liquid)\n\t\t(zulponated ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2 ?r)\n\t\t(in liquid2 ?c)\n\t\t(accessible liquid2)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the zulponated cauldron rectangulates with a pop.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), zulponated_t(TURN,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(glittery ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the glittery cauldron churgulates with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), glittery_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i eyeofnewt)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i eyeofnewt))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The eye of newt absorbs into the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,eyeofnewt1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,eyeofnewt1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,eyeofnewt1,ROOM) :- turn(TURN), at_t(TURN,eyeofnewt1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,eyeofnewt1,cauldron1) :- turn(TURN), in_t(TURN,eyeofnewt1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spideregg)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type spideregg1 spideregg))\n\t\t(not (at spideregg1 ?r))\n\t\t(not (in spideregg1 ?c))\n\t\t(not (accessible spideregg1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The spider egg mingles with the liquid with a gloopy sound leaving the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spideregg1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,spideregg1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,spideregg1,ROOM) :- turn(TURN), at_t(TURN,spideregg1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,spideregg1,cauldron1) :- turn(TURN), in_t(TURN,spideregg1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 7,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,That odd potion\nIngredients: Ectoplasm, spider, banana, green beetle.\n1. Pour ectoplasm into your cauldron.\n2. Put the spider into your cauldron.\n3. Put the banana into your cauldron.\n4. Use a fairy wand on your cauldron.\n5. Wiggle a ice wand at your cauldron.\n6. Add the green beetle into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spider1"
            ],
            [
              "take",
              "greenbeetle1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "fairywand1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "spider1",
              "cauldron1"
            ],
            [
              "put",
              "greenbeetle1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "fairywand1"
            ],
            [
              "put",
              "banana1",
              "cauldron1"
            ],
            [
              "put",
              "banana1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "go cellar",
            "take spider",
            "take green beetle",
            "go hallway",
            "go magic workshop",
            "take fairy wand",
            "take ice wand",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "go kitchen",
            "wave cauldron ice wand",
            "put spider in cauldron",
            "put green beetle in cauldron",
            "go pantry",
            "open ice box",
            "take banana",
            "go kitchen",
            "wave cauldron fairy wand",
            "put banana in cauldron",
            "put banana in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ectoplasm1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spider)\n\t\t(in ?i ?c)\n\t\t(in ectoplasm1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type ectoplasm1 ectoplasm))\n\t\t(not (at ectoplasm1 ?r))\n\t\t(not (in ectoplasm1 ?c))\n\t\t(not (accessible ectoplasm1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spider))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The spider mingles with the ectoplasm with a puff of vapor producing a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,spider1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), in_t(TURN,spider1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,spider1,ROOM) :- turn(TURN), at_t(TURN,spider1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,spider1,cauldron1) :- turn(TURN), in_t(TURN,spider1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i banana)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i banana))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The banana combines with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,banana1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,banana1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,banana1,ROOM) :- turn(TURN), at_t(TURN,banana1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,banana1,cauldron1) :- turn(TURN), in_t(TURN,banana1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(glittery ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the glittery cauldron sloshes with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), glittery_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid3 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid3 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4 ?r)\n\t\t(in liquid4 ?c)\n\t\t(accessible liquid4)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron undulates with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid3,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i greenbeetle)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type greenbeetle1 greenbeetle))\n\t\t(not (at greenbeetle1 ?r))\n\t\t(not (in greenbeetle1 ?c))\n\t\t(not (accessible greenbeetle1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The green beetle combines with the liquid with a phase shift leaving the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,greenbeetle1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,greenbeetle1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,greenbeetle1,ROOM) :- turn(TURN), at_t(TURN,greenbeetle1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,greenbeetle1,cauldron1) :- turn(TURN), in_t(TURN,greenbeetle1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 8,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Absolutely incredulous potion\nIngredients: Water, red beetle, eye of newt, plonkle crystal.\n1. Pour water into your cauldron.\n2. Put the eye of newt into your cauldron.\n3. Swirl a ice wand over your cauldron.\n4. Add the red beetle into your cauldron.\n5. Add the plonkle crystal into your cauldron.\n6. Swirl a fire wand at your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 24,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "plonklecrystal1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "redbeetle1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "put",
              "redbeetle1",
              "cauldron1"
            ],
            [
              "put",
              "plonklecrystal1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "take",
              "eyeofnewt1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "eyeofnewt1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "stir",
              "water1",
              "kitchen1floor1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "take plonkle crystal",
            "go cellar",
            "take red beetle",
            "go hallway",
            "go magic workshop",
            "take fire wand",
            "take ice wand",
            "go kitchen",
            "dump bucket of water cauldron",
            "put red beetle in cauldron",
            "put plonkle crystal in cauldron",
            "go pantry",
            "take eye of newt",
            "go kitchen",
            "wave cauldron ice wand",
            "put eye of newt in cauldron",
            "go pantry",
            "go kitchen",
            "wave cauldron fire wand",
            "stir water floor"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at water1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i eyeofnewt)\n\t\t(in ?i ?c)\n\t\t(in water1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type water1 water))\n\t\t(not (at water1 ?r))\n\t\t(not (in water1 ?c))\n\t\t(not (accessible water1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i eyeofnewt))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The eye of newt combines with the water with a phase shift leaving a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,eyeofnewt1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), in_t(TURN,eyeofnewt1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,eyeofnewt1,ROOM) :- turn(TURN), at_t(TURN,eyeofnewt1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,eyeofnewt1,cauldron1) :- turn(TURN), in_t(TURN,eyeofnewt1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid1 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid1 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2 ?r)\n\t\t(in liquid2 ?c)\n\t\t(accessible liquid2)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron sloshes with a phase shift.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i redbeetle)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i redbeetle))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The red beetle mingles with the liquid in the cauldron with a swirling pattern.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,redbeetle1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,redbeetle1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,redbeetle1,ROOM) :- turn(TURN), at_t(TURN,redbeetle1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,redbeetle1,cauldron1) :- turn(TURN), in_t(TURN,redbeetle1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i plonklecrystal)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i plonklecrystal))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The plonkle crystal mingles with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,plonklecrystal1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,plonklecrystal1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,plonklecrystal1,ROOM) :- turn(TURN), at_t(TURN,plonklecrystal1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,plonklecrystal1,cauldron1) :- turn(TURN), in_t(TURN,plonklecrystal1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid4 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid4 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid4 liquid)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid4 ?r))\n\t\t(not (in liquid4 ?c))\n\t\t(not (accessible liquid4))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the hot cauldron bubbles with a puff of vapor leaving the finished potion.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid4,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), hot_t(TURN,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 9,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Jingle potion\nIngredients: Ectoplasm, banana, sandwich, peach.\n1. Pour ectoplasm into your cauldron.\n2. Agitate the liquid using a borpulus.\n3. Swirl a fire wand on your cauldron.\n4. Add the sandwich into your cauldron.\n5. Put the peach into your cauldron.\n6. Put the banana into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 24,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "banana1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "borpulus1"
            ],
            [
              "put",
              "banana1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take borpulus",
            "go hallway",
            "go magic workshop",
            "take fire wand",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "open ice box",
            "take banana",
            "go kitchen",
            "stir ectoplasm borpulus",
            "put banana in cauldron",
            "go pantry",
            "take sandwich",
            "take peach",
            "go kitchen",
            "wave cauldron fire wand",
            "put peach in cauldron",
            "put sandwich in cauldron",
            "go pantry"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm rectangulates with a phase shift creating a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), borpulusstirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,ectoplasm1) :- turn(TURN), borpulusstirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid1 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid1 liquid1)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2 ?r)\n\t\t(in liquid2 ?c)\n\t\t(accessible liquid2)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the hot cauldron whistles with a pop.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), hot_t(TURN,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i sandwich)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i sandwich))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The sandwich combines with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,sandwich1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,sandwich1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,sandwich1,ROOM) :- turn(TURN), at_t(TURN,sandwich1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,sandwich1,cauldron1) :- turn(TURN), in_t(TURN,sandwich1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i peach))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The peach mingles with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i banana)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type banana1 banana))\n\t\t(not (at banana1 ?r))\n\t\t(not (in banana1 ?c))\n\t\t(not (accessible banana1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The banana combines with the liquid with a pop creating the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,banana1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,banana1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,banana1,ROOM) :- turn(TURN), at_t(TURN,banana1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,banana1,cauldron1) :- turn(TURN), in_t(TURN,banana1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 10,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Granny Weatherwax's potion\nIngredients: Ectoplasm, apple, plunkle crystal, prickly pear.\n1. Pour ectoplasm into your cauldron.\n2. Put the prickly pear into your cauldron.\n3. Add the apple into your cauldron.\n4. Put the plunkle crystal into your cauldron.\n5. Wave a fairy wand over your cauldron.\n6. Wiggle a zulpowand on your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 26,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "plunklecrystal1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "zulpowand1"
            ],
            [
              "take",
              "fairywand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "conservatory1"
            ],
            [
              "take",
              "pricklypear1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "fairywand1"
            ],
            [
              "put",
              "plunklecrystal1",
              "cauldron1"
            ],
            [
              "put",
              "pricklypear1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "apple1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "zulpowand1"
            ],
            [
              "put",
              "apple1",
              "cauldron1"
            ],
            [
              "go",
              "conservatory1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take plunkle crystal",
            "go hallway",
            "go magic workshop",
            "take zulpowand",
            "take fairy wand",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go conservatory",
            "take prickly pear",
            "go hallway",
            "go magic workshop",
            "go kitchen",
            "wave cauldron fairy wand",
            "put plunkle crystal in cauldron",
            "put prickly pear in cauldron",
            "go pantry",
            "open ice box",
            "take apple",
            "go kitchen",
            "wave cauldron zulpowand",
            "put apple in cauldron",
            "go conservatory"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ectoplasm1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i pricklypear)\n\t\t(in ?i ?c)\n\t\t(in ectoplasm1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type ectoplasm1 ectoplasm))\n\t\t(not (at ectoplasm1 ?r))\n\t\t(not (in ectoplasm1 ?c))\n\t\t(not (accessible ectoplasm1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i pricklypear))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The prickly pear combines with the ectoplasm with a gloopy sound producing a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,pricklypear1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), in_t(TURN,pricklypear1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,pricklypear1,ROOM) :- turn(TURN), at_t(TURN,pricklypear1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,pricklypear1,cauldron1) :- turn(TURN), in_t(TURN,pricklypear1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i apple)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i apple))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The apple combines with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,apple1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,apple1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,apple1,ROOM) :- turn(TURN), at_t(TURN,apple1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,apple1,cauldron1) :- turn(TURN), in_t(TURN,apple1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i plunklecrystal)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i plunklecrystal))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The plunkle crystal mingles with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,plunklecrystal1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,plunklecrystal1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,plunklecrystal1,ROOM) :- turn(TURN), at_t(TURN,plunklecrystal1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,plunklecrystal1,cauldron1) :- turn(TURN), in_t(TURN,plunklecrystal1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid3 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid3 liquid)\n\t\t(glittery ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4 ?r)\n\t\t(in liquid4 ?c)\n\t\t(accessible liquid4)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the glittery cauldron rectangulates with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid3,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), glittery_t(TURN,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid4 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid4 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid4 liquid)\n\t\t(zulponated ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid4 ?r))\n\t\t(not (in liquid4 ?c))\n\t\t(not (accessible liquid4))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the zulponated cauldron swirls with a gloopy sound creating the finished potion.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid4,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), zulponated_t(TURN,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 11,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Kawummio potion\nIngredients: Ectoplasm, plinkle crystal, eye of newt, nightshade.\n1. Pour ectoplasm into your cauldron.\n2. Agitate the liquid using a borpulus.\n3. Put the nightshade into your cauldron.\n4. Put the plinkle crystal into your cauldron.\n5. Put the eye of newt into your cauldron.\n6. Use a fire wand on your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 23,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "nightshade1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "take",
              "plinklecrystal1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "take",
              "eyeofnewt1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "put",
              "nightshade1",
              "cauldron1"
            ],
            [
              "put",
              "plinklecrystal1",
              "cauldron1"
            ],
            [
              "put",
              "eyeofnewt1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "borpulus1"
            ],
            [
              "wave",
              "cauldron1",
              "counter1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take nightshade",
            "take bucket of ectoplasm",
            "go storage room",
            "take borpulus",
            "take plinkle crystal",
            "go hallway",
            "go magic workshop",
            "take fire wand",
            "go kitchen",
            "wave cauldron fire wand",
            "go pantry",
            "take eye of newt",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "put nightshade in cauldron",
            "put plinkle crystal in cauldron",
            "put eye of newt in cauldron",
            "go pantry",
            "go kitchen",
            "stir ectoplasm borpulus",
            "wave cauldron counter"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm dances with a phase shift leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), borpulusstirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,ectoplasm1) :- turn(TURN), borpulusstirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i nightshade)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i nightshade))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The nightshade combines with the liquid in the cauldron with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,nightshade1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,nightshade1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,nightshade1,ROOM) :- turn(TURN), at_t(TURN,nightshade1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,nightshade1,cauldron1) :- turn(TURN), in_t(TURN,nightshade1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i plinklecrystal)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i plinklecrystal))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The plinkle crystal combines with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,plinklecrystal1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,plinklecrystal1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,plinklecrystal1,ROOM) :- turn(TURN), at_t(TURN,plinklecrystal1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,plinklecrystal1,cauldron1) :- turn(TURN), in_t(TURN,plinklecrystal1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i eyeofnewt)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i eyeofnewt))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The eye of newt mingles with the liquid in the cauldron with a swirling pattern.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,eyeofnewt1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,eyeofnewt1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,eyeofnewt1,ROOM) :- turn(TURN), at_t(TURN,eyeofnewt1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,eyeofnewt1,cauldron1) :- turn(TURN), in_t(TURN,eyeofnewt1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid4 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid4 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid4 liquid)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid4 ?r))\n\t\t(not (in liquid4 ?c))\n\t\t(not (accessible liquid4))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the hot cauldron sloshes with a gloopy sound creating the finished potion.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid4,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), hot_t(TURN,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 12,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Hungro's potion\nIngredients: Ectoplasm, spider, prickly pear, peach.\n1. Pour ectoplasm into your cauldron.\n2. Mix the liquid using a borpulus.\n3. Add the peach into your cauldron.\n4. Add the spider into your cauldron.\n5. Swirl a fire wand on your cauldron.\n6. Put the prickly pear into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 27,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "borpulus1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spider1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "borpulus1"
            ],
            [
              "go",
              "conservatory1"
            ],
            [
              "take",
              "pricklypear1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "put",
              "pricklypear1",
              "cauldron1"
            ],
            [
              "put",
              "spider1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take borpulus",
            "go cellar",
            "take spider",
            "go hallway",
            "go magic workshop",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "go pantry",
            "open ice box",
            "take peach",
            "go kitchen",
            "stir ectoplasm borpulus",
            "go conservatory",
            "take prickly pear",
            "go hallway",
            "go magic workshop",
            "take fire wand",
            "go kitchen",
            "wave cauldron fire wand",
            "put prickly pear in cauldron",
            "put spider in cauldron",
            "put peach in cauldron",
            "put peach in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(borpulusstirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (borpulusstirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm sloshes with a pop leaving a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), borpulusstirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nborpulusstirred_t(TURN+1,ectoplasm1) :- turn(TURN), borpulusstirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i peach))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The peach absorbs into the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spider)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spider))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The spider combines with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spider1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,spider1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,spider1,ROOM) :- turn(TURN), at_t(TURN,spider1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,spider1,cauldron1) :- turn(TURN), in_t(TURN,spider1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid3 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid3 liquid)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4 ?r)\n\t\t(in liquid4 ?c)\n\t\t(accessible liquid4)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the hot cauldron sloshes with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid3,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), hot_t(TURN,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i pricklypear)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type pricklypear1 pricklypear))\n\t\t(not (at pricklypear1 ?r))\n\t\t(not (in pricklypear1 ?c))\n\t\t(not (accessible pricklypear1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The prickly pear combines with the liquid with a pop leaving the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,pricklypear1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,pricklypear1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,pricklypear1,ROOM) :- turn(TURN), at_t(TURN,pricklypear1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,pricklypear1,cauldron1) :- turn(TURN), in_t(TURN,pricklypear1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 13,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Satisfying potion\nIngredients: Water, orange, spider, sandwich.\n1. Pour water into your cauldron.\n2. Put the sandwich into your cauldron.\n3. Put the spider into your cauldron.\n4. Use a ice wand at your cauldron.\n5. Wave a fairy wand over your cauldron.\n6. Add the orange into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "waterbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spider1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "take",
              "fairywand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "fairywand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "take",
              "orange1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ],
            [
              "put",
              "orange1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "waterbucket1",
              "cauldron1"
            ],
            [
              "put",
              "spider1",
              "cauldron1"
            ],
            [
              "put",
              "orange1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of water",
            "go storage room",
            "go cellar",
            "take spider",
            "go hallway",
            "go magic workshop",
            "take ice wand",
            "take fairy wand",
            "go kitchen",
            "wave cauldron fairy wand",
            "go pantry",
            "open ice box",
            "take sandwich",
            "take orange",
            "go kitchen",
            "wave cauldron ice wand",
            "put sandwich in cauldron",
            "put orange in cauldron",
            "go pantry",
            "go kitchen",
            "dump bucket of water cauldron",
            "put spider in cauldron",
            "put orange in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at water1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i sandwich)\n\t\t(in ?i ?c)\n\t\t(in water1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type water1 water))\n\t\t(not (at water1 ?r))\n\t\t(not (in water1 ?c))\n\t\t(not (accessible water1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i sandwich))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The sandwich mingles with the water with a puff of vapor leaving a liquid in the cauldron.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,water1,ROOM), at_t(TURN,sandwich1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,water1,cauldron1), in_t(TURN,sandwich1,cauldron1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,water1,ROOM) :- turn(TURN), at_t(TURN,water1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,water1,cauldron1) :- turn(TURN), in_t(TURN,water1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,water1) :- turn(TURN), accessible_t(TURN,water1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nat_t(TURN+1,sandwich1,ROOM) :- turn(TURN), at_t(TURN,sandwich1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,sandwich1,cauldron1) :- turn(TURN), in_t(TURN,sandwich1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spider)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spider))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The spider combines with the liquid in the cauldron with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spider1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,spider1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,spider1,ROOM) :- turn(TURN), at_t(TURN,spider1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,spider1,cauldron1) :- turn(TURN), in_t(TURN,spider1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid2 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid2 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3 ?r)\n\t\t(in liquid3 ?c)\n\t\t(accessible liquid3)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron churgulates with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid2,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), cold_t(TURN,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid3 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid3 liquid)\n\t\t(glittery ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4 ?r)\n\t\t(in liquid4 ?c)\n\t\t(accessible liquid4)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the glittery cauldron dances with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid3,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), glittery_t(TURN,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i orange)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type orange1 orange))\n\t\t(not (at orange1 ?r))\n\t\t(not (in orange1 ?c))\n\t\t(not (accessible orange1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The orange absorbs into the liquid with a phase shift creating the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,orange1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,orange1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,orange1,ROOM) :- turn(TURN), at_t(TURN,orange1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,orange1,cauldron1) :- turn(TURN), in_t(TURN,orange1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 14,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Holperdinger potion\nIngredients: Ectoplasm, sandwich, green beetle, prickly pear.\n1. Pour ectoplasm into your cauldron.\n2. Agitate the liquid using a ladle.\n3. Use a fire wand at your cauldron.\n4. Add the green beetle into your cauldron.\n5. Put the sandwich into your cauldron.\n6. Put the prickly pear into your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 27,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "ladle1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "greenbeetle1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "firewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "put",
              "greenbeetle1",
              "cauldron1"
            ],
            [
              "go",
              "conservatory1"
            ],
            [
              "take",
              "pricklypear1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "firewand1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "sandwich1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "ladle1"
            ],
            [
              "put",
              "pricklypear1",
              "cauldron1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ],
            [
              "put",
              "sandwich1",
              "cauldron1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "go storage room",
            "take ladle",
            "go cellar",
            "take green beetle",
            "go hallway",
            "go magic workshop",
            "take fire wand",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "put green beetle in cauldron",
            "go conservatory",
            "take prickly pear",
            "go hallway",
            "go magic workshop",
            "go kitchen",
            "wave cauldron fire wand",
            "go pantry",
            "open ice box",
            "take sandwich",
            "go kitchen",
            "stir ectoplasm ladle",
            "put prickly pear in cauldron",
            "put sandwich in cauldron",
            "put sandwich in cauldron"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(ladlestirred ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (ladlestirred ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm swirls with a phase shift creating a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), ladlestirred_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nladlestirred_t(TURN+1,ectoplasm1) :- turn(TURN), ladlestirred_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid1 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid1 liquid)\n\t\t(hot ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2 ?r)\n\t\t(in liquid2 ?c)\n\t\t(accessible liquid2)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the hot cauldron rectangulates with a puff of vapor.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), hot_t(TURN,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i greenbeetle)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i greenbeetle))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The green beetle mingles with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,greenbeetle1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,greenbeetle1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,greenbeetle1,ROOM) :- turn(TURN), at_t(TURN,greenbeetle1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,greenbeetle1,cauldron1) :- turn(TURN), in_t(TURN,greenbeetle1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i sandwich)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i sandwich))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The sandwich combines with the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,sandwich1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,sandwich1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,sandwich1,ROOM) :- turn(TURN), at_t(TURN,sandwich1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,sandwich1,cauldron1) :- turn(TURN), in_t(TURN,sandwich1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i pricklypear)\n\t\t(in ?i ?c)\n\t\t(in liquid4 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type pricklypear1 pricklypear))\n\t\t(not (at pricklypear1 ?r))\n\t\t(not (in pricklypear1 ?c))\n\t\t(not (accessible pricklypear1))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The prickly pear absorbs into the liquid with a gloopy sound producing the finished potion in the cauldron.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,pricklypear1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), in_t(TURN,pricklypear1,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nat_t(TURN+1,pricklypear1,ROOM) :- turn(TURN), at_t(TURN,pricklypear1,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,pricklypear1,cauldron1) :- turn(TURN), in_t(TURN,pricklypear1,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        },
        {
          "game_id": 15,
          "variant": "basic",
          "prompt": "You are playing a text adventure game. I will describe what you can perceive in the game. You write the single action you want to take in the game starting with >. Only reply with an action.\nFor example:\n> open cupboard\n\nYou can have up to two objects in your inventory at the same time.\n\nYour goal for this game is to brew a potion following the potion recipe.\n\nOnce you have achieved your goal, write \"> done\" to end the game.\n\n",
          "initial_state": [
            "type(crate1,crate)",
            "at(crate1,storage1)",
            "support(crate1)",
            "type(workbench1,workbench)",
            "at(workbench1,workshop1)",
            "support(workbench1)",
            "type(gardenbench1,gardenbench)",
            "at(gardenbench1,garden1)",
            "support(gardenbench1)",
            "type(plantingtable1,plantingtable)",
            "at(plantingtable1,conservatory1)",
            "support(plantingtable1)",
            "type(utilityshelf1,utilityshelf)",
            "at(utilityshelf1,broomcloset1)",
            "support(utilityshelf1)",
            "type(ingredientrack1,ingredientrack)",
            "at(ingredientrack1,pantry1)",
            "support(ingredientrack1)",
            "type(orrery1,orrery)",
            "at(orrery1,workshop1)",
            "support(orrery1)",
            "type(kitchen1floor1,floor)",
            "type(pantry1floor1,floor)",
            "type(hallway1floor1,floor)",
            "type(broomcloset1floor1,floor)",
            "type(bedroom1floor1,floor)",
            "type(storage1floor1,floor)",
            "type(readingroom1floor1,floor)",
            "type(workshop1floor1,floor)",
            "type(workshop1ceiling1,ceiling)",
            "type(cellar1floor1,floor)",
            "type(conservatory1floor1,floor)",
            "type(garden1floor1,floor)",
            "type(outhouse1floor1,floor)",
            "type(player1,player)",
            "type(table1,table)",
            "type(sidetable1,sidetable)",
            "type(counter1,counter)",
            "type(icebox1,icebox)",
            "type(cupboard1,cupboard)",
            "type(wardrobe1,wardrobe)",
            "type(shelf1,shelf)",
            "type(chair1,chair)",
            "type(bed1,bed)",
            "type(couch1,couch)",
            "type(broom1,broom)",
            "type(mop1,mop)",
            "type(sandwich1,sandwich)",
            "type(apple1,apple)",
            "type(banana1,banana)",
            "type(orange1,orange)",
            "type(peach1,peach)",
            "type(plate1,plate)",
            "type(book1,book)",
            "type(pillow1,pillow)",
            "type(toad1,toad)",
            "type(greenbeetle1,greenbeetle)",
            "type(redbeetle1,redbeetle)",
            "type(eyeofnewt1,eyeofnewt)",
            "type(plinklecrystal1,plinklecrystal)",
            "type(plonklecrystal1,plonklecrystal)",
            "type(plunklecrystal1,plunklecrystal)",
            "type(spider1,spider)",
            "type(spiderweb1,spiderweb)",
            "type(spideregg1,spideregg)",
            "type(lilyofthevalley1,lilyofthevalley)",
            "type(nightshade1,nightshade)",
            "type(pricklypear1,pricklypear)",
            "type(waterbucket1,waterbucket)",
            "type(plasmbucket1,plasmbucket)",
            "type(cauldron1,cauldron)",
            "needs_support(cauldron1)",
            "on(cauldron1,kitchen1floor1)",
            "type(ladle1,ladle)",
            "type(whisk1,whisk)",
            "type(spoon1,spoon)",
            "type(borpulus1,borpulus)",
            "type(firewand1,firewand)",
            "type(icewand1,icewand)",
            "type(fairywand1,fairywand)",
            "type(zulpowand1,zulpowand)",
            "type(liquid1,liquid)",
            "type(potion1,potion)",
            "type(potionrecipe1,potionrecipe)",
            "room(kitchen1,kitchen)",
            "room(pantry1,pantry)",
            "room(hallway1,hallway)",
            "room(broomcloset1,broomcloset)",
            "room(bedroom1,bedroom)",
            "room(storage1,storage)",
            "room(readingroom1,readingroom)",
            "room(workshop1,workshop)",
            "room(cellar1,cellar)",
            "room(conservatory1,conservatory)",
            "room(garden1,garden)",
            "room(outhouse1,outhouse)",
            "at(kitchen1floor1,kitchen1)",
            "at(pantry1floor1,pantry1)",
            "at(hallway1floor1,hallway1)",
            "at(broomcloset1floor1,broomcloset1)",
            "at(bedroom1floor1,bedroom1)",
            "at(storage1floor1,storage1)",
            "at(readingroom1floor1,readingroom1)",
            "at(workshop1floor1,workshop1)",
            "at(workshop1ceiling1,workshop1)",
            "at(cellar1floor1,cellar1)",
            "at(conservatory1floor1,conservatory1)",
            "at(garden1floor1,garden1)",
            "at(outhouse1floor1,outhouse1)",
            "at(player1,bedroom1)",
            "at(potionrecipe1,bedroom1)",
            "at(table1,readingroom1)",
            "at(sidetable1,readingroom1)",
            "at(counter1,kitchen1)",
            "at(icebox1,pantry1)",
            "at(cupboard1,kitchen1)",
            "at(wardrobe1,bedroom1)",
            "at(shelf1,readingroom1)",
            "at(chair1,readingroom1)",
            "at(bed1,bedroom1)",
            "at(couch1,readingroom1)",
            "at(broom1,broomcloset1)",
            "at(mop1,broomcloset1)",
            "at(sandwich1,pantry1)",
            "at(apple1,pantry1)",
            "at(banana1,pantry1)",
            "at(orange1,pantry1)",
            "at(peach1,pantry1)",
            "at(plate1,kitchen1)",
            "at(book1,bedroom1)",
            "at(pillow1,bedroom1)",
            "at(toad1,pantry1)",
            "at(greenbeetle1,cellar1)",
            "at(redbeetle1,cellar1)",
            "at(eyeofnewt1,pantry1)",
            "at(plinklecrystal1,storage1)",
            "at(plonklecrystal1,storage1)",
            "at(plunklecrystal1,storage1)",
            "at(spider1,cellar1)",
            "at(spiderweb1,cellar1)",
            "at(spideregg1,cellar1)",
            "at(lilyofthevalley1,garden1)",
            "at(nightshade1,garden1)",
            "at(pricklypear1,conservatory1)",
            "at(waterbucket1,garden1)",
            "at(plasmbucket1,broomcloset1)",
            "at(cauldron1,kitchen1)",
            "at(ladle1,storage1)",
            "at(whisk1,storage1)",
            "at(spoon1,storage1)",
            "at(borpulus1,storage1)",
            "at(firewand1,workshop1)",
            "at(icewand1,workshop1)",
            "at(fairywand1,workshop1)",
            "at(zulpowand1,workshop1)",
            "support(kitchen1floor1)",
            "support(pantry1floor1)",
            "support(hallway1floor1)",
            "support(broomcloset1floor1)",
            "support(bedroom1floor1)",
            "support(storage1floor1)",
            "support(readingroom1floor1)",
            "support(workshop1floor1)",
            "support(workshop1ceiling1)",
            "support(cellar1floor1)",
            "support(conservatory1floor1)",
            "support(garden1floor1)",
            "support(outhouse1floor1)",
            "support(table1)",
            "support(sidetable1)",
            "support(counter1)",
            "support(shelf1)",
            "support(chair1)",
            "support(bed1)",
            "support(couch1)",
            "on(zulpowand1,workshop1ceiling1)",
            "on(fairywand1,workshop1ceiling1)",
            "on(icewand1,workshop1ceiling1)",
            "on(firewand1,workshop1ceiling1)",
            "on(borpulus1,storage1floor1)",
            "on(spoon1,storage1floor1)",
            "on(whisk1,storage1floor1)",
            "on(ladle1,storage1floor1)",
            "on(plasmbucket1,broomcloset1floor1)",
            "on(waterbucket1,garden1floor1)",
            "on(pricklypear1,conservatory1floor1)",
            "on(nightshade1,garden1floor1)",
            "on(lilyofthevalley1,garden1floor1)",
            "on(spideregg1,cellar1floor1)",
            "on(spiderweb1,cellar1floor1)",
            "on(spider1,cellar1floor1)",
            "on(plunklecrystal1,storage1floor1)",
            "on(plonklecrystal1,storage1floor1)",
            "on(plinklecrystal1,storage1floor1)",
            "on(eyeofnewt1,pantry1floor1)",
            "on(redbeetle1,cellar1floor1)",
            "on(greenbeetle1,cellar1floor1)",
            "on(pillow1,bedroom1floor1)",
            "on(potionrecipe1,bed1)",
            "on(book1,bed1)",
            "on(plate1,kitchen1floor1)",
            "on(mop1,broomcloset1floor1)",
            "on(broom1,broomcloset1floor1)",
            "container(icebox1)",
            "container(cupboard1)",
            "container(wardrobe1)",
            "container(cauldron1)",
            "in(toad1,icebox1)",
            "in(peach1,icebox1)",
            "in(orange1,icebox1)",
            "in(banana1,icebox1)",
            "in(apple1,icebox1)",
            "in(sandwich1,icebox1)",
            "exit(kitchen1,pantry1)",
            "exit(kitchen1,conservatory1)",
            "exit(pantry1,kitchen1)",
            "exit(hallway1,readingroom1)",
            "exit(hallway1,broomcloset1)",
            "exit(hallway1,bedroom1)",
            "exit(hallway1,workshop1)",
            "exit(broomcloset1,hallway1)",
            "exit(bedroom1,readingroom1)",
            "exit(storage1,hallway1)",
            "exit(storage1,cellar1)",
            "exit(readingroom1,conservatory1)",
            "exit(readingroom1,garden1)",
            "exit(workshop1,kitchen1)",
            "exit(workshop1,bedroom1)",
            "exit(cellar1,hallway1)",
            "exit(conservatory1,hallway1)",
            "exit(garden1,storage1)",
            "exit(garden1,outhouse1)",
            "exit(outhouse1,garden1)",
            "receptacle(table1)",
            "receptacle(sidetable1)",
            "receptacle(counter1)",
            "receptacle(icebox1)",
            "receptacle(cupboard1)",
            "receptacle(wardrobe1)",
            "receptacle(shelf1)",
            "receptacle(chair1)",
            "receptacle(bed1)",
            "receptacle(couch1)",
            "receptacle(cauldron1)",
            "openable(icebox1)",
            "openable(cupboard1)",
            "openable(wardrobe1)",
            "closed(icebox1)",
            "closed(cupboard1)",
            "closed(wardrobe1)",
            "takeable(broom1)",
            "takeable(mop1)",
            "takeable(sandwich1)",
            "takeable(apple1)",
            "takeable(banana1)",
            "takeable(orange1)",
            "takeable(peach1)",
            "takeable(plate1)",
            "takeable(book1)",
            "takeable(pillow1)",
            "takeable(toad1)",
            "takeable(greenbeetle1)",
            "takeable(redbeetle1)",
            "takeable(eyeofnewt1)",
            "takeable(plinklecrystal1)",
            "takeable(plonklecrystal1)",
            "takeable(plunklecrystal1)",
            "takeable(spider1)",
            "takeable(spiderweb1)",
            "takeable(spideregg1)",
            "takeable(lilyofthevalley1)",
            "takeable(nightshade1)",
            "takeable(pricklypear1)",
            "takeable(waterbucket1)",
            "takeable(plasmbucket1)",
            "takeable(ladle1)",
            "takeable(whisk1)",
            "takeable(spoon1)",
            "takeable(borpulus1)",
            "takeable(firewand1)",
            "takeable(icewand1)",
            "takeable(fairywand1)",
            "takeable(zulpowand1)",
            "movable(broom1)",
            "movable(mop1)",
            "movable(sandwich1)",
            "movable(apple1)",
            "movable(banana1)",
            "movable(orange1)",
            "movable(peach1)",
            "movable(plate1)",
            "movable(book1)",
            "movable(pillow1)",
            "movable(toad1)",
            "movable(greenbeetle1)",
            "movable(redbeetle1)",
            "movable(eyeofnewt1)",
            "movable(plinklecrystal1)",
            "movable(plonklecrystal1)",
            "movable(plunklecrystal1)",
            "movable(spider1)",
            "movable(spiderweb1)",
            "movable(spideregg1)",
            "movable(lilyofthevalley1)",
            "movable(nightshade1)",
            "movable(pricklypear1)",
            "movable(waterbucket1)",
            "movable(plasmbucket1)",
            "movable(ladle1)",
            "movable(whisk1)",
            "movable(spoon1)",
            "movable(borpulus1)",
            "movable(firewand1)",
            "movable(icewand1)",
            "movable(fairywand1)",
            "movable(zulpowand1)",
            "needs_support(broom1)",
            "needs_support(mop1)",
            "needs_support(sandwich1)",
            "needs_support(apple1)",
            "needs_support(banana1)",
            "needs_support(orange1)",
            "needs_support(peach1)",
            "needs_support(plate1)",
            "needs_support(book1)",
            "needs_support(pillow1)",
            "needs_support(toad1)",
            "needs_support(greenbeetle1)",
            "needs_support(redbeetle1)",
            "needs_support(eyeofnewt1)",
            "needs_support(plinklecrystal1)",
            "needs_support(plonklecrystal1)",
            "needs_support(plunklecrystal1)",
            "needs_support(spider1)",
            "needs_support(spiderweb1)",
            "needs_support(spideregg1)",
            "needs_support(lilyofthevalley1)",
            "needs_support(nightshade1)",
            "needs_support(pricklypear1)",
            "needs_support(waterbucket1)",
            "needs_support(water1)",
            "needs_support(plasmbucket1)",
            "needs_support(ectoplasm1)",
            "needs_support(ladle1)",
            "needs_support(whisk1)",
            "needs_support(spoon1)",
            "needs_support(borpulus1)",
            "needs_support(firewand1)",
            "needs_support(icewand1)",
            "needs_support(fairywand1)",
            "needs_support(zulpowand1)",
            "ingredient(sandwich1)",
            "ingredient(apple1)",
            "ingredient(banana1)",
            "ingredient(orange1)",
            "ingredient(peach1)",
            "ingredient(greenbeetle1)",
            "ingredient(redbeetle1)",
            "ingredient(eyeofnewt1)",
            "ingredient(plinklecrystal1)",
            "ingredient(plonklecrystal1)",
            "ingredient(plunklecrystal1)",
            "ingredient(spider1)",
            "ingredient(spiderweb1)",
            "ingredient(spideregg1)",
            "ingredient(lilyofthevalley1)",
            "ingredient(nightshade1)",
            "ingredient(pricklypear1)",
            "ingredient(waterbucket1)",
            "ingredient(water1)",
            "ingredient(plasmbucket1)",
            "ingredient(ectoplasm1)",
            "bucket(waterbucket1)",
            "bucket(plasmbucket1)",
            "tool(ladle1)",
            "tool(whisk1)",
            "tool(spoon1)",
            "tool(borpulus1)",
            "tool(firewand1)",
            "tool(icewand1)",
            "tool(fairywand1)",
            "tool(zulpowand1)",
            "readable(potionrecipe1)",
            "text(potionrecipe1,Kawummio potion\nIngredients: Ectoplasm, peach, lily of the valley, spider.\n1. Pour ectoplasm into your cauldron.\n2. Mix the liquid using a whisk.\n3. Put the lily of the valley into your cauldron.\n4. Put the peach into your cauldron.\n5. Put the spider into your cauldron.\n6. Swirl a ice wand over your cauldron.\n)"
          ],
          "goal_state": [
            "at(potion1,kitchen1)"
          ],
          "max_turns": 100,
          "optimal_turns": 25,
          "optimal_solution": [
            [
              "go",
              "readingroom1"
            ],
            [
              "go",
              "garden1"
            ],
            [
              "take",
              "plasmbucket1"
            ],
            [
              "take",
              "lilyofthevalley1"
            ],
            [
              "go",
              "storage1"
            ],
            [
              "take",
              "whisk1"
            ],
            [
              "go",
              "cellar1"
            ],
            [
              "take",
              "spider1"
            ],
            [
              "go",
              "hallway1"
            ],
            [
              "go",
              "workshop1"
            ],
            [
              "take",
              "icewand1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "dump",
              "plasmbucket1",
              "cauldron1"
            ],
            [
              "put",
              "spider1",
              "cauldron1"
            ],
            [
              "put",
              "lilyofthevalley1",
              "cauldron1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "open",
              "icebox1"
            ],
            [
              "take",
              "peach1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "stir",
              "ectoplasm1",
              "whisk1"
            ],
            [
              "go",
              "pantry1"
            ],
            [
              "go",
              "kitchen1"
            ],
            [
              "wave",
              "cauldron1",
              "icewand1"
            ],
            [
              "put",
              "peach1",
              "cauldron1"
            ],
            [
              "stir",
              "lilyofthevalley1",
              "peach1"
            ]
          ],
          "optimal_commands": [
            "go reading room",
            "go garden",
            "take bucket of ectoplasm",
            "take lily of the valley",
            "go storage room",
            "take whisk",
            "go cellar",
            "take spider",
            "go hallway",
            "go magic workshop",
            "take ice wand",
            "go kitchen",
            "dump bucket of ectoplasm cauldron",
            "put spider in cauldron",
            "put lily of the valley in cauldron",
            "go pantry",
            "open ice box",
            "take peach",
            "go kitchen",
            "stir ectoplasm whisk",
            "go pantry",
            "go kitchen",
            "wave cauldron ice wand",
            "put peach in cauldron",
            "stir lily of the valley peach"
          ],
          "action_definitions": [
            "witch_actions_core.json"
          ],
          "room_definitions": [
            "witch_rooms.json"
          ],
          "entity_definitions": [
            "witch_entities.json"
          ],
          "domain_definitions": [
            "witch_domain_core.json"
          ],
          "event_definitions": [
            {
              "type_name": "workshop_antigravity_objects",
              "pddl": "(:event ANTIGRAVITY_OBJECTS\n    :parameters (?e - entity ?h - receptacle ?c - ceiling ?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?e ?r)\n        (at ?p ?r)\n        (not (type ?h ceiling))\n        (or\n            (on ?e ?h)\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            )\n        (type ?c ceiling)\n        )\n    :effect (and\n        (when\n            (and\n                (in ?e ?h)\n                (open ?h)\n                )\n            (and\n                (not (in ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        (when\n            (on ?e ?h)\n            (and\n                (not (on ?e ?h))\n                (on ?e ?c)\n                )\n            )\n        )\n    )",
              "event_feedback": "The {{ e }} floats up to the ceiling.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_start",
              "pddl": "(:event ANTIGRAVPLAYERSTART\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r workshop)\n        (at ?p ?r)\n        (not (floating ?p))\n        )\n    :effect (and\n        (floating ?p)\n        )\n    )",
              "event_feedback": "Magical experiments have reversed and dampened gravity in this room. You begin to float in the air.",
              "asp": ""
            },
            {
              "type_name": "workshop_antigravity_player_float_stop",
              "pddl": "(:event ANTIGRAVPLAYERSTOP\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (not (room ?r workshop))\n        (at ?p ?r)\n        (floating ?p)\n        )\n    :effect (and\n        (not (floating ?p))\n        )\n    )",
              "event_feedback": "Gravity behaves normally in this room. You stop floating in the air.",
              "asp": ""
            },
            {
              "type_name": "outhouse_teleport",
              "pddl": "(:event OUTHOUSETELEPORT\n    :parameters (?r - room ?p - player)\n    :precondition (and\n        (room ?r outhouse)\n        (at ?p ?r)\n        )\n    :effect (and\n        (at ?p kitchen1)\n        (not (at ?p ?r))\n        (forall (?e - takeable)\n            (when\n                (in ?e inventory)\n                (and\n                    (at ?e kitchen1)\n                    (not (at ?e ?r))\n                )\n            )\n        )\n    )\n)",
              "event_feedback": "The world twists around you, and you suddenly find yourself elsewhere. {{ room_desc }}",
              "asp": "",
              "randomize": {
                "initial_value": "kitchen1",
                "replace_type": "room",
                "not_replacer": [
                  "outhouse1"
                ]
              }
            },
            {
              "type_name": "potion_step_1",
              "pddl": "(:event POTIONSTEP1\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at ?l ?r)\n\t\t(at ?c ?r)\n\t\t(in ?l ?c)\n\t\t(type ?c cauldron)\n\t\t(type ?l ectoplasm)\n\t\t(whisked ?l)\n\t\t)\n\t:effect (and\n\t\t(not (at ?l ?r))\n\t\t(not (in ?l ?c))\n\t\t(not (accessible ?l))\n\t\t(not (whisked ?l))\n\t\t(type liquid1 liquid)\n\t\t(at liquid1 ?r)\n\t\t(in liquid1 ?c)\n\t\t(accessible liquid1)\n\t\t)\n\t)",
              "event_feedback": "The ectoplasm rectangulates with a puff of vapor creating a liquid.",
              "asp": "event_t(TURN,potion_step_1,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,ectoplasm1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,ectoplasm1,cauldron1), whisked_t(TURN,ectoplasm1).\ntype(liquid1,liquid) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN,liquid1,ROOM) :- event_t(TURN,potion_step_1,ROOM).\nin_t(TURN,liquid1,cauldron1) :- event_t(TURN,potion_step_1,ROOM).\naccessible_t(TURN,liquid1) :- event_t(TURN,potion_step_1,ROOM).\nat_t(TURN+1,liquid1,ROOM) :- at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,ectoplasm1,ROOM) :- turn(TURN), at_t(TURN,ectoplasm1,ROOM), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nin_t(TURN+1,ectoplasm1,cauldron1) :- turn(TURN), in_t(TURN,ectoplasm1,cauldron1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\naccessible_t(TURN+1,ectoplasm1) :- turn(TURN), accessible_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_).\nwhisked_t(TURN+1,ectoplasm1) :- turn(TURN), whisked_t(TURN,ectoplasm1), not event_t(TURN,potion_step_1,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_2",
              "pddl": "(:event POTIONSTEP2\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid1 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i lilyofthevalley)\n\t\t(in ?i ?c)\n\t\t(in liquid1 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid1 liquid))\n\t\t(not (at liquid1 ?r))\n\t\t(not (in liquid1 ?c))\n\t\t(not (accessible liquid1))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i lilyofthevalley))\n\t\t(type liquid2 liquid)\n\t\t(at liquid2  ?r)\n\t\t(in liquid2  ?c)\n\t\t(accessible liquid2 )\n\t\t)\n\t)",
              "event_feedback": "The lily of the valley combines with the liquid in the cauldron with a phase shift.",
              "asp": "event_t(TURN,potion_step_2,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,lilyofthevalley1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid1,cauldron1), in_t(TURN,lilyofthevalley1,cauldron1).\ntype(liquid2,liquid) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN,liquid2,ROOM) :- event_t(TURN,potion_step_2,ROOM).\nin_t(TURN,liquid2,cauldron1) :- event_t(TURN,potion_step_2,ROOM).\naccessible_t(TURN,liquid2) :- event_t(TURN,potion_step_2,ROOM).\nat_t(TURN+1,liquid2,ROOM) :- at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid1,ROOM) :- turn(TURN), at_t(TURN,liquid1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid1,cauldron1) :- turn(TURN), in_t(TURN,liquid1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid1) :- turn(TURN), accessible_t(TURN,liquid1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nat_t(TURN+1,lilyofthevalley1,ROOM) :- turn(TURN), at_t(TURN,lilyofthevalley1,ROOM), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_).\nin_t(TURN+1,lilyofthevalley1,cauldron1) :- turn(TURN), in_t(TURN,lilyofthevalley1,cauldron1), not event_t(TURN,potion_step_2,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_3",
              "pddl": "(:event POTIONSTEP3\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid2 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i peach)\n\t\t(in ?i ?c)\n\t\t(in liquid2 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid2 liquid))\n\t\t(not (at liquid2 ?r))\n\t\t(not (in liquid2 ?c))\n\t\t(not (accessible liquid2))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i peach))\n\t\t(type liquid3 liquid)\n\t\t(at liquid3  ?r)\n\t\t(in liquid3  ?c)\n\t\t(accessible liquid3 )\n\t\t)\n\t)",
              "event_feedback": "The peach mingles with the liquid in the cauldron with a gloopy sound.",
              "asp": "event_t(TURN,potion_step_3,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,peach1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid2,cauldron1), in_t(TURN,peach1,cauldron1).\ntype(liquid3,liquid) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN,liquid3,ROOM) :- event_t(TURN,potion_step_3,ROOM).\nin_t(TURN,liquid3,cauldron1) :- event_t(TURN,potion_step_3,ROOM).\naccessible_t(TURN,liquid3) :- event_t(TURN,potion_step_3,ROOM).\nat_t(TURN+1,liquid3,ROOM) :- at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid2,ROOM) :- turn(TURN), at_t(TURN,liquid2,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid2,cauldron1) :- turn(TURN), in_t(TURN,liquid2,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid2) :- turn(TURN), accessible_t(TURN,liquid2), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nat_t(TURN+1,peach1,ROOM) :- turn(TURN), at_t(TURN,peach1,ROOM), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_).\nin_t(TURN+1,peach1,cauldron1) :- turn(TURN), in_t(TURN,peach1,cauldron1), not event_t(TURN,potion_step_3,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_4",
              "pddl": "(:event POTIONSTEP4\n\t:parameters (?l - liquid ?i - ingredient ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid3 ?r)\n\t\t(at ?c ?r)\n\t\t(at ?i ?r)\n\t\t(type ?c cauldron)\n\t\t(type ?i spider)\n\t\t(in ?i ?c)\n\t\t(in liquid3 ?c)\n\t\t)\n\t:effect (and\n\t\t(not (type liquid3 liquid))\n\t\t(not (at liquid3 ?r))\n\t\t(not (in liquid3 ?c))\n\t\t(not (accessible liquid3))\n\t\t(not (at ?i ?r))\n\t\t(not (in ?i ?c))\n\t\t(not (type ?i spider))\n\t\t(type liquid4 liquid)\n\t\t(at liquid4  ?r)\n\t\t(in liquid4  ?c)\n\t\t(accessible liquid4 )\n\t\t)\n\t)",
              "event_feedback": "The spider absorbs into the liquid in the cauldron with a pop.",
              "asp": "event_t(TURN,potion_step_4,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,spider1,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid3,cauldron1), in_t(TURN,spider1,cauldron1).\ntype(liquid4,liquid) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN,liquid4,ROOM) :- event_t(TURN,potion_step_4,ROOM).\nin_t(TURN,liquid4,cauldron1) :- event_t(TURN,potion_step_4,ROOM).\naccessible_t(TURN,liquid4) :- event_t(TURN,potion_step_4,ROOM).\nat_t(TURN+1,liquid4,ROOM) :- at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid3,ROOM) :- turn(TURN), at_t(TURN,liquid3,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid3,cauldron1) :- turn(TURN), in_t(TURN,liquid3,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid3) :- turn(TURN), accessible_t(TURN,liquid3), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nat_t(TURN+1,spider1,ROOM) :- turn(TURN), at_t(TURN,spider1,ROOM), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_).\nin_t(TURN+1,spider1,cauldron1) :- turn(TURN), in_t(TURN,spider1,cauldron1), not event_t(TURN,potion_step_4,ROOM), room(ROOM,_)."
            },
            {
              "type_name": "potion_step_5",
              "pddl": "(:event POTIONSTEP5\n\t:parameters (?l - liquid ?c - container ?r - room)\n\t:precondition (and\n\t\t(at liquid4 ?r)\n\t\t(at ?c ?r)\n\t\t(in liquid4 ?c)\n\t\t(type ?c cauldron)\n\t\t(type liquid4 liquid)\n\t\t(cold ?c)\n\t\t)\n\t:effect (and\n\t\t(not (at liquid4 ?r))\n\t\t(not (in liquid4 ?c))\n\t\t(not (accessible liquid4))\n\t\t(type potion1 potion)\n\t\t(at potion1 ?r)\n\t\t(in potion1 ?c)\n\t\t(accessible potion1)\n\t\t)\n\t)",
              "event_feedback": "The liquid in the cold cauldron undulates with a phase shift leaving the finished potion.",
              "asp": "event_t(TURN,potion_step_5,ROOM) :- turn(TURN), room(ROOM,_), at_t(TURN,liquid4,ROOM), at_t(TURN,cauldron1,ROOM),in_t(TURN,liquid4,cauldron1), cold_t(TURN,cauldron1).\ntype(potion1,potion) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN,potion1,ROOM) :- event_t(TURN,potion_step_5,ROOM).\nin_t(TURN,potion1,cauldron1) :- event_t(TURN,potion_step_5,ROOM).\naccessible_t(TURN,potion1) :- event_t(TURN,potion_step_5,ROOM).\nat_t(TURN+1,potion1,ROOM) :- at_t(TURN,potion1,ROOM), turn(TURN), room(ROOM,_).\nin_t(TURN+1,potion1,cauldron1) :- in_t(TURN,potion1,cauldron1), turn(TURN), room(ROOM,_).\naccessible_t(TURN+1,potion1) :- accessible_t(TURN,potion1), turn(TURN), room(ROOM,_).\nat_t(TURN+1,liquid4,ROOM) :- turn(TURN), at_t(TURN,liquid4,ROOM), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\nin_t(TURN+1,liquid4,cauldron1) :- turn(TURN), in_t(TURN,liquid4,cauldron1), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_).\naccessible_t(TURN+1,liquid4) :- turn(TURN), accessible_t(TURN,liquid4), not event_t(TURN,potion_step_5,ROOM), room(ROOM,_)."
            }
          ]
        }
      ]
    }
  ]
}