{
  "medium": [
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the subst in the unsust, the mical on the table and the maten on the dente.",
      "initial_state": [
        "at(uness1floor1,uness1)",
        "at(iness1floor1,iness1)",
        "at(unree1floor1,unree1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(dente1,livingroom1)",
        "at(counter1,uness1)",
        "at(unsust1,iness1)",
        "at(cupboard1,uness1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,iness1)",
        "at(sness1,unree1)",
        "at(chair1,livingroom1)",
        "at(scont1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(maten1,broomcloset1)",
        "at(mical1,broomcloset1)",
        "at(sandwich1,iness1)",
        "at(apple1,iness1)",
        "at(cally1,iness1)",
        "at(diale1,iness1)",
        "at(peach1,iness1)",
        "at(subst1,uness1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(uness1floor1,floor)",
        "type(iness1floor1,floor)",
        "type(unree1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(dente1,dente)",
        "type(counter1,counter)",
        "type(unsust1,unsust)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(sness1,sness)",
        "type(chair1,chair)",
        "type(scont1,scont)",
        "type(couch1,couch)",
        "type(maten1,maten)",
        "type(mical1,mical)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(cally1,cally)",
        "type(diale1,diale)",
        "type(peach1,peach)",
        "type(subst1,subst)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(uness1,uness)",
        "room(iness1,iness)",
        "room(unree1,unree)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(uness1floor1)",
        "support(iness1floor1)",
        "support(unree1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(dente1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(scont1)",
        "support(couch1)",
        "on(pillow1,scont1)",
        "on(book1,bedroom1floor1)",
        "on(subst1,uness1floor1)",
        "on(mical1,broomcloset1floor1)",
        "on(maten1,broomcloset1floor1)",
        "on(sness1,unree1floor1)",
        "container(unsust1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,unsust1)",
        "in(diale1,unsust1)",
        "in(cally1,unsust1)",
        "in(apple1,unsust1)",
        "in(sandwich1,unsust1)",
        "exit(uness1,iness1)",
        "exit(uness1,livingroom1)",
        "exit(uness1,unree1)",
        "exit(iness1,uness1)",
        "exit(unree1,uness1)",
        "exit(unree1,broomcloset1)",
        "exit(livingroom1,uness1)",
        "exit(broomcloset1,unree1)",
        "exit(bedroom1,unree1)",
        "exit(unree1,bedroom1)",
        "receptacle(table1)",
        "receptacle(dente1)",
        "receptacle(counter1)",
        "receptacle(unsust1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(scont1)",
        "receptacle(couch1)",
        "openable(unsust1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(unsust1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(sness1)",
        "takeable(maten1)",
        "takeable(mical1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(cally1)",
        "takeable(diale1)",
        "takeable(peach1)",
        "takeable(subst1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(sness1)",
        "movable(maten1)",
        "movable(mical1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(cally1)",
        "movable(diale1)",
        "movable(peach1)",
        "movable(subst1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(sness1)",
        "needs_support(maten1)",
        "needs_support(mical1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(cally1)",
        "needs_support(diale1)",
        "needs_support(peach1)",
        "needs_support(subst1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(subst1,unsust1)",
        "on(mical1,table1)",
        "on(maten1,dente1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "go",
          "unree1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mical1"
        ],
        [
          "take",
          "maten1"
        ],
        [
          "go",
          "unree1"
        ],
        [
          "go",
          "uness1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "mical1",
          "table1"
        ],
        [
          "go",
          "uness1"
        ],
        [
          "take",
          "subst1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "maten1",
          "dente1"
        ],
        [
          "go",
          "uness1"
        ],
        [
          "go",
          "iness1"
        ],
        [
          "open",
          "unsust1"
        ],
        [
          "go",
          "uness1"
        ],
        [
          "go",
          "iness1"
        ],
        [
          "put",
          "subst1",
          "unsust1"
        ]
      ],
      "optimal_commands": [
        "go unree",
        "go broom closet",
        "take mical",
        "take maten",
        "go unree",
        "go uness",
        "go living room",
        "put mical on table",
        "go uness",
        "take subst",
        "go living room",
        "put maten on dente",
        "go uness",
        "go iness",
        "open unsust",
        "go uness",
        "go iness",
        "put subst in unsust"
      ],
      "replacement_dict": {
        "rooms": {
          "hallway": "unree",
          "pantry": "iness",
          "kitchen": "uness"
        },
        "entities": {
          "banana": "cally",
          "broom": "maten",
          "refrigerator": "unsust",
          "sidetable": "dente",
          "plate": "subst",
          "bed": "scont",
          "orange": "diale",
          "pottedplant": "sness",
          "mop": "mical"
        },
        "actions": {
          "close": "eness",
          "put": "pante",
          "open": "inate"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"inate\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To inate is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "inate",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"eness\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To eness is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "eness",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"pante\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To pante is to physically place something somewhere.",
          "new_word": "pante",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "uness",
          "standard_content": [
            "unsust",
            "counter",
            "table"
          ],
          "exit_targets": [
            "iness",
            "livingroom",
            "unree"
          ],
          "max_connections": 3,
          "type_name": "uness"
        },
        {
          "repr_str": "iness",
          "standard_content": [
            "unsust",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "uness",
            "unree"
          ],
          "max_connections": 1,
          "type_name": "iness"
        },
        {
          "repr_str": "unree",
          "standard_content": [
            "sness"
          ],
          "exit_targets": [
            "uness",
            "iness",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "unree"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "sness",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "uness",
            "unree"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "maten"
          ],
          "exit_targets": [
            "unree"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "scont",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "unree"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "uness",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "dente",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "dente"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "uness"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "unsust",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "uness",
            "iness"
          ],
          "type_name": "unsust"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "uness"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "uness",
            "iness",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "iness"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "sness",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "unree",
            "bedroom"
          ],
          "type_name": "sness"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "scont",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "scont"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "maten",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "maten"
        },
        {
          "repr_str": "mical",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mical"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uness",
            "iness"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uness",
            "iness"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "cally",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uness",
            "iness"
          ],
          "type_name": "cally"
        },
        {
          "repr_str": "diale",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uness",
            "iness"
          ],
          "type_name": "diale"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uness",
            "iness"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "subst",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uness"
          ],
          "type_name": "subst"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "uness",
              "iness",
              "unree",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "dente",
              "counter",
              "unsust",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "sness",
              "chair",
              "scont",
              "couch",
              "maten",
              "mical",
              "sandwich",
              "apple",
              "cally",
              "diale",
              "peach",
              "subst",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "unsust",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "dente",
              "counter",
              "unsust",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "scont",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "dente",
              "counter",
              "shelf",
              "chair",
              "scont",
              "couch"
            ],
            "openable": [
              "unsust",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "sness",
              "maten",
              "mical",
              "sandwich",
              "apple",
              "cally",
              "diale",
              "peach",
              "subst",
              "book",
              "pillow"
            ],
            "movable": [
              "sness",
              "maten",
              "mical",
              "sandwich",
              "apple",
              "cally",
              "diale",
              "peach",
              "subst",
              "book",
              "pillow"
            ],
            "needs_support": [
              "sness",
              "maten",
              "mical",
              "sandwich",
              "apple",
              "cally",
              "diale",
              "peach",
              "subst",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the aphon in the mator, the book on the remiced and the proart on the table.",
      "initial_state": [
        "at(exper1floor1,exper1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(decte1floor1,decte1)",
        "at(enticed1floor1,enticed1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(remiced1,exper1)",
        "at(mator1,pantry1)",
        "at(uner1,exper1)",
        "at(wardrobe1,enticed1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(raticed1,hallway1)",
        "at(unbal1,livingroom1)",
        "at(bed1,enticed1)",
        "at(couch1,livingroom1)",
        "at(broom1,decte1)",
        "at(stord1,decte1)",
        "at(gaticed1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(proart1,exper1)",
        "at(book1,enticed1)",
        "at(aphon1,enticed1)",
        "at(player1,enticed1)",
        "type(exper1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(decte1floor1,floor)",
        "type(enticed1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(remiced1,remiced)",
        "type(mator1,mator)",
        "type(uner1,uner)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(raticed1,raticed)",
        "type(unbal1,unbal)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(stord1,stord)",
        "type(gaticed1,gaticed)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(proart1,proart)",
        "type(book1,book)",
        "type(aphon1,aphon)",
        "room(exper1,exper)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(decte1,decte)",
        "room(enticed1,enticed)",
        "support(exper1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(decte1floor1)",
        "support(enticed1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(remiced1)",
        "support(shelf1)",
        "support(unbal1)",
        "support(bed1)",
        "support(couch1)",
        "on(aphon1,bed1)",
        "on(book1,enticed1floor1)",
        "on(proart1,exper1floor1)",
        "on(stord1,decte1floor1)",
        "on(broom1,decte1floor1)",
        "on(raticed1,hallway1floor1)",
        "container(mator1)",
        "container(uner1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,mator1)",
        "in(orange1,mator1)",
        "in(banana1,mator1)",
        "in(apple1,mator1)",
        "in(gaticed1,mator1)",
        "exit(exper1,pantry1)",
        "exit(exper1,livingroom1)",
        "exit(exper1,hallway1)",
        "exit(pantry1,exper1)",
        "exit(hallway1,exper1)",
        "exit(hallway1,decte1)",
        "exit(livingroom1,exper1)",
        "exit(decte1,hallway1)",
        "exit(enticed1,hallway1)",
        "exit(hallway1,enticed1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(remiced1)",
        "receptacle(mator1)",
        "receptacle(uner1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(unbal1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(mator1)",
        "openable(uner1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(mator1)",
        "closed(uner1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(raticed1)",
        "takeable(broom1)",
        "takeable(stord1)",
        "takeable(gaticed1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(proart1)",
        "takeable(book1)",
        "takeable(aphon1)",
        "movable(raticed1)",
        "movable(broom1)",
        "movable(stord1)",
        "movable(gaticed1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(proart1)",
        "movable(book1)",
        "movable(aphon1)",
        "needs_support(raticed1)",
        "needs_support(broom1)",
        "needs_support(stord1)",
        "needs_support(gaticed1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(proart1)",
        "needs_support(book1)",
        "needs_support(aphon1)"
      ],
      "goal_state": [
        "in(aphon1,mator1)",
        "on(book1,remiced1)",
        "on(proart1,table1)"
      ],
      "optimal_turns": 14,
      "optimal_solution": [
        [
          "take",
          "aphon1"
        ],
        [
          "take",
          "book1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "exper1"
        ],
        [
          "take",
          "proart1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "proart1",
          "table1"
        ],
        [
          "go",
          "exper1"
        ],
        [
          "put",
          "book1",
          "remiced1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "mator1"
        ],
        [
          "go",
          "exper1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "put",
          "aphon1",
          "mator1"
        ]
      ],
      "optimal_commands": [
        "take aphon",
        "take book",
        "go hallway",
        "go exper",
        "take proart",
        "go living room",
        "put proart on table",
        "go exper",
        "put book on remiced",
        "go pantry",
        "open mator",
        "go exper",
        "go pantry",
        "put aphon in mator"
      ],
      "replacement_dict": {
        "rooms": {
          "bedroom": "enticed",
          "broomcloset": "decte",
          "kitchen": "exper"
        },
        "entities": {
          "mop": "stord",
          "pillow": "aphon",
          "refrigerator": "mator",
          "chair": "unbal",
          "sandwich": "gaticed",
          "pottedplant": "raticed",
          "counter": "remiced",
          "plate": "proart",
          "cupboard": "uner"
        },
        "actions": {
          "put": "natin",
          "take": "trion",
          "open": "perce"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"perce\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To perce is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "perce",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"trion\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To trion is to get something into one's hands, possession or control.",
          "new_word": "trion",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"natin\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To natin is to physically place something somewhere.",
          "new_word": "natin",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "exper",
          "standard_content": [
            "mator",
            "remiced",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "exper"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "mator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "exper",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "raticed"
          ],
          "exit_targets": [
            "exper",
            "pantry",
            "livingroom",
            "decte"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "raticed",
            "table",
            "unbal",
            "couch"
          ],
          "exit_targets": [
            "exper",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "decte",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "decte"
        },
        {
          "repr_str": "enticed",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "enticed"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "exper",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "enticed"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "remiced",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "exper"
          ],
          "type_name": "remiced"
        },
        {
          "repr_str": "mator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "exper",
            "pantry"
          ],
          "type_name": "mator"
        },
        {
          "repr_str": "uner",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "exper"
          ],
          "type_name": "uner"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "enticed"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "exper",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "raticed",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "enticed"
          ],
          "type_name": "raticed"
        },
        {
          "repr_str": "unbal",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "unbal"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "enticed"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "decte"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "stord",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "decte"
          ],
          "type_name": "stord"
        },
        {
          "repr_str": "gaticed",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "exper",
            "pantry"
          ],
          "type_name": "gaticed"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "exper",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "exper",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "exper",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "exper",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "proart",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "exper"
          ],
          "type_name": "proart"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "enticed"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "aphon",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "enticed"
          ],
          "type_name": "aphon"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "exper",
              "pantry",
              "hallway",
              "livingroom",
              "decte",
              "enticed"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "remiced",
              "mator",
              "uner",
              "wardrobe",
              "shelf",
              "freezer",
              "raticed",
              "unbal",
              "bed",
              "couch",
              "broom",
              "stord",
              "gaticed",
              "apple",
              "banana",
              "orange",
              "peach",
              "proart",
              "book",
              "aphon"
            ],
            "container": [
              "inventory",
              "mator",
              "uner",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "remiced",
              "mator",
              "uner",
              "wardrobe",
              "shelf",
              "freezer",
              "unbal",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "remiced",
              "shelf",
              "unbal",
              "bed",
              "couch"
            ],
            "openable": [
              "mator",
              "uner",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "raticed",
              "broom",
              "stord",
              "gaticed",
              "apple",
              "banana",
              "orange",
              "peach",
              "proart",
              "book",
              "aphon"
            ],
            "movable": [
              "raticed",
              "broom",
              "stord",
              "gaticed",
              "apple",
              "banana",
              "orange",
              "peach",
              "proart",
              "book",
              "aphon"
            ],
            "needs_support": [
              "raticed",
              "broom",
              "stord",
              "gaticed",
              "apple",
              "banana",
              "orange",
              "peach",
              "proart",
              "book",
              "aphon"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the secti in the imped, the inet on the table and the broom on the rably.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(unpish1floor1,unpish1)",
        "at(nolog1floor1,nolog1)",
        "at(livingroom1floor1,livingroom1)",
        "at(ation1floor1,ation1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(imped1,unpish1)",
        "at(stism1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(trionee1,unpish1)",
        "at(pottedplant1,nolog1)",
        "at(rably1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(nond1,livingroom1)",
        "at(broom1,ation1)",
        "at(inet1,ation1)",
        "at(trateler1,unpish1)",
        "at(apple1,unpish1)",
        "at(torish1,unpish1)",
        "at(orange1,unpish1)",
        "at(peach1,unpish1)",
        "at(secti1,kitchen1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(unpish1floor1,floor)",
        "type(nolog1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(ation1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(imped1,imped)",
        "type(stism1,stism)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(trionee1,trionee)",
        "type(pottedplant1,pottedplant)",
        "type(rably1,rably)",
        "type(bed1,bed)",
        "type(nond1,nond)",
        "type(broom1,broom)",
        "type(inet1,inet)",
        "type(trateler1,trateler)",
        "type(apple1,apple)",
        "type(torish1,torish)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(secti1,secti)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(unpish1,unpish)",
        "room(nolog1,nolog)",
        "room(livingroom1,livingroom)",
        "room(ation1,ation)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(unpish1floor1)",
        "support(nolog1floor1)",
        "support(livingroom1floor1)",
        "support(ation1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(rably1)",
        "support(bed1)",
        "support(nond1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(secti1,kitchen1floor1)",
        "on(inet1,ation1floor1)",
        "on(broom1,ation1floor1)",
        "on(pottedplant1,nolog1floor1)",
        "container(imped1)",
        "container(stism1)",
        "container(wardrobe1)",
        "container(trionee1)",
        "in(peach1,imped1)",
        "in(orange1,imped1)",
        "in(torish1,imped1)",
        "in(apple1,imped1)",
        "in(trateler1,imped1)",
        "exit(kitchen1,unpish1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,nolog1)",
        "exit(unpish1,kitchen1)",
        "exit(nolog1,kitchen1)",
        "exit(nolog1,ation1)",
        "exit(livingroom1,kitchen1)",
        "exit(ation1,nolog1)",
        "exit(bedroom1,nolog1)",
        "exit(nolog1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(imped1)",
        "receptacle(stism1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(trionee1)",
        "receptacle(rably1)",
        "receptacle(bed1)",
        "receptacle(nond1)",
        "openable(imped1)",
        "openable(stism1)",
        "openable(wardrobe1)",
        "openable(trionee1)",
        "closed(imped1)",
        "closed(stism1)",
        "closed(wardrobe1)",
        "closed(trionee1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(inet1)",
        "takeable(trateler1)",
        "takeable(apple1)",
        "takeable(torish1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(secti1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(inet1)",
        "movable(trateler1)",
        "movable(apple1)",
        "movable(torish1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(secti1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(inet1)",
        "needs_support(trateler1)",
        "needs_support(apple1)",
        "needs_support(torish1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(secti1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(secti1,imped1)",
        "on(inet1,table1)",
        "on(broom1,rably1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "go",
          "nolog1"
        ],
        [
          "go",
          "ation1"
        ],
        [
          "take",
          "broom1"
        ],
        [
          "take",
          "inet1"
        ],
        [
          "go",
          "nolog1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "inet1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "broom1",
          "rably1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "secti1"
        ],
        [
          "go",
          "unpish1"
        ],
        [
          "open",
          "imped1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "unpish1"
        ],
        [
          "put",
          "secti1",
          "imped1"
        ]
      ],
      "optimal_commands": [
        "go nolog",
        "go ation",
        "take broom",
        "take inet",
        "go nolog",
        "go kitchen",
        "go living room",
        "put inet on table",
        "go kitchen",
        "go living room",
        "put broom on rably",
        "go kitchen",
        "take secti",
        "go unpish",
        "open imped",
        "go kitchen",
        "go unpish",
        "put secti in imped"
      ],
      "replacement_dict": {
        "rooms": {
          "hallway": "nolog",
          "broomcloset": "ation",
          "pantry": "unpish"
        },
        "entities": {
          "plate": "secti",
          "sandwich": "trateler",
          "refrigerator": "imped",
          "couch": "nond",
          "mop": "inet",
          "banana": "torish",
          "cupboard": "stism",
          "chair": "rably",
          "freezer": "trionee"
        },
        "actions": {
          "close": "nogia",
          "take": "aling",
          "open": "vater"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"vater\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To vater is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "vater",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"nogia\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To nogia is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "nogia",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"aling\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To aling is to get something into one's hands, possession or control.",
          "new_word": "aling",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "imped",
            "counter",
            "table"
          ],
          "exit_targets": [
            "unpish",
            "livingroom",
            "nolog"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "unpish",
          "standard_content": [
            "imped",
            "shelf",
            "trionee"
          ],
          "exit_targets": [
            "kitchen",
            "nolog"
          ],
          "max_connections": 1,
          "type_name": "unpish"
        },
        {
          "repr_str": "nolog",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "unpish",
            "livingroom",
            "ation"
          ],
          "max_connections": 4,
          "type_name": "nolog"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "rably",
            "nond"
          ],
          "exit_targets": [
            "kitchen",
            "nolog"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "ation",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "nolog"
          ],
          "max_connections": 1,
          "type_name": "ation"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "nolog"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "imped",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "unpish"
          ],
          "type_name": "imped"
        },
        {
          "repr_str": "stism",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "stism"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "unpish",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "trionee",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "unpish"
          ],
          "type_name": "trionee"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "nolog",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "rably",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "rably"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "nond",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "nond"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ation"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "inet",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ation"
          ],
          "type_name": "inet"
        },
        {
          "repr_str": "trateler",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unpish"
          ],
          "type_name": "trateler"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unpish"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "torish",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unpish"
          ],
          "type_name": "torish"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unpish"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unpish"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "secti",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "secti"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "unpish",
              "nolog",
              "livingroom",
              "ation",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "imped",
              "stism",
              "wardrobe",
              "shelf",
              "trionee",
              "pottedplant",
              "rably",
              "bed",
              "nond",
              "broom",
              "inet",
              "trateler",
              "apple",
              "torish",
              "orange",
              "peach",
              "secti",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "imped",
              "stism",
              "wardrobe",
              "trionee"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "imped",
              "stism",
              "wardrobe",
              "shelf",
              "trionee",
              "rably",
              "bed",
              "nond"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "rably",
              "bed",
              "nond"
            ],
            "openable": [
              "imped",
              "stism",
              "wardrobe",
              "trionee"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "inet",
              "trateler",
              "apple",
              "torish",
              "orange",
              "peach",
              "secti",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "inet",
              "trateler",
              "apple",
              "torish",
              "orange",
              "peach",
              "secti",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "inet",
              "trateler",
              "apple",
              "torish",
              "orange",
              "peach",
              "secti",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the delly in the thot, the plate on the micon and the penol on the table.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(het1floor1,het1)",
        "at(ousnee1floor1,ousnee1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(ationee1floor1,ationee1)",
        "at(table1,ousnee1)",
        "at(micon1,ousnee1)",
        "at(ceoust1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(thot1,kitchen1)",
        "at(wardrobe1,ationee1)",
        "at(shelf1,ousnee1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,het1)",
        "at(chair1,ousnee1)",
        "at(bed1,ationee1)",
        "at(couch1,ousnee1)",
        "at(catint1,broomcloset1)",
        "at(penol1,broomcloset1)",
        "at(soriced1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(unalin1,pantry1)",
        "at(fress1,pantry1)",
        "at(plate1,kitchen1)",
        "at(delly1,ationee1)",
        "at(pillow1,ationee1)",
        "at(player1,ationee1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(het1floor1,floor)",
        "type(ousnee1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(ationee1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(micon1,micon)",
        "type(ceoust1,ceoust)",
        "type(refrigerator1,refrigerator)",
        "type(thot1,thot)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(catint1,catint)",
        "type(penol1,penol)",
        "type(soriced1,soriced)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(unalin1,unalin)",
        "type(fress1,fress)",
        "type(plate1,plate)",
        "type(delly1,delly)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(het1,het)",
        "room(ousnee1,ousnee)",
        "room(broomcloset1,broomcloset)",
        "room(ationee1,ationee)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(het1floor1)",
        "support(ousnee1floor1)",
        "support(broomcloset1floor1)",
        "support(ationee1floor1)",
        "support(table1)",
        "support(micon1)",
        "support(ceoust1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(delly1,ationee1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(penol1,broomcloset1floor1)",
        "on(catint1,broomcloset1floor1)",
        "on(pottedplant1,het1floor1)",
        "container(refrigerator1)",
        "container(thot1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(fress1,refrigerator1)",
        "in(unalin1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(soriced1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,ousnee1)",
        "exit(kitchen1,het1)",
        "exit(pantry1,kitchen1)",
        "exit(het1,kitchen1)",
        "exit(het1,broomcloset1)",
        "exit(ousnee1,kitchen1)",
        "exit(broomcloset1,het1)",
        "exit(ationee1,het1)",
        "exit(het1,ationee1)",
        "receptacle(table1)",
        "receptacle(micon1)",
        "receptacle(ceoust1)",
        "receptacle(refrigerator1)",
        "receptacle(thot1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(thot1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(thot1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(catint1)",
        "takeable(penol1)",
        "takeable(soriced1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(unalin1)",
        "takeable(fress1)",
        "takeable(plate1)",
        "takeable(delly1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(catint1)",
        "movable(penol1)",
        "movable(soriced1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(unalin1)",
        "movable(fress1)",
        "movable(plate1)",
        "movable(delly1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(catint1)",
        "needs_support(penol1)",
        "needs_support(soriced1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(unalin1)",
        "needs_support(fress1)",
        "needs_support(plate1)",
        "needs_support(delly1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(delly1,thot1)",
        "on(plate1,micon1)",
        "on(penol1,table1)"
      ],
      "optimal_turns": 14,
      "optimal_solution": [
        [
          "take",
          "delly1"
        ],
        [
          "go",
          "het1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "penol1"
        ],
        [
          "go",
          "het1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "open",
          "thot1"
        ],
        [
          "go",
          "ousnee1"
        ],
        [
          "put",
          "plate1",
          "micon1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "put",
          "delly1",
          "thot1"
        ],
        [
          "go",
          "ousnee1"
        ],
        [
          "put",
          "penol1",
          "table1"
        ]
      ],
      "optimal_commands": [
        "take delly",
        "go het",
        "go broom closet",
        "take penol",
        "go het",
        "go kitchen",
        "take plate",
        "open thot",
        "go ousnee",
        "put plate on micon",
        "go kitchen",
        "put delly in thot",
        "go ousnee",
        "put penol on table"
      ],
      "replacement_dict": {
        "rooms": {
          "bedroom": "ationee",
          "livingroom": "ousnee",
          "hallway": "het"
        },
        "entities": {
          "book": "delly",
          "orange": "unalin",
          "cupboard": "thot",
          "counter": "ceoust",
          "mop": "penol",
          "sidetable": "micon",
          "peach": "fress",
          "broom": "catint",
          "sandwich": "soriced"
        },
        "actions": {
          "put": "enerk",
          "close": "alism",
          "take": "ortid"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"alism\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To alism is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "alism",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ortid\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To ortid is to get something into one's hands, possession or control.",
          "new_word": "ortid",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"enerk\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To enerk is to physically place something somewhere.",
          "new_word": "enerk",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "ceoust",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "ousnee",
            "het"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "het"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "het",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "ousnee",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "het"
        },
        {
          "repr_str": "ousnee",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "het"
          ],
          "max_connections": 2,
          "type_name": "ousnee"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "catint"
          ],
          "exit_targets": [
            "het"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "ationee",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "ousnee",
            "het"
          ],
          "max_connections": 1,
          "type_name": "ationee"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "ousnee"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "micon",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "ousnee",
            "ationee"
          ],
          "type_name": "micon"
        },
        {
          "repr_str": "ceoust",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "ceoust"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "thot",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "thot"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "ationee"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "ousnee"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "ousnee",
            "het",
            "ationee"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "ousnee"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "ationee"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "ousnee"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "catint",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "catint"
        },
        {
          "repr_str": "penol",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "penol"
        },
        {
          "repr_str": "soriced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "soriced"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "unalin",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "unalin"
        },
        {
          "repr_str": "fress",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "fress"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "delly",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ousnee",
            "ationee"
          ],
          "type_name": "delly"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ationee"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "het",
              "ousnee",
              "broomcloset",
              "ationee"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "micon",
              "ceoust",
              "refrigerator",
              "thot",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "catint",
              "penol",
              "soriced",
              "apple",
              "banana",
              "unalin",
              "fress",
              "plate",
              "delly",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "thot",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "micon",
              "ceoust",
              "refrigerator",
              "thot",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "micon",
              "ceoust",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "thot",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "catint",
              "penol",
              "soriced",
              "apple",
              "banana",
              "unalin",
              "fress",
              "plate",
              "delly",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "catint",
              "penol",
              "soriced",
              "apple",
              "banana",
              "unalin",
              "fress",
              "plate",
              "delly",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "catint",
              "penol",
              "soriced",
              "apple",
              "banana",
              "unalin",
              "fress",
              "plate",
              "delly",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the sioust in the reele, the pacia on the table and the inging on the menny.",
      "initial_state": [
        "at(uncest1floor1,uncest1)",
        "at(pantry1floor1,pantry1)",
        "at(unflued1floor1,unflued1)",
        "at(livingroom1floor1,livingroom1)",
        "at(tulacy1floor1,tulacy1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,uncest1)",
        "at(refrigerator1,pantry1)",
        "at(reele1,uncest1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(rist1,pantry1)",
        "at(pacia1,unflued1)",
        "at(menny1,livingroom1)",
        "at(prust1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(sioust1,tulacy1)",
        "at(mop1,tulacy1)",
        "at(logal1,pantry1)",
        "at(ramiced1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(inging1,pantry1)",
        "at(plate1,uncest1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(uncest1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(unflued1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(tulacy1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(reele1,reele)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(rist1,rist)",
        "type(pacia1,pacia)",
        "type(menny1,menny)",
        "type(prust1,prust)",
        "type(couch1,couch)",
        "type(sioust1,sioust)",
        "type(mop1,mop)",
        "type(logal1,logal)",
        "type(ramiced1,ramiced)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(inging1,inging)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(uncest1,uncest)",
        "room(pantry1,pantry)",
        "room(unflued1,unflued)",
        "room(livingroom1,livingroom)",
        "room(tulacy1,tulacy)",
        "room(bedroom1,bedroom)",
        "support(uncest1floor1)",
        "support(pantry1floor1)",
        "support(unflued1floor1)",
        "support(livingroom1floor1)",
        "support(tulacy1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(menny1)",
        "support(prust1)",
        "support(couch1)",
        "on(pillow1,prust1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,uncest1floor1)",
        "on(mop1,tulacy1floor1)",
        "on(sioust1,tulacy1floor1)",
        "on(pacia1,unflued1floor1)",
        "container(refrigerator1)",
        "container(reele1)",
        "container(wardrobe1)",
        "container(rist1)",
        "in(inging1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(ramiced1,refrigerator1)",
        "in(logal1,refrigerator1)",
        "exit(uncest1,pantry1)",
        "exit(uncest1,livingroom1)",
        "exit(uncest1,unflued1)",
        "exit(pantry1,uncest1)",
        "exit(unflued1,uncest1)",
        "exit(unflued1,tulacy1)",
        "exit(livingroom1,uncest1)",
        "exit(tulacy1,unflued1)",
        "exit(bedroom1,unflued1)",
        "exit(unflued1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(reele1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(rist1)",
        "receptacle(menny1)",
        "receptacle(prust1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(reele1)",
        "openable(wardrobe1)",
        "openable(rist1)",
        "closed(refrigerator1)",
        "closed(reele1)",
        "closed(wardrobe1)",
        "closed(rist1)",
        "takeable(pacia1)",
        "takeable(sioust1)",
        "takeable(mop1)",
        "takeable(logal1)",
        "takeable(ramiced1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(inging1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pacia1)",
        "movable(sioust1)",
        "movable(mop1)",
        "movable(logal1)",
        "movable(ramiced1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(inging1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pacia1)",
        "needs_support(sioust1)",
        "needs_support(mop1)",
        "needs_support(logal1)",
        "needs_support(ramiced1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(inging1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(sioust1,reele1)",
        "on(pacia1,table1)",
        "on(inging1,menny1)"
      ],
      "optimal_turns": 17,
      "optimal_solution": [
        [
          "go",
          "unflued1"
        ],
        [
          "go",
          "tulacy1"
        ],
        [
          "take",
          "sioust1"
        ],
        [
          "go",
          "unflued1"
        ],
        [
          "take",
          "pacia1"
        ],
        [
          "go",
          "uncest1"
        ],
        [
          "open",
          "reele1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "pacia1",
          "table1"
        ],
        [
          "go",
          "uncest1"
        ],
        [
          "put",
          "sioust1",
          "reele1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "refrigerator1"
        ],
        [
          "take",
          "inging1"
        ],
        [
          "go",
          "uncest1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "inging1",
          "menny1"
        ]
      ],
      "optimal_commands": [
        "go unflued",
        "go tulacy",
        "take sioust",
        "go unflued",
        "take pacia",
        "go uncest",
        "open reele",
        "go living room",
        "put pacia on table",
        "go uncest",
        "put sioust in reele",
        "go pantry",
        "open refrigerator",
        "take inging",
        "go uncest",
        "go living room",
        "put inging on menny"
      ],
      "replacement_dict": {
        "rooms": {
          "kitchen": "uncest",
          "broomcloset": "tulacy",
          "hallway": "unflued"
        },
        "entities": {
          "pottedplant": "pacia",
          "broom": "sioust",
          "freezer": "rist",
          "chair": "menny",
          "peach": "inging",
          "cupboard": "reele",
          "bed": "prust",
          "sandwich": "logal",
          "apple": "ramiced"
        },
        "actions": {
          "open": "sulphy",
          "take": "derman",
          "close": "tedne"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"sulphy\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To sulphy is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "sulphy",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"tedne\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To tedne is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "tedne",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"derman\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To derman is to get something into one's hands, possession or control.",
          "new_word": "derman",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "uncest",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "unflued"
          ],
          "max_connections": 3,
          "type_name": "uncest"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "rist"
          ],
          "exit_targets": [
            "uncest",
            "unflued"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "unflued",
          "standard_content": [
            "pacia"
          ],
          "exit_targets": [
            "uncest",
            "pantry",
            "livingroom",
            "tulacy"
          ],
          "max_connections": 4,
          "type_name": "unflued"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pacia",
            "table",
            "menny",
            "couch"
          ],
          "exit_targets": [
            "uncest",
            "unflued"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "tulacy",
          "standard_content": [
            "sioust"
          ],
          "exit_targets": [
            "unflued"
          ],
          "max_connections": 1,
          "type_name": "tulacy"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "prust",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "unflued"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "uncest",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "uncest"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "uncest",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "reele",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "uncest"
          ],
          "type_name": "reele"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "uncest",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "rist",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "rist"
        },
        {
          "repr_str": "pacia",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "unflued",
            "bedroom"
          ],
          "type_name": "pacia"
        },
        {
          "repr_str": "menny",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "menny"
        },
        {
          "repr_str": "prust",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "prust"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "sioust",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "tulacy"
          ],
          "type_name": "sioust"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "tulacy"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "logal",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uncest",
            "pantry"
          ],
          "type_name": "logal"
        },
        {
          "repr_str": "ramiced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uncest",
            "pantry"
          ],
          "type_name": "ramiced"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uncest",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uncest",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "inging",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uncest",
            "pantry"
          ],
          "type_name": "inging"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uncest"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "uncest",
              "pantry",
              "unflued",
              "livingroom",
              "tulacy",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "reele",
              "wardrobe",
              "shelf",
              "rist",
              "pacia",
              "menny",
              "prust",
              "couch",
              "sioust",
              "mop",
              "logal",
              "ramiced",
              "banana",
              "orange",
              "inging",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "reele",
              "wardrobe",
              "rist"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "reele",
              "wardrobe",
              "shelf",
              "rist",
              "menny",
              "prust",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "menny",
              "prust",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "reele",
              "wardrobe",
              "rist"
            ],
            "takeable": [
              "pacia",
              "sioust",
              "mop",
              "logal",
              "ramiced",
              "banana",
              "orange",
              "inging",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "pacia",
              "sioust",
              "mop",
              "logal",
              "ramiced",
              "banana",
              "orange",
              "inging",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pacia",
              "sioust",
              "mop",
              "logal",
              "ramiced",
              "banana",
              "orange",
              "inging",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the arliced in the atent, the comper on the table and the comess on the distral.",
      "initial_state": [
        "at(lator1floor1,lator1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(tuat1floor1,tuat1)",
        "at(chross1floor1,chross1)",
        "at(table1,livingroom1)",
        "at(distral1,livingroom1)",
        "at(counter1,lator1)",
        "at(atent1,pantry1)",
        "at(evism1,lator1)",
        "at(wardrobe1,chross1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(comess1,hallway1)",
        "at(proark1,livingroom1)",
        "at(incry1,chross1)",
        "at(couch1,livingroom1)",
        "at(comper1,tuat1)",
        "at(arliced1,tuat1)",
        "at(sandwich1,pantry1)",
        "at(lingly1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,lator1)",
        "at(book1,chross1)",
        "at(pillow1,chross1)",
        "at(player1,chross1)",
        "type(lator1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(tuat1floor1,floor)",
        "type(chross1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(distral1,distral)",
        "type(counter1,counter)",
        "type(atent1,atent)",
        "type(evism1,evism)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(comess1,comess)",
        "type(proark1,proark)",
        "type(incry1,incry)",
        "type(couch1,couch)",
        "type(comper1,comper)",
        "type(arliced1,arliced)",
        "type(sandwich1,sandwich)",
        "type(lingly1,lingly)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(lator1,lator)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(tuat1,tuat)",
        "room(chross1,chross)",
        "support(lator1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(tuat1floor1)",
        "support(chross1floor1)",
        "support(table1)",
        "support(distral1)",
        "support(counter1)",
        "support(shelf1)",
        "support(proark1)",
        "support(incry1)",
        "support(couch1)",
        "on(pillow1,incry1)",
        "on(book1,chross1floor1)",
        "on(plate1,lator1floor1)",
        "on(arliced1,tuat1floor1)",
        "on(comper1,tuat1floor1)",
        "on(comess1,hallway1floor1)",
        "container(atent1)",
        "container(evism1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,atent1)",
        "in(orange1,atent1)",
        "in(banana1,atent1)",
        "in(lingly1,atent1)",
        "in(sandwich1,atent1)",
        "exit(lator1,pantry1)",
        "exit(lator1,livingroom1)",
        "exit(lator1,hallway1)",
        "exit(pantry1,lator1)",
        "exit(hallway1,lator1)",
        "exit(hallway1,tuat1)",
        "exit(livingroom1,lator1)",
        "exit(tuat1,hallway1)",
        "exit(chross1,hallway1)",
        "exit(hallway1,chross1)",
        "receptacle(table1)",
        "receptacle(distral1)",
        "receptacle(counter1)",
        "receptacle(atent1)",
        "receptacle(evism1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(proark1)",
        "receptacle(incry1)",
        "receptacle(couch1)",
        "openable(atent1)",
        "openable(evism1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(atent1)",
        "closed(evism1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(comess1)",
        "takeable(comper1)",
        "takeable(arliced1)",
        "takeable(sandwich1)",
        "takeable(lingly1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(comess1)",
        "movable(comper1)",
        "movable(arliced1)",
        "movable(sandwich1)",
        "movable(lingly1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(comess1)",
        "needs_support(comper1)",
        "needs_support(arliced1)",
        "needs_support(sandwich1)",
        "needs_support(lingly1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(arliced1,atent1)",
        "on(comper1,table1)",
        "on(comess1,distral1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "take",
          "comess1"
        ],
        [
          "go",
          "tuat1"
        ],
        [
          "take",
          "comper1"
        ],
        [
          "take",
          "arliced1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "lator1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "comper1",
          "table1"
        ],
        [
          "go",
          "lator1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "comess1",
          "distral1"
        ],
        [
          "go",
          "lator1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "atent1"
        ],
        [
          "go",
          "lator1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "put",
          "arliced1",
          "atent1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "take comess",
        "go tuat",
        "take comper",
        "take arliced",
        "go hallway",
        "go lator",
        "go living room",
        "put comper on table",
        "go lator",
        "go living room",
        "put comess on distral",
        "go lator",
        "go pantry",
        "open atent",
        "go lator",
        "go pantry",
        "put arliced in atent"
      ],
      "replacement_dict": {
        "rooms": {
          "broomcloset": "tuat",
          "bedroom": "chross",
          "kitchen": "lator"
        },
        "entities": {
          "broom": "comper",
          "pottedplant": "comess",
          "refrigerator": "atent",
          "sidetable": "distral",
          "apple": "lingly",
          "mop": "arliced",
          "bed": "incry",
          "chair": "proark",
          "cupboard": "evism"
        },
        "actions": {
          "take": "acion",
          "put": "arger",
          "open": "shness"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"shness\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To shness is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "shness",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"acion\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To acion is to get something into one's hands, possession or control.",
          "new_word": "acion",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"arger\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To arger is to physically place something somewhere.",
          "new_word": "arger",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "lator",
          "standard_content": [
            "atent",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "lator"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "atent",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "lator",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "comess"
          ],
          "exit_targets": [
            "lator",
            "pantry",
            "livingroom",
            "tuat"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "comess",
            "table",
            "proark",
            "couch"
          ],
          "exit_targets": [
            "lator",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "tuat",
          "standard_content": [
            "comper"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "tuat"
        },
        {
          "repr_str": "chross",
          "standard_content": [
            "incry",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "chross"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "lator",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "distral",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "chross"
          ],
          "type_name": "distral"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "lator"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "atent",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "lator",
            "pantry"
          ],
          "type_name": "atent"
        },
        {
          "repr_str": "evism",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "lator"
          ],
          "type_name": "evism"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "chross"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "lator",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "comess",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "chross"
          ],
          "type_name": "comess"
        },
        {
          "repr_str": "proark",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "proark"
        },
        {
          "repr_str": "incry",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "chross"
          ],
          "type_name": "incry"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "comper",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "tuat"
          ],
          "type_name": "comper"
        },
        {
          "repr_str": "arliced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "tuat"
          ],
          "type_name": "arliced"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lator",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "lingly",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lator",
            "pantry"
          ],
          "type_name": "lingly"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lator",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lator",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lator",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lator"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "chross"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "chross"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "lator",
              "pantry",
              "hallway",
              "livingroom",
              "tuat",
              "chross"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "distral",
              "counter",
              "atent",
              "evism",
              "wardrobe",
              "shelf",
              "freezer",
              "comess",
              "proark",
              "incry",
              "couch",
              "comper",
              "arliced",
              "sandwich",
              "lingly",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "atent",
              "evism",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "distral",
              "counter",
              "atent",
              "evism",
              "wardrobe",
              "shelf",
              "freezer",
              "proark",
              "incry",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "distral",
              "counter",
              "shelf",
              "proark",
              "incry",
              "couch"
            ],
            "openable": [
              "atent",
              "evism",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "comess",
              "comper",
              "arliced",
              "sandwich",
              "lingly",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "comess",
              "comper",
              "arliced",
              "sandwich",
              "lingly",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "comess",
              "comper",
              "arliced",
              "sandwich",
              "lingly",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the dermin in the deint, the plate on the riat and the mop on the riat.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(rabish1floor1,rabish1)",
        "at(hypner1floor1,hypner1)",
        "at(prolly1floor1,prolly1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,prolly1)",
        "at(sidetable1,prolly1)",
        "at(riat1,kitchen1)",
        "at(deint1,rabish1)",
        "at(roplo1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(seash1,prolly1)",
        "at(freezer1,rabish1)",
        "at(pottedplant1,hypner1)",
        "at(chair1,prolly1)",
        "at(bed1,bedroom1)",
        "at(ireart1,prolly1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,rabish1)",
        "at(belity1,rabish1)",
        "at(intler1,rabish1)",
        "at(orange1,rabish1)",
        "at(psess1,rabish1)",
        "at(plate1,kitchen1)",
        "at(dermin1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(rabish1floor1,floor)",
        "type(hypner1floor1,floor)",
        "type(prolly1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(riat1,riat)",
        "type(deint1,deint)",
        "type(roplo1,roplo)",
        "type(wardrobe1,wardrobe)",
        "type(seash1,seash)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(ireart1,ireart)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(belity1,belity)",
        "type(intler1,intler)",
        "type(orange1,orange)",
        "type(psess1,psess)",
        "type(plate1,plate)",
        "type(dermin1,dermin)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(rabish1,rabish)",
        "room(hypner1,hypner)",
        "room(prolly1,prolly)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(rabish1floor1)",
        "support(hypner1floor1)",
        "support(prolly1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(riat1)",
        "support(seash1)",
        "support(chair1)",
        "support(bed1)",
        "support(ireart1)",
        "on(pillow1,bed1)",
        "on(dermin1,bedroom1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hypner1floor1)",
        "container(deint1)",
        "container(roplo1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(psess1,deint1)",
        "in(orange1,deint1)",
        "in(intler1,deint1)",
        "in(belity1,deint1)",
        "in(sandwich1,deint1)",
        "exit(kitchen1,rabish1)",
        "exit(kitchen1,prolly1)",
        "exit(kitchen1,hypner1)",
        "exit(rabish1,kitchen1)",
        "exit(hypner1,kitchen1)",
        "exit(hypner1,broomcloset1)",
        "exit(prolly1,kitchen1)",
        "exit(broomcloset1,hypner1)",
        "exit(bedroom1,hypner1)",
        "exit(hypner1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(riat1)",
        "receptacle(deint1)",
        "receptacle(roplo1)",
        "receptacle(wardrobe1)",
        "receptacle(seash1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(ireart1)",
        "openable(deint1)",
        "openable(roplo1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(deint1)",
        "closed(roplo1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(belity1)",
        "takeable(intler1)",
        "takeable(orange1)",
        "takeable(psess1)",
        "takeable(plate1)",
        "takeable(dermin1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(belity1)",
        "movable(intler1)",
        "movable(orange1)",
        "movable(psess1)",
        "movable(plate1)",
        "movable(dermin1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(belity1)",
        "needs_support(intler1)",
        "needs_support(orange1)",
        "needs_support(psess1)",
        "needs_support(plate1)",
        "needs_support(dermin1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(dermin1,deint1)",
        "on(plate1,riat1)",
        "on(mop1,riat1)"
      ],
      "optimal_turns": 13,
      "optimal_solution": [
        [
          "take",
          "dermin1"
        ],
        [
          "go",
          "hypner1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hypner1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "put",
          "mop1",
          "riat1"
        ],
        [
          "go",
          "rabish1"
        ],
        [
          "open",
          "deint1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "put",
          "plate1",
          "riat1"
        ],
        [
          "go",
          "rabish1"
        ],
        [
          "put",
          "dermin1",
          "deint1"
        ]
      ],
      "optimal_commands": [
        "take dermin",
        "go hypner",
        "go broom closet",
        "take mop",
        "go hypner",
        "go kitchen",
        "put mop on riat",
        "go rabish",
        "open deint",
        "go kitchen",
        "put plate on riat",
        "go rabish",
        "put dermin in deint"
      ],
      "replacement_dict": {
        "rooms": {
          "hallway": "hypner",
          "pantry": "rabish",
          "livingroom": "prolly"
        },
        "entities": {
          "banana": "intler",
          "book": "dermin",
          "cupboard": "roplo",
          "counter": "riat",
          "peach": "psess",
          "refrigerator": "deint",
          "shelf": "seash",
          "couch": "ireart",
          "apple": "belity"
        },
        "actions": {
          "take": "andect",
          "open": "lotis",
          "close": "stfule"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"lotis\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To lotis is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "lotis",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"stfule\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To stfule is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "stfule",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"andect\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To andect is to get something into one's hands, possession or control.",
          "new_word": "andect",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "deint",
            "riat",
            "table"
          ],
          "exit_targets": [
            "rabish",
            "prolly",
            "hypner"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "rabish",
          "standard_content": [
            "deint",
            "seash",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hypner"
          ],
          "max_connections": 1,
          "type_name": "rabish"
        },
        {
          "repr_str": "hypner",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "rabish",
            "prolly",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hypner"
        },
        {
          "repr_str": "prolly",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "ireart"
          ],
          "exit_targets": [
            "kitchen",
            "hypner"
          ],
          "max_connections": 2,
          "type_name": "prolly"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hypner"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "prolly",
            "hypner"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "prolly"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "prolly",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "riat",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "riat"
        },
        {
          "repr_str": "deint",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "rabish"
          ],
          "type_name": "deint"
        },
        {
          "repr_str": "roplo",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "roplo"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "seash",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "rabish",
            "prolly"
          ],
          "type_name": "seash"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "rabish"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "prolly",
            "hypner",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "prolly"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "ireart",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "prolly"
          ],
          "type_name": "ireart"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "rabish"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "belity",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "rabish"
          ],
          "type_name": "belity"
        },
        {
          "repr_str": "intler",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "rabish"
          ],
          "type_name": "intler"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "rabish"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "psess",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "rabish"
          ],
          "type_name": "psess"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "dermin",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "prolly",
            "bedroom"
          ],
          "type_name": "dermin"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "rabish",
              "hypner",
              "prolly",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "riat",
              "deint",
              "roplo",
              "wardrobe",
              "seash",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "ireart",
              "broom",
              "mop",
              "sandwich",
              "belity",
              "intler",
              "orange",
              "psess",
              "plate",
              "dermin",
              "pillow"
            ],
            "container": [
              "inventory",
              "deint",
              "roplo",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "riat",
              "deint",
              "roplo",
              "wardrobe",
              "seash",
              "freezer",
              "chair",
              "bed",
              "ireart"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "riat",
              "seash",
              "chair",
              "bed",
              "ireart"
            ],
            "openable": [
              "deint",
              "roplo",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "belity",
              "intler",
              "orange",
              "psess",
              "plate",
              "dermin",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "belity",
              "intler",
              "orange",
              "psess",
              "plate",
              "dermin",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "belity",
              "intler",
              "orange",
              "psess",
              "plate",
              "dermin",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the oroust in the inchan, the book on the aciong and the plate on the aciong.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(emoust1floor1,emoust1)",
        "at(hallway1floor1,hallway1)",
        "at(etiont1floor1,etiont1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(encal1floor1,encal1)",
        "at(table1,etiont1)",
        "at(sidetable1,etiont1)",
        "at(counter1,kitchen1)",
        "at(inchan1,emoust1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,encal1)",
        "at(aciong1,etiont1)",
        "at(dolam1,emoust1)",
        "at(pottedplant1,hallway1)",
        "at(perent1,etiont1)",
        "at(bed1,encal1)",
        "at(swaiced1,etiont1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,emoust1)",
        "at(ailly1,emoust1)",
        "at(oming1,emoust1)",
        "at(orange1,emoust1)",
        "at(aphist1,emoust1)",
        "at(plate1,kitchen1)",
        "at(book1,encal1)",
        "at(oroust1,encal1)",
        "at(player1,encal1)",
        "type(kitchen1floor1,floor)",
        "type(emoust1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(etiont1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(encal1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(inchan1,inchan)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(aciong1,aciong)",
        "type(dolam1,dolam)",
        "type(pottedplant1,pottedplant)",
        "type(perent1,perent)",
        "type(bed1,bed)",
        "type(swaiced1,swaiced)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(ailly1,ailly)",
        "type(oming1,oming)",
        "type(orange1,orange)",
        "type(aphist1,aphist)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(oroust1,oroust)",
        "room(kitchen1,kitchen)",
        "room(emoust1,emoust)",
        "room(hallway1,hallway)",
        "room(etiont1,etiont)",
        "room(broomcloset1,broomcloset)",
        "room(encal1,encal)",
        "support(kitchen1floor1)",
        "support(emoust1floor1)",
        "support(hallway1floor1)",
        "support(etiont1floor1)",
        "support(broomcloset1floor1)",
        "support(encal1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(aciong1)",
        "support(perent1)",
        "support(bed1)",
        "support(swaiced1)",
        "on(oroust1,bed1)",
        "on(book1,encal1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(inchan1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(dolam1)",
        "in(aphist1,inchan1)",
        "in(orange1,inchan1)",
        "in(oming1,inchan1)",
        "in(ailly1,inchan1)",
        "in(sandwich1,inchan1)",
        "exit(kitchen1,emoust1)",
        "exit(kitchen1,etiont1)",
        "exit(kitchen1,hallway1)",
        "exit(emoust1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(etiont1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(encal1,hallway1)",
        "exit(hallway1,encal1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(inchan1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(aciong1)",
        "receptacle(dolam1)",
        "receptacle(perent1)",
        "receptacle(bed1)",
        "receptacle(swaiced1)",
        "openable(inchan1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(dolam1)",
        "closed(inchan1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(dolam1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(ailly1)",
        "takeable(oming1)",
        "takeable(orange1)",
        "takeable(aphist1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(oroust1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(ailly1)",
        "movable(oming1)",
        "movable(orange1)",
        "movable(aphist1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(oroust1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(ailly1)",
        "needs_support(oming1)",
        "needs_support(orange1)",
        "needs_support(aphist1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(oroust1)"
      ],
      "goal_state": [
        "in(oroust1,inchan1)",
        "on(book1,aciong1)",
        "on(plate1,aciong1)"
      ],
      "optimal_turns": 16,
      "optimal_solution": [
        [
          "take",
          "book1"
        ],
        [
          "take",
          "oroust1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "emoust1"
        ],
        [
          "open",
          "inchan1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "emoust1"
        ],
        [
          "put",
          "oroust1",
          "inchan1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "etiont1"
        ],
        [
          "put",
          "book1",
          "aciong1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "etiont1"
        ],
        [
          "put",
          "plate1",
          "aciong1"
        ]
      ],
      "optimal_commands": [
        "take book",
        "take oroust",
        "go hallway",
        "go kitchen",
        "go emoust",
        "open inchan",
        "go kitchen",
        "go emoust",
        "put oroust in inchan",
        "go kitchen",
        "take plate",
        "go etiont",
        "put book on aciong",
        "go kitchen",
        "go etiont",
        "put plate on aciong"
      ],
      "replacement_dict": {
        "rooms": {
          "pantry": "emoust",
          "livingroom": "etiont",
          "bedroom": "encal"
        },
        "entities": {
          "peach": "aphist",
          "apple": "ailly",
          "freezer": "dolam",
          "shelf": "aciong",
          "pillow": "oroust",
          "couch": "swaiced",
          "chair": "perent",
          "banana": "oming",
          "refrigerator": "inchan"
        },
        "actions": {
          "open": "eucty",
          "close": "strood",
          "put": "pyell"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"eucty\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To eucty is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "eucty",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"strood\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To strood is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "strood",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"pyell\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To pyell is to physically place something somewhere.",
          "new_word": "pyell",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "inchan",
            "counter",
            "table"
          ],
          "exit_targets": [
            "emoust",
            "etiont",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "emoust",
          "standard_content": [
            "inchan",
            "aciong",
            "dolam"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "emoust"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "emoust",
            "etiont",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "etiont",
          "standard_content": [
            "pottedplant",
            "table",
            "perent",
            "swaiced"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "etiont"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "encal",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "etiont",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "encal"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "etiont"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "etiont",
            "encal"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "inchan",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "emoust"
          ],
          "type_name": "inchan"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "encal"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "aciong",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "emoust",
            "etiont"
          ],
          "type_name": "aciong"
        },
        {
          "repr_str": "dolam",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "emoust"
          ],
          "type_name": "dolam"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "etiont",
            "hallway",
            "encal"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "perent",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "etiont"
          ],
          "type_name": "perent"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "encal"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "swaiced",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "etiont"
          ],
          "type_name": "swaiced"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "emoust"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "ailly",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "emoust"
          ],
          "type_name": "ailly"
        },
        {
          "repr_str": "oming",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "emoust"
          ],
          "type_name": "oming"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "emoust"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "aphist",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "emoust"
          ],
          "type_name": "aphist"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "etiont",
            "encal"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "oroust",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "encal"
          ],
          "type_name": "oroust"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "emoust",
              "hallway",
              "etiont",
              "broomcloset",
              "encal"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "inchan",
              "cupboard",
              "wardrobe",
              "aciong",
              "dolam",
              "pottedplant",
              "perent",
              "bed",
              "swaiced",
              "broom",
              "mop",
              "sandwich",
              "ailly",
              "oming",
              "orange",
              "aphist",
              "plate",
              "book",
              "oroust"
            ],
            "container": [
              "inventory",
              "inchan",
              "cupboard",
              "wardrobe",
              "dolam"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "inchan",
              "cupboard",
              "wardrobe",
              "aciong",
              "dolam",
              "perent",
              "bed",
              "swaiced"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "aciong",
              "perent",
              "bed",
              "swaiced"
            ],
            "openable": [
              "inchan",
              "cupboard",
              "wardrobe",
              "dolam"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "ailly",
              "oming",
              "orange",
              "aphist",
              "plate",
              "book",
              "oroust"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "ailly",
              "oming",
              "orange",
              "aphist",
              "plate",
              "book",
              "oroust"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "ailly",
              "oming",
              "orange",
              "aphist",
              "plate",
              "book",
              "oroust"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the setral in the iscad, the lablent on the mingnee and the eriat on the mingnee.",
      "initial_state": [
        "at(retart1floor1,retart1)",
        "at(ostion1floor1,ostion1)",
        "at(olict1floor1,olict1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(mingnee1,livingroom1)",
        "at(tworia1,livingroom1)",
        "at(counter1,retart1)",
        "at(refrigerator1,ostion1)",
        "at(iscad1,retart1)",
        "at(ovesish1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,ostion1)",
        "at(pottedplant1,olict1)",
        "at(lepht1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(eriat1,broomcloset1)",
        "at(lablent1,broomcloset1)",
        "at(eriated1,ostion1)",
        "at(apple1,ostion1)",
        "at(banana1,ostion1)",
        "at(orange1,ostion1)",
        "at(peach1,ostion1)",
        "at(setral1,retart1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(retart1floor1,floor)",
        "type(ostion1floor1,floor)",
        "type(olict1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(mingnee1,mingnee)",
        "type(tworia1,tworia)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(iscad1,iscad)",
        "type(ovesish1,ovesish)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(lepht1,lepht)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(eriat1,eriat)",
        "type(lablent1,lablent)",
        "type(eriated1,eriated)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(setral1,setral)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(retart1,retart)",
        "room(ostion1,ostion)",
        "room(olict1,olict)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(retart1floor1)",
        "support(ostion1floor1)",
        "support(olict1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(mingnee1)",
        "support(tworia1)",
        "support(counter1)",
        "support(shelf1)",
        "support(lepht1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(setral1,retart1floor1)",
        "on(lablent1,broomcloset1floor1)",
        "on(eriat1,broomcloset1floor1)",
        "on(pottedplant1,olict1floor1)",
        "container(refrigerator1)",
        "container(iscad1)",
        "container(ovesish1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(eriated1,refrigerator1)",
        "exit(retart1,ostion1)",
        "exit(retart1,livingroom1)",
        "exit(retart1,olict1)",
        "exit(ostion1,retart1)",
        "exit(olict1,retart1)",
        "exit(olict1,broomcloset1)",
        "exit(livingroom1,retart1)",
        "exit(broomcloset1,olict1)",
        "exit(bedroom1,olict1)",
        "exit(olict1,bedroom1)",
        "receptacle(mingnee1)",
        "receptacle(tworia1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(iscad1)",
        "receptacle(ovesish1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(lepht1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(iscad1)",
        "openable(ovesish1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(iscad1)",
        "closed(ovesish1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(eriat1)",
        "takeable(lablent1)",
        "takeable(eriated1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(setral1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(eriat1)",
        "movable(lablent1)",
        "movable(eriated1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(setral1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(eriat1)",
        "needs_support(lablent1)",
        "needs_support(eriated1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(setral1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(setral1,iscad1)",
        "on(lablent1,mingnee1)",
        "on(eriat1,mingnee1)"
      ],
      "optimal_turns": 14,
      "optimal_solution": [
        [
          "go",
          "olict1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "eriat1"
        ],
        [
          "take",
          "lablent1"
        ],
        [
          "go",
          "olict1"
        ],
        [
          "go",
          "retart1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "lablent1",
          "mingnee1"
        ],
        [
          "go",
          "retart1"
        ],
        [
          "open",
          "iscad1"
        ],
        [
          "take",
          "setral1"
        ],
        [
          "put",
          "setral1",
          "iscad1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "eriat1",
          "mingnee1"
        ]
      ],
      "optimal_commands": [
        "go olict",
        "go broom closet",
        "take eriat",
        "take lablent",
        "go olict",
        "go retart",
        "go living room",
        "put lablent on mingnee",
        "go retart",
        "open iscad",
        "take setral",
        "put setral in iscad",
        "go living room",
        "put eriat on mingnee"
      ],
      "replacement_dict": {
        "rooms": {
          "pantry": "ostion",
          "kitchen": "retart",
          "hallway": "olict"
        },
        "entities": {
          "sandwich": "eriated",
          "broom": "eriat",
          "wardrobe": "ovesish",
          "table": "mingnee",
          "chair": "lepht",
          "cupboard": "iscad",
          "plate": "setral",
          "mop": "lablent",
          "sidetable": "tworia"
        },
        "actions": {
          "take": "lispe",
          "open": "lones",
          "close": "degra"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"lones\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To lones is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "lones",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"degra\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To degra is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "degra",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"lispe\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To lispe is to get something into one's hands, possession or control.",
          "new_word": "lispe",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "retart",
          "standard_content": [
            "refrigerator",
            "counter",
            "mingnee"
          ],
          "exit_targets": [
            "ostion",
            "livingroom",
            "olict"
          ],
          "max_connections": 3,
          "type_name": "retart"
        },
        {
          "repr_str": "ostion",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "retart",
            "olict"
          ],
          "max_connections": 1,
          "type_name": "ostion"
        },
        {
          "repr_str": "olict",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "retart",
            "ostion",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "olict"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "mingnee",
            "lepht",
            "couch"
          ],
          "exit_targets": [
            "retart",
            "olict"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "eriat"
          ],
          "exit_targets": [
            "olict"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "ovesish"
          ],
          "exit_targets": [
            "livingroom",
            "olict"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "mingnee",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "retart",
            "livingroom"
          ],
          "type_name": "mingnee"
        },
        {
          "repr_str": "tworia",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "tworia"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "retart"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "retart",
            "ostion"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "iscad",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "retart"
          ],
          "type_name": "iscad"
        },
        {
          "repr_str": "ovesish",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "ovesish"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "retart",
            "ostion",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "ostion"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "olict",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "lepht",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "lepht"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "eriat",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "eriat"
        },
        {
          "repr_str": "lablent",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "lablent"
        },
        {
          "repr_str": "eriated",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "retart",
            "ostion"
          ],
          "type_name": "eriated"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "retart",
            "ostion"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "retart",
            "ostion"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "retart",
            "ostion"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "retart",
            "ostion"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "setral",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "retart"
          ],
          "type_name": "setral"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "retart",
              "ostion",
              "olict",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "mingnee",
              "tworia",
              "counter",
              "refrigerator",
              "iscad",
              "ovesish",
              "shelf",
              "freezer",
              "pottedplant",
              "lepht",
              "bed",
              "couch",
              "eriat",
              "lablent",
              "eriated",
              "apple",
              "banana",
              "orange",
              "peach",
              "setral",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "iscad",
              "ovesish",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "mingnee",
              "tworia",
              "counter",
              "refrigerator",
              "iscad",
              "ovesish",
              "shelf",
              "freezer",
              "lepht",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "mingnee",
              "tworia",
              "counter",
              "shelf",
              "lepht",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "iscad",
              "ovesish",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "eriat",
              "lablent",
              "eriated",
              "apple",
              "banana",
              "orange",
              "peach",
              "setral",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "eriat",
              "lablent",
              "eriated",
              "apple",
              "banana",
              "orange",
              "peach",
              "setral",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "eriat",
              "lablent",
              "eriated",
              "apple",
              "banana",
              "orange",
              "peach",
              "setral",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the riack in the teming, the plate on the taillag and the mop on the taillag.",
      "initial_state": [
        "at(reging1floor1,reging1)",
        "at(eprour1floor1,eprour1)",
        "at(hallway1floor1,hallway1)",
        "at(ricke1floor1,ricke1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(taillag1,ricke1)",
        "at(dergal1,ricke1)",
        "at(orele1,reging1)",
        "at(refrigerator1,eprour1)",
        "at(cupboard1,reging1)",
        "at(teming1,bedroom1)",
        "at(siaticed1,ricke1)",
        "at(freezer1,eprour1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,ricke1)",
        "at(bed1,bedroom1)",
        "at(couch1,ricke1)",
        "at(iless1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(piesm1,eprour1)",
        "at(apple1,eprour1)",
        "at(banana1,eprour1)",
        "at(orange1,eprour1)",
        "at(astont1,eprour1)",
        "at(plate1,reging1)",
        "at(riack1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(reging1floor1,floor)",
        "type(eprour1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(ricke1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(taillag1,taillag)",
        "type(dergal1,dergal)",
        "type(orele1,orele)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(teming1,teming)",
        "type(siaticed1,siaticed)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(iless1,iless)",
        "type(mop1,mop)",
        "type(piesm1,piesm)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(astont1,astont)",
        "type(plate1,plate)",
        "type(riack1,riack)",
        "type(pillow1,pillow)",
        "room(reging1,reging)",
        "room(eprour1,eprour)",
        "room(hallway1,hallway)",
        "room(ricke1,ricke)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(reging1floor1)",
        "support(eprour1floor1)",
        "support(hallway1floor1)",
        "support(ricke1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(taillag1)",
        "support(dergal1)",
        "support(orele1)",
        "support(siaticed1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(riack1,bedroom1floor1)",
        "on(plate1,reging1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(iless1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(teming1)",
        "container(freezer1)",
        "in(astont1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(piesm1,refrigerator1)",
        "exit(reging1,eprour1)",
        "exit(reging1,ricke1)",
        "exit(reging1,hallway1)",
        "exit(eprour1,reging1)",
        "exit(hallway1,reging1)",
        "exit(hallway1,broomcloset1)",
        "exit(ricke1,reging1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(taillag1)",
        "receptacle(dergal1)",
        "receptacle(orele1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(teming1)",
        "receptacle(siaticed1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(teming1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(teming1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(iless1)",
        "takeable(mop1)",
        "takeable(piesm1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(astont1)",
        "takeable(plate1)",
        "takeable(riack1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(iless1)",
        "movable(mop1)",
        "movable(piesm1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(astont1)",
        "movable(plate1)",
        "movable(riack1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(iless1)",
        "needs_support(mop1)",
        "needs_support(piesm1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(astont1)",
        "needs_support(plate1)",
        "needs_support(riack1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(riack1,teming1)",
        "on(plate1,taillag1)",
        "on(mop1,taillag1)"
      ],
      "optimal_turns": 14,
      "optimal_solution": [
        [
          "open",
          "teming1"
        ],
        [
          "take",
          "riack1"
        ],
        [
          "put",
          "riack1",
          "teming1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "reging1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "ricke1"
        ],
        [
          "put",
          "plate1",
          "taillag1"
        ],
        [
          "go",
          "reging1"
        ],
        [
          "go",
          "ricke1"
        ],
        [
          "put",
          "mop1",
          "taillag1"
        ]
      ],
      "optimal_commands": [
        "open teming",
        "take riack",
        "put riack in teming",
        "go hallway",
        "go broom closet",
        "take mop",
        "go hallway",
        "go reging",
        "take plate",
        "go ricke",
        "put plate on taillag",
        "go reging",
        "go ricke",
        "put mop on taillag"
      ],
      "replacement_dict": {
        "rooms": {
          "livingroom": "ricke",
          "kitchen": "reging",
          "pantry": "eprour"
        },
        "entities": {
          "broom": "iless",
          "sandwich": "piesm",
          "wardrobe": "teming",
          "counter": "orele",
          "peach": "astont",
          "book": "riack",
          "shelf": "siaticed",
          "sidetable": "dergal",
          "table": "taillag"
        },
        "actions": {
          "take": "ricary",
          "open": "babile",
          "close": "scidia"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"babile\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To babile is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "babile",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"scidia\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To scidia is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "scidia",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ricary\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To ricary is to get something into one's hands, possession or control.",
          "new_word": "ricary",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "reging",
          "standard_content": [
            "refrigerator",
            "orele",
            "taillag"
          ],
          "exit_targets": [
            "eprour",
            "ricke",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "reging"
        },
        {
          "repr_str": "eprour",
          "standard_content": [
            "refrigerator",
            "siaticed",
            "freezer"
          ],
          "exit_targets": [
            "reging",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "eprour"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "reging",
            "eprour",
            "ricke",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "ricke",
          "standard_content": [
            "pottedplant",
            "taillag",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "reging",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "ricke"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "iless"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "teming"
          ],
          "exit_targets": [
            "ricke",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "taillag",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "reging",
            "ricke"
          ],
          "type_name": "taillag"
        },
        {
          "repr_str": "dergal",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "ricke",
            "bedroom"
          ],
          "type_name": "dergal"
        },
        {
          "repr_str": "orele",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "reging"
          ],
          "type_name": "orele"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "reging",
            "eprour"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "reging"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "teming",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "teming"
        },
        {
          "repr_str": "siaticed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "reging",
            "eprour",
            "ricke"
          ],
          "type_name": "siaticed"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "eprour"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "ricke",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "ricke"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "ricke"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "iless",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "iless"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "piesm",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "reging",
            "eprour"
          ],
          "type_name": "piesm"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "reging",
            "eprour"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "reging",
            "eprour"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "reging",
            "eprour"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "astont",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "reging",
            "eprour"
          ],
          "type_name": "astont"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "reging"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "riack",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ricke",
            "bedroom"
          ],
          "type_name": "riack"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "reging",
              "eprour",
              "hallway",
              "ricke",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "taillag",
              "dergal",
              "orele",
              "refrigerator",
              "cupboard",
              "teming",
              "siaticed",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "iless",
              "mop",
              "piesm",
              "apple",
              "banana",
              "orange",
              "astont",
              "plate",
              "riack",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "teming",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "taillag",
              "dergal",
              "orele",
              "refrigerator",
              "cupboard",
              "teming",
              "siaticed",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "taillag",
              "dergal",
              "orele",
              "siaticed",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "teming",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "iless",
              "mop",
              "piesm",
              "apple",
              "banana",
              "orange",
              "astont",
              "plate",
              "riack",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "iless",
              "mop",
              "piesm",
              "apple",
              "banana",
              "orange",
              "astont",
              "plate",
              "riack",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "iless",
              "mop",
              "piesm",
              "apple",
              "banana",
              "orange",
              "astont",
              "plate",
              "riack",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the atoust in the erack, the plecon on the stingly and the mop on the stingly.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(icalit1floor1,icalit1)",
        "at(hallway1floor1,hallway1)",
        "at(cretia1floor1,cretia1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(crury1floor1,crury1)",
        "at(stingly1,cretia1)",
        "at(sidetable1,cretia1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,icalit1)",
        "at(erack1,kitchen1)",
        "at(wardrobe1,crury1)",
        "at(ram1,cretia1)",
        "at(freezer1,icalit1)",
        "at(pottedplant1,hallway1)",
        "at(iscum1,cretia1)",
        "at(bed1,crury1)",
        "at(couch1,cretia1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(lowal1,icalit1)",
        "at(pader1,icalit1)",
        "at(banana1,icalit1)",
        "at(lotta1,icalit1)",
        "at(peach1,icalit1)",
        "at(plecon1,kitchen1)",
        "at(atoust1,crury1)",
        "at(pillow1,crury1)",
        "at(player1,crury1)",
        "type(kitchen1floor1,floor)",
        "type(icalit1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(cretia1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(crury1floor1,floor)",
        "type(player1,player)",
        "type(stingly1,stingly)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(erack1,erack)",
        "type(wardrobe1,wardrobe)",
        "type(ram1,ram)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(iscum1,iscum)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(lowal1,lowal)",
        "type(pader1,pader)",
        "type(banana1,banana)",
        "type(lotta1,lotta)",
        "type(peach1,peach)",
        "type(plecon1,plecon)",
        "type(atoust1,atoust)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(icalit1,icalit)",
        "room(hallway1,hallway)",
        "room(cretia1,cretia)",
        "room(broomcloset1,broomcloset)",
        "room(crury1,crury)",
        "support(kitchen1floor1)",
        "support(icalit1floor1)",
        "support(hallway1floor1)",
        "support(cretia1floor1)",
        "support(broomcloset1floor1)",
        "support(crury1floor1)",
        "support(stingly1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(ram1)",
        "support(iscum1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(atoust1,crury1floor1)",
        "on(plecon1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(erack1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(lotta1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(pader1,refrigerator1)",
        "in(lowal1,refrigerator1)",
        "exit(kitchen1,icalit1)",
        "exit(kitchen1,cretia1)",
        "exit(kitchen1,hallway1)",
        "exit(icalit1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(cretia1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(crury1,hallway1)",
        "exit(hallway1,crury1)",
        "receptacle(stingly1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(erack1)",
        "receptacle(wardrobe1)",
        "receptacle(ram1)",
        "receptacle(freezer1)",
        "receptacle(iscum1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(erack1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(erack1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(lowal1)",
        "takeable(pader1)",
        "takeable(banana1)",
        "takeable(lotta1)",
        "takeable(peach1)",
        "takeable(plecon1)",
        "takeable(atoust1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(lowal1)",
        "movable(pader1)",
        "movable(banana1)",
        "movable(lotta1)",
        "movable(peach1)",
        "movable(plecon1)",
        "movable(atoust1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(lowal1)",
        "needs_support(pader1)",
        "needs_support(banana1)",
        "needs_support(lotta1)",
        "needs_support(peach1)",
        "needs_support(plecon1)",
        "needs_support(atoust1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(atoust1,erack1)",
        "on(plecon1,stingly1)",
        "on(mop1,stingly1)"
      ],
      "optimal_turns": 14,
      "optimal_solution": [
        [
          "take",
          "atoust1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plecon1"
        ],
        [
          "open",
          "erack1"
        ],
        [
          "go",
          "cretia1"
        ],
        [
          "put",
          "plecon1",
          "stingly1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "put",
          "atoust1",
          "erack1"
        ],
        [
          "go",
          "cretia1"
        ],
        [
          "put",
          "mop1",
          "stingly1"
        ]
      ],
      "optimal_commands": [
        "take atoust",
        "go hallway",
        "go broom closet",
        "take mop",
        "go hallway",
        "go kitchen",
        "take plecon",
        "open erack",
        "go cretia",
        "put plecon on stingly",
        "go kitchen",
        "put atoust in erack",
        "go cretia",
        "put mop on stingly"
      ],
      "replacement_dict": {
        "rooms": {
          "livingroom": "cretia",
          "bedroom": "crury",
          "pantry": "icalit"
        },
        "entities": {
          "sandwich": "lowal",
          "plate": "plecon",
          "cupboard": "erack",
          "shelf": "ram",
          "table": "stingly",
          "book": "atoust",
          "chair": "iscum",
          "apple": "pader",
          "orange": "lotta"
        },
        "actions": {
          "take": "precine",
          "put": "astable",
          "open": "omante"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"omante\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To omante is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "omante",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"precine\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To precine is to get something into one's hands, possession or control.",
          "new_word": "precine",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"astable\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To astable is to physically place something somewhere.",
          "new_word": "astable",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "stingly"
          ],
          "exit_targets": [
            "icalit",
            "cretia",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "icalit",
          "standard_content": [
            "refrigerator",
            "ram",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "icalit"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "icalit",
            "cretia",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "cretia",
          "standard_content": [
            "pottedplant",
            "stingly",
            "iscum",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "cretia"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "crury",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "cretia",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "crury"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "stingly",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "cretia"
          ],
          "type_name": "stingly"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "cretia",
            "crury"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "icalit"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "erack",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "erack"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "crury"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "ram",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "icalit",
            "cretia"
          ],
          "type_name": "ram"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "icalit"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "cretia",
            "hallway",
            "crury"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "iscum",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "cretia"
          ],
          "type_name": "iscum"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "crury"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "cretia"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "lowal",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "icalit"
          ],
          "type_name": "lowal"
        },
        {
          "repr_str": "pader",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "icalit"
          ],
          "type_name": "pader"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "icalit"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "lotta",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "icalit"
          ],
          "type_name": "lotta"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "icalit"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plecon",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plecon"
        },
        {
          "repr_str": "atoust",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "cretia",
            "crury"
          ],
          "type_name": "atoust"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "crury"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "icalit",
              "hallway",
              "cretia",
              "broomcloset",
              "crury"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "stingly",
              "sidetable",
              "counter",
              "refrigerator",
              "erack",
              "wardrobe",
              "ram",
              "freezer",
              "pottedplant",
              "iscum",
              "bed",
              "couch",
              "broom",
              "mop",
              "lowal",
              "pader",
              "banana",
              "lotta",
              "peach",
              "plecon",
              "atoust",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "erack",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "stingly",
              "sidetable",
              "counter",
              "refrigerator",
              "erack",
              "wardrobe",
              "ram",
              "freezer",
              "iscum",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "stingly",
              "sidetable",
              "counter",
              "ram",
              "iscum",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "erack",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "lowal",
              "pader",
              "banana",
              "lotta",
              "peach",
              "plecon",
              "atoust",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "lowal",
              "pader",
              "banana",
              "lotta",
              "peach",
              "plecon",
              "atoust",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "lowal",
              "pader",
              "banana",
              "lotta",
              "peach",
              "plecon",
              "atoust",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the tisof in the torhy, the book on the rialiced and the plate on the rialiced.",
      "initial_state": [
        "at(lonon1floor1,lonon1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(ishing1floor1,ishing1)",
        "at(rot1floor1,rot1)",
        "at(rialiced1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(ilitid1,lonon1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,lonon1)",
        "at(torhy1,rot1)",
        "at(shelf1,livingroom1)",
        "at(bioch1,pantry1)",
        "at(hirry1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,rot1)",
        "at(couch1,livingroom1)",
        "at(gumart1,ishing1)",
        "at(mop1,ishing1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(helum1,pantry1)",
        "at(antalle1,pantry1)",
        "at(plate1,lonon1)",
        "at(book1,rot1)",
        "at(tisof1,rot1)",
        "at(player1,rot1)",
        "type(lonon1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(ishing1floor1,floor)",
        "type(rot1floor1,floor)",
        "type(player1,player)",
        "type(rialiced1,rialiced)",
        "type(sidetable1,sidetable)",
        "type(ilitid1,ilitid)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(torhy1,torhy)",
        "type(shelf1,shelf)",
        "type(bioch1,bioch)",
        "type(hirry1,hirry)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(gumart1,gumart)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(helum1,helum)",
        "type(antalle1,antalle)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(tisof1,tisof)",
        "room(lonon1,lonon)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(ishing1,ishing)",
        "room(rot1,rot)",
        "support(lonon1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(ishing1floor1)",
        "support(rot1floor1)",
        "support(rialiced1)",
        "support(sidetable1)",
        "support(ilitid1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(tisof1,bed1)",
        "on(book1,rot1floor1)",
        "on(plate1,lonon1floor1)",
        "on(mop1,ishing1floor1)",
        "on(gumart1,ishing1floor1)",
        "on(hirry1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(torhy1)",
        "container(bioch1)",
        "in(antalle1,refrigerator1)",
        "in(helum1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(lonon1,pantry1)",
        "exit(lonon1,livingroom1)",
        "exit(lonon1,hallway1)",
        "exit(pantry1,lonon1)",
        "exit(hallway1,lonon1)",
        "exit(hallway1,ishing1)",
        "exit(livingroom1,lonon1)",
        "exit(ishing1,hallway1)",
        "exit(rot1,hallway1)",
        "exit(hallway1,rot1)",
        "receptacle(rialiced1)",
        "receptacle(sidetable1)",
        "receptacle(ilitid1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(torhy1)",
        "receptacle(shelf1)",
        "receptacle(bioch1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(torhy1)",
        "openable(bioch1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(torhy1)",
        "closed(bioch1)",
        "takeable(hirry1)",
        "takeable(gumart1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(helum1)",
        "takeable(antalle1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(tisof1)",
        "movable(hirry1)",
        "movable(gumart1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(helum1)",
        "movable(antalle1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(tisof1)",
        "needs_support(hirry1)",
        "needs_support(gumart1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(helum1)",
        "needs_support(antalle1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(tisof1)"
      ],
      "goal_state": [
        "in(tisof1,torhy1)",
        "on(book1,rialiced1)",
        "on(plate1,rialiced1)"
      ],
      "optimal_turns": 12,
      "optimal_solution": [
        [
          "open",
          "torhy1"
        ],
        [
          "take",
          "book1"
        ],
        [
          "take",
          "tisof1"
        ],
        [
          "put",
          "tisof1",
          "torhy1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "lonon1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "plate1",
          "rialiced1"
        ],
        [
          "go",
          "lonon1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "book1",
          "rialiced1"
        ]
      ],
      "optimal_commands": [
        "open torhy",
        "take book",
        "take tisof",
        "put tisof in torhy",
        "go hallway",
        "go lonon",
        "take plate",
        "go living room",
        "put plate on rialiced",
        "go lonon",
        "go living room",
        "put book on rialiced"
      ],
      "replacement_dict": {
        "rooms": {
          "bedroom": "rot",
          "kitchen": "lonon",
          "broomcloset": "ishing"
        },
        "entities": {
          "pottedplant": "hirry",
          "pillow": "tisof",
          "wardrobe": "torhy",
          "counter": "ilitid",
          "table": "rialiced",
          "broom": "gumart",
          "peach": "antalle",
          "orange": "helum",
          "freezer": "bioch"
        },
        "actions": {
          "put": "erson",
          "open": "snemic",
          "take": "intess"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"snemic\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To snemic is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "snemic",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"intess\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To intess is to get something into one's hands, possession or control.",
          "new_word": "intess",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"erson\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To erson is to physically place something somewhere.",
          "new_word": "erson",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "lonon",
          "standard_content": [
            "refrigerator",
            "ilitid",
            "rialiced"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "lonon"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "bioch"
          ],
          "exit_targets": [
            "lonon",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "hirry"
          ],
          "exit_targets": [
            "lonon",
            "pantry",
            "livingroom",
            "ishing"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "hirry",
            "rialiced",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "lonon",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "ishing",
          "standard_content": [
            "gumart"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "ishing"
        },
        {
          "repr_str": "rot",
          "standard_content": [
            "bed",
            "torhy"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "rot"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "rialiced",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "lonon",
            "livingroom"
          ],
          "type_name": "rialiced"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "rot"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "ilitid",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "lonon"
          ],
          "type_name": "ilitid"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "lonon",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "lonon"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "torhy",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "rot"
          ],
          "type_name": "torhy"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "lonon",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "bioch",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "bioch"
        },
        {
          "repr_str": "hirry",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "rot"
          ],
          "type_name": "hirry"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "rot"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "gumart",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ishing"
          ],
          "type_name": "gumart"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ishing"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lonon",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lonon",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lonon",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "helum",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lonon",
            "pantry"
          ],
          "type_name": "helum"
        },
        {
          "repr_str": "antalle",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lonon",
            "pantry"
          ],
          "type_name": "antalle"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "lonon"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "rot"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "tisof",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rot"
          ],
          "type_name": "tisof"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "lonon",
              "pantry",
              "hallway",
              "livingroom",
              "ishing",
              "rot"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "rialiced",
              "sidetable",
              "ilitid",
              "refrigerator",
              "cupboard",
              "torhy",
              "shelf",
              "bioch",
              "hirry",
              "chair",
              "bed",
              "couch",
              "gumart",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "helum",
              "antalle",
              "plate",
              "book",
              "tisof"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "torhy",
              "bioch"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "rialiced",
              "sidetable",
              "ilitid",
              "refrigerator",
              "cupboard",
              "torhy",
              "shelf",
              "bioch",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "rialiced",
              "sidetable",
              "ilitid",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "torhy",
              "bioch"
            ],
            "takeable": [
              "hirry",
              "gumart",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "helum",
              "antalle",
              "plate",
              "book",
              "tisof"
            ],
            "movable": [
              "hirry",
              "gumart",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "helum",
              "antalle",
              "plate",
              "book",
              "tisof"
            ],
            "needs_support": [
              "hirry",
              "gumart",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "helum",
              "antalle",
              "plate",
              "book",
              "tisof"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the emingly in the atival, the plate on the reforia and the mop on the reforia.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(routiced1floor1,routiced1)",
        "at(emood1floor1,emood1)",
        "at(oustion1floor1,oustion1)",
        "at(bedroom1floor1,bedroom1)",
        "at(reforia1,emood1)",
        "at(sidetable1,emood1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,emood1)",
        "at(atival1,pantry1)",
        "at(anird1,routiced1)",
        "at(chair1,emood1)",
        "at(ioness1,bedroom1)",
        "at(attle1,emood1)",
        "at(broom1,oustion1)",
        "at(mop1,oustion1)",
        "at(hetle1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(opige1,pantry1)",
        "at(guaced1,pantry1)",
        "at(plate1,kitchen1)",
        "at(emingly1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(routiced1floor1,floor)",
        "type(emood1floor1,floor)",
        "type(oustion1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(reforia1,reforia)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(atival1,atival)",
        "type(anird1,anird)",
        "type(chair1,chair)",
        "type(ioness1,ioness)",
        "type(attle1,attle)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(hetle1,hetle)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(opige1,opige)",
        "type(guaced1,guaced)",
        "type(plate1,plate)",
        "type(emingly1,emingly)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(routiced1,routiced)",
        "room(emood1,emood)",
        "room(oustion1,oustion)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(routiced1floor1)",
        "support(emood1floor1)",
        "support(oustion1floor1)",
        "support(bedroom1floor1)",
        "support(reforia1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(ioness1)",
        "support(attle1)",
        "on(pillow1,ioness1)",
        "on(emingly1,bedroom1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,oustion1floor1)",
        "on(broom1,oustion1floor1)",
        "on(anird1,routiced1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(atival1)",
        "in(guaced1,refrigerator1)",
        "in(opige1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(hetle1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,emood1)",
        "exit(kitchen1,routiced1)",
        "exit(pantry1,kitchen1)",
        "exit(routiced1,kitchen1)",
        "exit(routiced1,oustion1)",
        "exit(emood1,kitchen1)",
        "exit(oustion1,routiced1)",
        "exit(bedroom1,routiced1)",
        "exit(routiced1,bedroom1)",
        "receptacle(reforia1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(atival1)",
        "receptacle(chair1)",
        "receptacle(ioness1)",
        "receptacle(attle1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(atival1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(atival1)",
        "takeable(anird1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(hetle1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(opige1)",
        "takeable(guaced1)",
        "takeable(plate1)",
        "takeable(emingly1)",
        "takeable(pillow1)",
        "movable(anird1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(hetle1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(opige1)",
        "movable(guaced1)",
        "movable(plate1)",
        "movable(emingly1)",
        "movable(pillow1)",
        "needs_support(anird1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(hetle1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(opige1)",
        "needs_support(guaced1)",
        "needs_support(plate1)",
        "needs_support(emingly1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(emingly1,atival1)",
        "on(plate1,reforia1)",
        "on(mop1,reforia1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "take",
          "emingly1"
        ],
        [
          "go",
          "routiced1"
        ],
        [
          "go",
          "oustion1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "routiced1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "atival1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "emood1"
        ],
        [
          "put",
          "plate1",
          "reforia1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "emood1"
        ],
        [
          "put",
          "mop1",
          "reforia1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "put",
          "emingly1",
          "atival1"
        ]
      ],
      "optimal_commands": [
        "take emingly",
        "go routiced",
        "go oustion",
        "take mop",
        "go routiced",
        "go kitchen",
        "take plate",
        "go pantry",
        "open atival",
        "go kitchen",
        "go emood",
        "put plate on reforia",
        "go kitchen",
        "go emood",
        "put mop on reforia",
        "go kitchen",
        "go pantry",
        "put emingly in atival"
      ],
      "replacement_dict": {
        "rooms": {
          "broomcloset": "oustion",
          "livingroom": "emood",
          "hallway": "routiced"
        },
        "entities": {
          "peach": "guaced",
          "book": "emingly",
          "freezer": "atival",
          "table": "reforia",
          "pottedplant": "anird",
          "orange": "opige",
          "bed": "ioness",
          "couch": "attle",
          "sandwich": "hetle"
        },
        "actions": {
          "take": "thium",
          "close": "fervan",
          "put": "equadis"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"fervan\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To fervan is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "fervan",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"thium\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To thium is to get something into one's hands, possession or control.",
          "new_word": "thium",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"equadis\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To equadis is to physically place something somewhere.",
          "new_word": "equadis",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "reforia"
          ],
          "exit_targets": [
            "pantry",
            "emood",
            "routiced"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "atival"
          ],
          "exit_targets": [
            "kitchen",
            "routiced"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "routiced",
          "standard_content": [
            "anird"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "emood",
            "oustion"
          ],
          "max_connections": 4,
          "type_name": "routiced"
        },
        {
          "repr_str": "emood",
          "standard_content": [
            "anird",
            "reforia",
            "chair",
            "attle"
          ],
          "exit_targets": [
            "kitchen",
            "routiced"
          ],
          "max_connections": 2,
          "type_name": "emood"
        },
        {
          "repr_str": "oustion",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "routiced"
          ],
          "max_connections": 1,
          "type_name": "oustion"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "ioness",
            "wardrobe"
          ],
          "exit_targets": [
            "emood",
            "routiced"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "reforia",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "emood"
          ],
          "type_name": "reforia"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "emood",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "emood"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "atival",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "atival"
        },
        {
          "repr_str": "anird",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "emood",
            "routiced",
            "bedroom"
          ],
          "type_name": "anird"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "emood"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "ioness",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "ioness"
        },
        {
          "repr_str": "attle",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "emood"
          ],
          "type_name": "attle"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "oustion"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "oustion"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "hetle",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "hetle"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "opige",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "opige"
        },
        {
          "repr_str": "guaced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "guaced"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "emingly",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "emood",
            "bedroom"
          ],
          "type_name": "emingly"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "routiced",
              "emood",
              "oustion",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "reforia",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "atival",
              "anird",
              "chair",
              "ioness",
              "attle",
              "broom",
              "mop",
              "hetle",
              "apple",
              "banana",
              "opige",
              "guaced",
              "plate",
              "emingly",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "atival"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "reforia",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "atival",
              "chair",
              "ioness",
              "attle"
            ],
            "support": [
              "floor",
              "reforia",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "ioness",
              "attle"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "atival"
            ],
            "takeable": [
              "anird",
              "broom",
              "mop",
              "hetle",
              "apple",
              "banana",
              "opige",
              "guaced",
              "plate",
              "emingly",
              "pillow"
            ],
            "movable": [
              "anird",
              "broom",
              "mop",
              "hetle",
              "apple",
              "banana",
              "opige",
              "guaced",
              "plate",
              "emingly",
              "pillow"
            ],
            "needs_support": [
              "anird",
              "broom",
              "mop",
              "hetle",
              "apple",
              "banana",
              "opige",
              "guaced",
              "plate",
              "emingly",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the venism in the cunad, the book on the ciot and the plate on the ciot.",
      "initial_state": [
        "at(rotont1floor1,rotont1)",
        "at(pantry1floor1,pantry1)",
        "at(toxist1floor1,toxist1)",
        "at(livingroom1floor1,livingroom1)",
        "at(herper1floor1,herper1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(ciot1,livingroom1)",
        "at(elloust1,rotont1)",
        "at(cunad1,pantry1)",
        "at(upbes1,rotont1)",
        "at(wardrobe1,bedroom1)",
        "at(ially1,livingroom1)",
        "at(onser1,pantry1)",
        "at(pottedplant1,toxist1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(broom1,herper1)",
        "at(mop1,herper1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(everced1,pantry1)",
        "at(mellum1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,rotont1)",
        "at(book1,bedroom1)",
        "at(venism1,bedroom1)",
        "at(player1,bedroom1)",
        "type(rotont1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(toxist1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(herper1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(ciot1,ciot)",
        "type(elloust1,elloust)",
        "type(cunad1,cunad)",
        "type(upbes1,upbes)",
        "type(wardrobe1,wardrobe)",
        "type(ially1,ially)",
        "type(onser1,onser)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(everced1,everced)",
        "type(mellum1,mellum)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(venism1,venism)",
        "room(rotont1,rotont)",
        "room(pantry1,pantry)",
        "room(toxist1,toxist)",
        "room(livingroom1,livingroom)",
        "room(herper1,herper)",
        "room(bedroom1,bedroom)",
        "support(rotont1floor1)",
        "support(pantry1floor1)",
        "support(toxist1floor1)",
        "support(livingroom1floor1)",
        "support(herper1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(ciot1)",
        "support(elloust1)",
        "support(ially1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(venism1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,rotont1floor1)",
        "on(mop1,herper1floor1)",
        "on(broom1,herper1floor1)",
        "on(pottedplant1,toxist1floor1)",
        "container(cunad1)",
        "container(upbes1)",
        "container(wardrobe1)",
        "container(onser1)",
        "in(peach1,cunad1)",
        "in(mellum1,cunad1)",
        "in(everced1,cunad1)",
        "in(apple1,cunad1)",
        "in(sandwich1,cunad1)",
        "exit(rotont1,pantry1)",
        "exit(rotont1,livingroom1)",
        "exit(rotont1,toxist1)",
        "exit(pantry1,rotont1)",
        "exit(toxist1,rotont1)",
        "exit(toxist1,herper1)",
        "exit(livingroom1,rotont1)",
        "exit(herper1,toxist1)",
        "exit(bedroom1,toxist1)",
        "exit(toxist1,bedroom1)",
        "receptacle(table1)",
        "receptacle(ciot1)",
        "receptacle(elloust1)",
        "receptacle(cunad1)",
        "receptacle(upbes1)",
        "receptacle(wardrobe1)",
        "receptacle(ially1)",
        "receptacle(onser1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(cunad1)",
        "openable(upbes1)",
        "openable(wardrobe1)",
        "openable(onser1)",
        "closed(cunad1)",
        "closed(upbes1)",
        "closed(wardrobe1)",
        "closed(onser1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(everced1)",
        "takeable(mellum1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(venism1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(everced1)",
        "movable(mellum1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(venism1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(everced1)",
        "needs_support(mellum1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(venism1)"
      ],
      "goal_state": [
        "in(venism1,cunad1)",
        "on(book1,ciot1)",
        "on(plate1,ciot1)"
      ],
      "optimal_turns": 16,
      "optimal_solution": [
        [
          "take",
          "book1"
        ],
        [
          "take",
          "venism1"
        ],
        [
          "go",
          "toxist1"
        ],
        [
          "go",
          "rotont1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "cunad1"
        ],
        [
          "go",
          "rotont1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "book1",
          "ciot1"
        ],
        [
          "go",
          "rotont1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "put",
          "venism1",
          "cunad1"
        ],
        [
          "go",
          "rotont1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "plate1",
          "ciot1"
        ]
      ],
      "optimal_commands": [
        "take book",
        "take venism",
        "go toxist",
        "go rotont",
        "take plate",
        "go pantry",
        "open cunad",
        "go rotont",
        "go living room",
        "put book on ciot",
        "go rotont",
        "go pantry",
        "put venism in cunad",
        "go rotont",
        "go living room",
        "put plate on ciot"
      ],
      "replacement_dict": {
        "rooms": {
          "broomcloset": "herper",
          "kitchen": "rotont",
          "hallway": "toxist"
        },
        "entities": {
          "pillow": "venism",
          "banana": "everced",
          "refrigerator": "cunad",
          "sidetable": "ciot",
          "orange": "mellum",
          "cupboard": "upbes",
          "shelf": "ially",
          "freezer": "onser",
          "counter": "elloust"
        },
        "actions": {
          "take": "clogery",
          "open": "itink",
          "close": "ambint"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"itink\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To itink is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "itink",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"ambint\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To ambint is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "ambint",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"clogery\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To clogery is to get something into one's hands, possession or control.",
          "new_word": "clogery",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "rotont",
          "standard_content": [
            "cunad",
            "elloust",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "toxist"
          ],
          "max_connections": 3,
          "type_name": "rotont"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "cunad",
            "ially",
            "onser"
          ],
          "exit_targets": [
            "rotont",
            "toxist"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "toxist",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "rotont",
            "pantry",
            "livingroom",
            "herper"
          ],
          "max_connections": 4,
          "type_name": "toxist"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "rotont",
            "toxist"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "herper",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "toxist"
          ],
          "max_connections": 1,
          "type_name": "herper"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "toxist"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "rotont",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "ciot",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "ciot"
        },
        {
          "repr_str": "elloust",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "rotont"
          ],
          "type_name": "elloust"
        },
        {
          "repr_str": "cunad",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "rotont",
            "pantry"
          ],
          "type_name": "cunad"
        },
        {
          "repr_str": "upbes",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "rotont"
          ],
          "type_name": "upbes"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "ially",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "rotont",
            "pantry",
            "livingroom"
          ],
          "type_name": "ially"
        },
        {
          "repr_str": "onser",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "onser"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "toxist",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "herper"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "herper"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rotont",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rotont",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "everced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rotont",
            "pantry"
          ],
          "type_name": "everced"
        },
        {
          "repr_str": "mellum",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rotont",
            "pantry"
          ],
          "type_name": "mellum"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rotont",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rotont"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "venism",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "venism"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "rotont",
              "pantry",
              "toxist",
              "livingroom",
              "herper",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "ciot",
              "elloust",
              "cunad",
              "upbes",
              "wardrobe",
              "ially",
              "onser",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "everced",
              "mellum",
              "peach",
              "plate",
              "book",
              "venism"
            ],
            "container": [
              "inventory",
              "cunad",
              "upbes",
              "wardrobe",
              "onser"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "ciot",
              "elloust",
              "cunad",
              "upbes",
              "wardrobe",
              "ially",
              "onser",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "ciot",
              "elloust",
              "ially",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "cunad",
              "upbes",
              "wardrobe",
              "onser"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "everced",
              "mellum",
              "peach",
              "plate",
              "book",
              "venism"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "everced",
              "mellum",
              "peach",
              "plate",
              "book",
              "venism"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "everced",
              "mellum",
              "peach",
              "plate",
              "book",
              "venism"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the nophyle in the chophal, the book on the matiorm and the eleniced on the matiorm.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pledle1floor1,pledle1)",
        "at(hydroft1floor1,hydroft1)",
        "at(nionia1floor1,nionia1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(matiorm1,nionia1)",
        "at(sidetable1,nionia1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pledle1)",
        "at(cupboard1,kitchen1)",
        "at(chophal1,bedroom1)",
        "at(shelf1,nionia1)",
        "at(freezer1,pledle1)",
        "at(pottedplant1,hydroft1)",
        "at(alloger1,nionia1)",
        "at(gicalio1,bedroom1)",
        "at(nousion1,nionia1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pledle1)",
        "at(apple1,pledle1)",
        "at(glogly1,pledle1)",
        "at(orange1,pledle1)",
        "at(permity1,pledle1)",
        "at(eleniced1,kitchen1)",
        "at(book1,bedroom1)",
        "at(nophyle1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(pledle1floor1,floor)",
        "type(hydroft1floor1,floor)",
        "type(nionia1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(matiorm1,matiorm)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(chophal1,chophal)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(alloger1,alloger)",
        "type(gicalio1,gicalio)",
        "type(nousion1,nousion)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(glogly1,glogly)",
        "type(orange1,orange)",
        "type(permity1,permity)",
        "type(eleniced1,eleniced)",
        "type(book1,book)",
        "type(nophyle1,nophyle)",
        "room(kitchen1,kitchen)",
        "room(pledle1,pledle)",
        "room(hydroft1,hydroft)",
        "room(nionia1,nionia)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(pledle1floor1)",
        "support(hydroft1floor1)",
        "support(nionia1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(matiorm1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(alloger1)",
        "support(gicalio1)",
        "support(nousion1)",
        "on(nophyle1,gicalio1)",
        "on(book1,bedroom1floor1)",
        "on(eleniced1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hydroft1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(chophal1)",
        "container(freezer1)",
        "in(permity1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(glogly1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pledle1)",
        "exit(kitchen1,nionia1)",
        "exit(kitchen1,hydroft1)",
        "exit(pledle1,kitchen1)",
        "exit(hydroft1,kitchen1)",
        "exit(hydroft1,broomcloset1)",
        "exit(nionia1,kitchen1)",
        "exit(broomcloset1,hydroft1)",
        "exit(bedroom1,hydroft1)",
        "exit(hydroft1,bedroom1)",
        "receptacle(matiorm1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(chophal1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(alloger1)",
        "receptacle(gicalio1)",
        "receptacle(nousion1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(chophal1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(chophal1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(glogly1)",
        "takeable(orange1)",
        "takeable(permity1)",
        "takeable(eleniced1)",
        "takeable(book1)",
        "takeable(nophyle1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(glogly1)",
        "movable(orange1)",
        "movable(permity1)",
        "movable(eleniced1)",
        "movable(book1)",
        "movable(nophyle1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(glogly1)",
        "needs_support(orange1)",
        "needs_support(permity1)",
        "needs_support(eleniced1)",
        "needs_support(book1)",
        "needs_support(nophyle1)"
      ],
      "goal_state": [
        "in(nophyle1,chophal1)",
        "on(book1,matiorm1)",
        "on(eleniced1,matiorm1)"
      ],
      "optimal_turns": 12,
      "optimal_solution": [
        [
          "open",
          "chophal1"
        ],
        [
          "take",
          "book1"
        ],
        [
          "take",
          "nophyle1"
        ],
        [
          "put",
          "nophyle1",
          "chophal1"
        ],
        [
          "go",
          "hydroft1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "eleniced1"
        ],
        [
          "go",
          "nionia1"
        ],
        [
          "put",
          "eleniced1",
          "matiorm1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "nionia1"
        ],
        [
          "put",
          "book1",
          "matiorm1"
        ]
      ],
      "optimal_commands": [
        "open chophal",
        "take book",
        "take nophyle",
        "put nophyle in chophal",
        "go hydroft",
        "go kitchen",
        "take eleniced",
        "go nionia",
        "put eleniced on matiorm",
        "go kitchen",
        "go nionia",
        "put book on matiorm"
      ],
      "replacement_dict": {
        "rooms": {
          "pantry": "pledle",
          "hallway": "hydroft",
          "livingroom": "nionia"
        },
        "entities": {
          "pillow": "nophyle",
          "peach": "permity",
          "wardrobe": "chophal",
          "table": "matiorm",
          "couch": "nousion",
          "chair": "alloger",
          "plate": "eleniced",
          "bed": "gicalio",
          "banana": "glogly"
        },
        "actions": {
          "put": "hooic",
          "close": "ridism",
          "take": "ditain"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"ridism\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To ridism is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "ridism",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ditain\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To ditain is to get something into one's hands, possession or control.",
          "new_word": "ditain",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"hooic\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To hooic is to physically place something somewhere.",
          "new_word": "hooic",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "matiorm"
          ],
          "exit_targets": [
            "pledle",
            "nionia",
            "hydroft"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pledle",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hydroft"
          ],
          "max_connections": 1,
          "type_name": "pledle"
        },
        {
          "repr_str": "hydroft",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pledle",
            "nionia",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hydroft"
        },
        {
          "repr_str": "nionia",
          "standard_content": [
            "pottedplant",
            "matiorm",
            "alloger",
            "nousion"
          ],
          "exit_targets": [
            "kitchen",
            "hydroft"
          ],
          "max_connections": 2,
          "type_name": "nionia"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hydroft"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "gicalio",
            "chophal"
          ],
          "exit_targets": [
            "nionia",
            "hydroft"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "matiorm",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "nionia"
          ],
          "type_name": "matiorm"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "nionia",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pledle"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "chophal",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "chophal"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pledle",
            "nionia"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pledle"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "nionia",
            "hydroft",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "alloger",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "nionia"
          ],
          "type_name": "alloger"
        },
        {
          "repr_str": "gicalio",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "gicalio"
        },
        {
          "repr_str": "nousion",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "nionia"
          ],
          "type_name": "nousion"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pledle"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pledle"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "glogly",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pledle"
          ],
          "type_name": "glogly"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pledle"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "permity",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pledle"
          ],
          "type_name": "permity"
        },
        {
          "repr_str": "eleniced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "eleniced"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "nionia",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "nophyle",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "nophyle"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pledle",
              "hydroft",
              "nionia",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "matiorm",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "chophal",
              "shelf",
              "freezer",
              "pottedplant",
              "alloger",
              "gicalio",
              "nousion",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "glogly",
              "orange",
              "permity",
              "eleniced",
              "book",
              "nophyle"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "chophal",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "matiorm",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "chophal",
              "shelf",
              "freezer",
              "alloger",
              "gicalio",
              "nousion"
            ],
            "support": [
              "floor",
              "matiorm",
              "sidetable",
              "counter",
              "shelf",
              "alloger",
              "gicalio",
              "nousion"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "chophal",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "glogly",
              "orange",
              "permity",
              "eleniced",
              "book",
              "nophyle"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "glogly",
              "orange",
              "permity",
              "eleniced",
              "book",
              "nophyle"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "glogly",
              "orange",
              "permity",
              "eleniced",
              "book",
              "nophyle"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_medium",
      "goal": "Put the aterve in the altriced, the abluty on the conader and the mop on the conader.",
      "initial_state": [
        "at(irmant1floor1,irmant1)",
        "at(scalike1floor1,scalike1)",
        "at(hallway1floor1,hallway1)",
        "at(tursot1floor1,tursot1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(conader1,tursot1)",
        "at(sidetable1,tursot1)",
        "at(counter1,irmant1)",
        "at(refrigerator1,scalike1)",
        "at(cupboard1,irmant1)",
        "at(altriced1,bedroom1)",
        "at(shelf1,tursot1)",
        "at(polotit1,scalike1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,tursot1)",
        "at(bed1,bedroom1)",
        "at(uningnee1,tursot1)",
        "at(onable1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,scalike1)",
        "at(athemb1,scalike1)",
        "at(banana1,scalike1)",
        "at(orange1,scalike1)",
        "at(arimiced1,scalike1)",
        "at(abluty1,irmant1)",
        "at(aterve1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(irmant1floor1,floor)",
        "type(scalike1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(tursot1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(conader1,conader)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(altriced1,altriced)",
        "type(shelf1,shelf)",
        "type(polotit1,polotit)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(uningnee1,uningnee)",
        "type(onable1,onable)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(athemb1,athemb)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(arimiced1,arimiced)",
        "type(abluty1,abluty)",
        "type(aterve1,aterve)",
        "type(pillow1,pillow)",
        "room(irmant1,irmant)",
        "room(scalike1,scalike)",
        "room(hallway1,hallway)",
        "room(tursot1,tursot)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(irmant1floor1)",
        "support(scalike1floor1)",
        "support(hallway1floor1)",
        "support(tursot1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(conader1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(uningnee1)",
        "on(pillow1,bed1)",
        "on(aterve1,bedroom1floor1)",
        "on(abluty1,irmant1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(onable1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(altriced1)",
        "container(polotit1)",
        "in(arimiced1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(athemb1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(irmant1,scalike1)",
        "exit(irmant1,tursot1)",
        "exit(irmant1,hallway1)",
        "exit(scalike1,irmant1)",
        "exit(hallway1,irmant1)",
        "exit(hallway1,broomcloset1)",
        "exit(tursot1,irmant1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(conader1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(altriced1)",
        "receptacle(shelf1)",
        "receptacle(polotit1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(uningnee1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(altriced1)",
        "openable(polotit1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(altriced1)",
        "closed(polotit1)",
        "takeable(pottedplant1)",
        "takeable(onable1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(athemb1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(arimiced1)",
        "takeable(abluty1)",
        "takeable(aterve1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(onable1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(athemb1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(arimiced1)",
        "movable(abluty1)",
        "movable(aterve1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(onable1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(athemb1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(arimiced1)",
        "needs_support(abluty1)",
        "needs_support(aterve1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "in(aterve1,altriced1)",
        "on(abluty1,conader1)",
        "on(mop1,conader1)"
      ],
      "optimal_turns": 14,
      "optimal_solution": [
        [
          "open",
          "altriced1"
        ],
        [
          "take",
          "aterve1"
        ],
        [
          "put",
          "aterve1",
          "altriced1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "irmant1"
        ],
        [
          "take",
          "abluty1"
        ],
        [
          "go",
          "tursot1"
        ],
        [
          "put",
          "abluty1",
          "conader1"
        ],
        [
          "go",
          "irmant1"
        ],
        [
          "go",
          "tursot1"
        ],
        [
          "put",
          "mop1",
          "conader1"
        ]
      ],
      "optimal_commands": [
        "open altriced",
        "take aterve",
        "put aterve in altriced",
        "go hallway",
        "go broom closet",
        "take mop",
        "go hallway",
        "go irmant",
        "take abluty",
        "go tursot",
        "put abluty on conader",
        "go irmant",
        "go tursot",
        "put mop on conader"
      ],
      "replacement_dict": {
        "rooms": {
          "livingroom": "tursot",
          "kitchen": "irmant",
          "pantry": "scalike"
        },
        "entities": {
          "apple": "athemb",
          "plate": "abluty",
          "wardrobe": "altriced",
          "couch": "uningnee",
          "freezer": "polotit",
          "peach": "arimiced",
          "table": "conader",
          "broom": "onable",
          "book": "aterve"
        },
        "actions": {
          "close": "sinark",
          "open": "ropile",
          "take": "ecast"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"ropile\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To ropile is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "ropile",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"sinark\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To sinark is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "sinark",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"ecast\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To ecast is to get something into one's hands, possession or control.",
          "new_word": "ecast",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "irmant",
          "standard_content": [
            "refrigerator",
            "counter",
            "conader"
          ],
          "exit_targets": [
            "scalike",
            "tursot",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "irmant"
        },
        {
          "repr_str": "scalike",
          "standard_content": [
            "refrigerator",
            "shelf",
            "polotit"
          ],
          "exit_targets": [
            "irmant",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "scalike"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "irmant",
            "scalike",
            "tursot",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "tursot",
          "standard_content": [
            "pottedplant",
            "conader",
            "chair",
            "uningnee"
          ],
          "exit_targets": [
            "irmant",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "tursot"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "onable"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "altriced"
          ],
          "exit_targets": [
            "tursot",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "conader",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "irmant",
            "tursot"
          ],
          "type_name": "conader"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "tursot",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "irmant"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "irmant",
            "scalike"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "irmant"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "altriced",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "altriced"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "irmant",
            "scalike",
            "tursot"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "polotit",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "scalike"
          ],
          "type_name": "polotit"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "tursot",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "tursot"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "uningnee",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "tursot"
          ],
          "type_name": "uningnee"
        },
        {
          "repr_str": "onable",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "onable"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "irmant",
            "scalike"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "athemb",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "irmant",
            "scalike"
          ],
          "type_name": "athemb"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "irmant",
            "scalike"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "irmant",
            "scalike"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "arimiced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "irmant",
            "scalike"
          ],
          "type_name": "arimiced"
        },
        {
          "repr_str": "abluty",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "irmant"
          ],
          "type_name": "abluty"
        },
        {
          "repr_str": "aterve",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "tursot",
            "bedroom"
          ],
          "type_name": "aterve"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "irmant",
              "scalike",
              "hallway",
              "tursot",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "conader",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "altriced",
              "shelf",
              "polotit",
              "pottedplant",
              "chair",
              "bed",
              "uningnee",
              "onable",
              "mop",
              "sandwich",
              "athemb",
              "banana",
              "orange",
              "arimiced",
              "abluty",
              "aterve",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "altriced",
              "polotit"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "conader",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "altriced",
              "shelf",
              "polotit",
              "chair",
              "bed",
              "uningnee"
            ],
            "support": [
              "floor",
              "conader",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "uningnee"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "altriced",
              "polotit"
            ],
            "takeable": [
              "pottedplant",
              "onable",
              "mop",
              "sandwich",
              "athemb",
              "banana",
              "orange",
              "arimiced",
              "abluty",
              "aterve",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "onable",
              "mop",
              "sandwich",
              "athemb",
              "banana",
              "orange",
              "arimiced",
              "abluty",
              "aterve",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "onable",
              "mop",
              "sandwich",
              "athemb",
              "banana",
              "orange",
              "arimiced",
              "abluty",
              "aterve",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_no_explanation",
      "bench_turn_limit": 50
    }
  ]
}