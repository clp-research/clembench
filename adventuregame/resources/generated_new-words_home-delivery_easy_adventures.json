{
  "easy": [
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the uness on the table, the potted plant on the cally and the peach on the cally.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(unree1floor1,unree1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(cally1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,unree1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,unree1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(uness1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,unree1)",
        "at(apple1,unree1)",
        "at(iness1,unree1)",
        "at(orange1,unree1)",
        "at(peach1,unree1)",
        "at(plate1,kitchen1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(unree1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(cally1,cally)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(uness1,uness)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(iness1,iness)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(unree1,unree)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(unree1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(cally1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(uness1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(iness1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,unree1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(unree1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(cally1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(uness1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(iness1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(uness1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(iness1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(uness1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(iness1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(uness1,table1)",
        "on(pottedplant1,cally1)",
        "on(peach1,cally1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "uness1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "take",
          "pottedplant1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "uness1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "unree1"
        ],
        [
          "open",
          "refrigerator1"
        ],
        [
          "take",
          "peach1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "pottedplant1",
          "cally1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "peach1",
          "cally1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "go broom closet",
        "take uness",
        "go hallway",
        "take potted plant",
        "go kitchen",
        "go living room",
        "put uness on table",
        "go kitchen",
        "go unree",
        "open refrigerator",
        "take peach",
        "go kitchen",
        "go living room",
        "put potted plant on cally",
        "go kitchen",
        "go living room",
        "put peach on cally"
      ],
      "replacement_dict": {
        "rooms": {
          "pantry": "unree"
        },
        "entities": {
          "banana": "iness",
          "broom": "uness",
          "sidetable": "cally"
        },
        "actions": {
          "open": "maten"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"maten\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To maten is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "maten",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "unree",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "unree",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "unree"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "unree",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "uness"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "cally",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "cally"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "unree"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "unree",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "unree"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "uness",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "uness"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unree"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unree"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "iness",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unree"
          ],
          "type_name": "iness"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unree"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unree"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "unree",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "cally",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "uness",
              "mop",
              "sandwich",
              "apple",
              "iness",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "cally",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "cally",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "uness",
              "mop",
              "sandwich",
              "apple",
              "iness",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "uness",
              "mop",
              "sandwich",
              "apple",
              "iness",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "uness",
              "mop",
              "sandwich",
              "apple",
              "iness",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the subst on the table, the book on the scont and the plate on the scont.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(unsust1floor1,unsust1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(scont1,kitchen1)",
        "at(refrigerator1,unsust1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,unsust1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(dente1,broomcloset1)",
        "at(sandwich1,unsust1)",
        "at(apple1,unsust1)",
        "at(banana1,unsust1)",
        "at(orange1,unsust1)",
        "at(peach1,unsust1)",
        "at(plate1,kitchen1)",
        "at(book1,bedroom1)",
        "at(subst1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(unsust1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(scont1,scont)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(dente1,dente)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(subst1,subst)",
        "room(kitchen1,kitchen)",
        "room(unsust1,unsust)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(unsust1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(scont1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(subst1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(dente1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,unsust1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(unsust1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(scont1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(dente1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(subst1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(dente1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(subst1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(dente1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(subst1)"
      ],
      "goal_state": [
        "on(subst1,table1)",
        "on(book1,scont1)",
        "on(plate1,scont1)"
      ],
      "optimal_turns": 8,
      "optimal_solution": [
        [
          "take",
          "book1"
        ],
        [
          "take",
          "subst1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "put",
          "book1",
          "scont1"
        ],
        [
          "put",
          "plate1",
          "scont1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "subst1",
          "table1"
        ]
      ],
      "optimal_commands": [
        "take book",
        "take subst",
        "go hallway",
        "go kitchen",
        "put book on scont",
        "put plate on scont",
        "go living room",
        "put subst on table"
      ],
      "replacement_dict": {
        "rooms": {
          "pantry": "unsust"
        },
        "entities": {
          "mop": "dente",
          "pillow": "subst",
          "counter": "scont"
        },
        "actions": {
          "open": "diale"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"diale\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To diale is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "diale",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "scont",
            "table"
          ],
          "exit_targets": [
            "unsust",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "unsust",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "unsust"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "unsust",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "scont",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "scont"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "unsust"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "unsust",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "unsust"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "dente",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "dente"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unsust"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unsust"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unsust"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unsust"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "unsust"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "subst",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "subst"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "unsust",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "scont",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "dente",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "subst"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "scont",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "scont",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "dente",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "subst"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "dente",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "subst"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "dente",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "subst"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the mical on the pante, the mop on the pante and the broom on the pante.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(sness1floor1,sness1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(pante1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,sness1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,sness1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(eness1,sness1)",
        "at(apple1,sness1)",
        "at(banana1,sness1)",
        "at(orange1,sness1)",
        "at(peach1,sness1)",
        "at(mical1,kitchen1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(sness1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(pante1,pante)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(eness1,eness)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(mical1,mical)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(sness1,sness)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(sness1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(pante1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(mical1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(eness1,refrigerator1)",
        "exit(kitchen1,sness1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(sness1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(pante1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(eness1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(mical1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(eness1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(mical1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(eness1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(mical1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(mical1,pante1)",
        "on(mop1,pante1)",
        "on(broom1,pante1)"
      ],
      "optimal_turns": 15,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "broom1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "broom1",
          "pante1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "mop1",
          "pante1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "mical1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "mical1",
          "pante1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "go broom closet",
        "take broom",
        "take mop",
        "go hallway",
        "go kitchen",
        "go living room",
        "put broom on pante",
        "go kitchen",
        "go living room",
        "put mop on pante",
        "go kitchen",
        "take mical",
        "go living room",
        "put mical on pante"
      ],
      "replacement_dict": {
        "rooms": {
          "pantry": "sness"
        },
        "entities": {
          "plate": "mical",
          "sandwich": "eness",
          "table": "pante"
        },
        "actions": {
          "close": "inate"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"inate\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To inate is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "inate",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "pante"
          ],
          "exit_targets": [
            "sness",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "sness",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "sness"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "sness",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "pante",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "pante",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "pante"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "sness"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "sness",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "sness"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "eness",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "sness"
          ],
          "type_name": "eness"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "sness"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "sness"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "sness"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "sness"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "mical",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "mical"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "sness",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "pante",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "eness",
              "apple",
              "banana",
              "orange",
              "peach",
              "mical",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "pante",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "pante",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "eness",
              "apple",
              "banana",
              "orange",
              "peach",
              "mical",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "eness",
              "apple",
              "banana",
              "orange",
              "peach",
              "mical",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "eness",
              "apple",
              "banana",
              "orange",
              "peach",
              "mical",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the decte on the table, the plate on the stord and the mop on the stord.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(enticed1floor1,enticed1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,enticed1)",
        "at(stord1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,enticed1)",
        "at(couch1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(exper1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,kitchen1)",
        "at(decte1,enticed1)",
        "at(pillow1,enticed1)",
        "at(player1,enticed1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(enticed1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(stord1,stord)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(exper1,exper)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(decte1,decte)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(enticed1,enticed)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(enticed1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(stord1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(decte1,enticed1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(exper1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(pantry1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(enticed1,hallway1)",
        "exit(hallway1,enticed1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(stord1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(exper1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(decte1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(exper1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(decte1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(exper1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(decte1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(decte1,table1)",
        "on(plate1,stord1)",
        "on(mop1,stord1)"
      ],
      "optimal_turns": 15,
      "optimal_solution": [
        [
          "take",
          "decte1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "decte1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "plate1",
          "stord1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "mop1",
          "stord1"
        ]
      ],
      "optimal_commands": [
        "take decte",
        "go hallway",
        "go broom closet",
        "take mop",
        "go hallway",
        "go kitchen",
        "go living room",
        "put decte on table",
        "go kitchen",
        "take plate",
        "go living room",
        "put plate on stord",
        "go kitchen",
        "go living room",
        "put mop on stord"
      ],
      "replacement_dict": {
        "rooms": {
          "bedroom": "enticed"
        },
        "entities": {
          "book": "decte",
          "orange": "exper",
          "shelf": "stord"
        },
        "actions": {
          "put": "aphon"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"aphon\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To aphon is to physically place something somewhere.",
          "new_word": "aphon",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "stord",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "enticed",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "enticed"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "enticed"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "enticed"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "stord",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "livingroom"
          ],
          "type_name": "stord"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "enticed"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "enticed"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "exper",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "exper"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "decte",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "enticed"
          ],
          "type_name": "decte"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "enticed"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "enticed"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "stord",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "exper",
              "peach",
              "plate",
              "decte",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "stord",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "stord",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "exper",
              "peach",
              "plate",
              "decte",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "exper",
              "peach",
              "plate",
              "decte",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "exper",
              "peach",
              "plate",
              "decte",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the gaticed on the table, the unbal on the table and the peach in the raticed.",
      "initial_state": [
        "at(mator1floor1,mator1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,mator1)",
        "at(refrigerator1,pantry1)",
        "at(raticed1,mator1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(unbal1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(gaticed1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,mator1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(mator1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(raticed1,raticed)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(unbal1,unbal)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(gaticed1,gaticed)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(mator1,mator)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(mator1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,mator1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(gaticed1,broomcloset1floor1)",
        "on(unbal1,hallway1floor1)",
        "container(refrigerator1)",
        "container(raticed1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(mator1,pantry1)",
        "exit(mator1,livingroom1)",
        "exit(mator1,hallway1)",
        "exit(pantry1,mator1)",
        "exit(hallway1,mator1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,mator1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(raticed1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(raticed1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(raticed1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(unbal1)",
        "takeable(gaticed1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(unbal1)",
        "movable(gaticed1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(unbal1)",
        "needs_support(gaticed1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(gaticed1,table1)",
        "on(unbal1,table1)",
        "in(peach1,raticed1)"
      ],
      "optimal_turns": 17,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "gaticed1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "take",
          "unbal1"
        ],
        [
          "go",
          "mator1"
        ],
        [
          "open",
          "raticed1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "refrigerator1"
        ],
        [
          "take",
          "peach1"
        ],
        [
          "go",
          "mator1"
        ],
        [
          "put",
          "peach1",
          "raticed1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "gaticed1",
          "table1"
        ],
        [
          "go",
          "mator1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "unbal1",
          "table1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "go broom closet",
        "take gaticed",
        "go hallway",
        "take unbal",
        "go mator",
        "open raticed",
        "go pantry",
        "open refrigerator",
        "take peach",
        "go mator",
        "put peach in raticed",
        "go living room",
        "put gaticed on table",
        "go mator",
        "go living room",
        "put unbal on table"
      ],
      "replacement_dict": {
        "rooms": {
          "kitchen": "mator"
        },
        "entities": {
          "pottedplant": "unbal",
          "broom": "gaticed",
          "cupboard": "raticed"
        },
        "actions": {
          "open": "remic"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"remic\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To remic is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "remic",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "mator",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "mator"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "mator",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "unbal"
          ],
          "exit_targets": [
            "mator",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "unbal",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "mator",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "gaticed"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "mator",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "mator"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "mator",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "raticed",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "mator"
          ],
          "type_name": "raticed"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "mator",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "unbal",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "unbal"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "gaticed",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "gaticed"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "mator",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "mator",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "mator",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "mator",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "mator",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "mator"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "mator",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "raticed",
              "wardrobe",
              "shelf",
              "freezer",
              "unbal",
              "chair",
              "bed",
              "couch",
              "gaticed",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "raticed",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "raticed",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "raticed",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "unbal",
              "gaticed",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "unbal",
              "gaticed",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "unbal",
              "gaticed",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the uner on the trion, the natin on the trion and the peach on the trion.",
      "initial_state": [
        "at(proart1floor1,proart1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(trion1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,proart1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,proart1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(natin1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(uner1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,proart1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(proart1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(trion1,trion)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(natin1,natin)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(uner1,uner)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(proart1,proart)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(proart1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(trion1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,proart1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(uner1,broomcloset1floor1)",
        "on(natin1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(proart1,pantry1)",
        "exit(proart1,livingroom1)",
        "exit(proart1,hallway1)",
        "exit(pantry1,proart1)",
        "exit(hallway1,proart1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,proart1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(trion1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(natin1)",
        "takeable(uner1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(natin1)",
        "movable(uner1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(natin1)",
        "needs_support(uner1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(uner1,trion1)",
        "on(natin1,trion1)",
        "on(peach1,trion1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "take",
          "natin1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "uner1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "proart1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "refrigerator1"
        ],
        [
          "take",
          "peach1"
        ],
        [
          "go",
          "proart1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "uner1",
          "trion1"
        ],
        [
          "go",
          "proart1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "natin1",
          "trion1"
        ],
        [
          "go",
          "proart1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "peach1",
          "trion1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "take natin",
        "go broom closet",
        "take uner",
        "go hallway",
        "go proart",
        "go pantry",
        "open refrigerator",
        "take peach",
        "go proart",
        "go living room",
        "put uner on trion",
        "go proart",
        "go living room",
        "put natin on trion",
        "go proart",
        "go living room",
        "put peach on trion"
      ],
      "replacement_dict": {
        "rooms": {
          "kitchen": "proart"
        },
        "entities": {
          "broom": "uner",
          "pottedplant": "natin",
          "table": "trion"
        },
        "actions": {
          "open": "perce"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"perce\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To perce is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "perce",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "proart",
          "standard_content": [
            "refrigerator",
            "counter",
            "trion"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "proart"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "proart",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "natin"
          ],
          "exit_targets": [
            "proart",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "natin",
            "trion",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "proart",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "uner"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "trion",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "proart",
            "livingroom"
          ],
          "type_name": "trion"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "proart"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "proart",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "proart"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "proart",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "natin",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "natin"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "uner",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "uner"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "proart",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "proart",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "proart",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "proart",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "proart",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "proart"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "proart",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "trion",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "natin",
              "chair",
              "bed",
              "couch",
              "uner",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "trion",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "trion",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "natin",
              "uner",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "natin",
              "uner",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "natin",
              "uner",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the unpish on the table, the plate on the secti and the mop on the secti.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(nolog1floor1,nolog1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,nolog1)",
        "at(secti1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,nolog1)",
        "at(couch1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(ation1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,kitchen1)",
        "at(unpish1,nolog1)",
        "at(pillow1,nolog1)",
        "at(player1,nolog1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(nolog1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(secti1,secti)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(ation1,ation)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(unpish1,unpish)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(nolog1,nolog)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(nolog1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(secti1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(unpish1,nolog1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(ation1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(pantry1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(nolog1,hallway1)",
        "exit(hallway1,nolog1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(secti1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(ation1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(unpish1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(ation1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(unpish1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(ation1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(unpish1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(unpish1,table1)",
        "on(plate1,secti1)",
        "on(mop1,secti1)"
      ],
      "optimal_turns": 15,
      "optimal_solution": [
        [
          "take",
          "unpish1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "unpish1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "plate1",
          "secti1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "mop1",
          "secti1"
        ]
      ],
      "optimal_commands": [
        "take unpish",
        "go hallway",
        "go broom closet",
        "take mop",
        "go hallway",
        "go kitchen",
        "go living room",
        "put unpish on table",
        "go kitchen",
        "take plate",
        "go living room",
        "put plate on secti",
        "go kitchen",
        "go living room",
        "put mop on secti"
      ],
      "replacement_dict": {
        "rooms": {
          "bedroom": "nolog"
        },
        "entities": {
          "banana": "ation",
          "book": "unpish",
          "shelf": "secti"
        },
        "actions": {
          "put": "tratel"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"tratel\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To tratel is to physically place something somewhere.",
          "new_word": "tratel",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "secti",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "nolog",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "nolog"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "nolog"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "nolog"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "secti",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "livingroom"
          ],
          "type_name": "secti"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "nolog"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "nolog"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "ation",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "ation"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "unpish",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "nolog"
          ],
          "type_name": "unpish"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "nolog"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "nolog"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "secti",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "ation",
              "orange",
              "peach",
              "plate",
              "unpish",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "secti",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "secti",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "ation",
              "orange",
              "peach",
              "plate",
              "unpish",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "ation",
              "orange",
              "peach",
              "plate",
              "unpish",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "ation",
              "orange",
              "peach",
              "plate",
              "unpish",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the nond on the table, the orange in the torish and the banana in the torish.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(imped1floor1,imped1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(torish1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,imped1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(inet1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(nond1,pantry1)",
        "at(plate1,kitchen1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(imped1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(torish1,torish)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(inet1,inet)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(nond1,nond)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(imped1,imped)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(imped1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,imped1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(torish1)",
        "container(freezer1)",
        "in(nond1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(inet1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,imped1)",
        "exit(pantry1,kitchen1)",
        "exit(imped1,kitchen1)",
        "exit(imped1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,imped1)",
        "exit(bedroom1,imped1)",
        "exit(imped1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(torish1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(torish1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(torish1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(inet1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(nond1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(inet1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(nond1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(inet1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(nond1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(nond1,table1)",
        "in(orange1,torish1)",
        "in(banana1,torish1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "open",
          "torish1"
        ],
        [
          "go",
          "imped1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "refrigerator1"
        ],
        [
          "take",
          "nond1"
        ],
        [
          "take",
          "banana1"
        ],
        [
          "take",
          "orange1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "nond1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "imped1"
        ],
        [
          "go",
          "bedroom1"
        ],
        [
          "put",
          "banana1",
          "torish1"
        ],
        [
          "go",
          "imped1"
        ],
        [
          "go",
          "bedroom1"
        ],
        [
          "put",
          "orange1",
          "torish1"
        ]
      ],
      "optimal_commands": [
        "open torish",
        "go imped",
        "go kitchen",
        "go pantry",
        "open refrigerator",
        "take nond",
        "take banana",
        "take orange",
        "go kitchen",
        "go living room",
        "put nond on table",
        "go kitchen",
        "go imped",
        "go bedroom",
        "put banana in torish",
        "go imped",
        "go bedroom",
        "put orange in torish"
      ],
      "replacement_dict": {
        "rooms": {
          "hallway": "imped"
        },
        "entities": {
          "peach": "nond",
          "apple": "inet",
          "wardrobe": "torish"
        },
        "actions": {
          "close": "stism"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"stism\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To stism is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "stism",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "imped"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "imped"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "imped",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "imped"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "imped"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "imped"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "torish"
          ],
          "exit_targets": [
            "livingroom",
            "imped"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "torish",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "torish"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "imped",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "inet",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "inet"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "nond",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "nond"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "imped",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "torish",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "sandwich",
              "inet",
              "banana",
              "orange",
              "nond",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "torish",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "torish",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "torish",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "inet",
              "banana",
              "orange",
              "nond",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "inet",
              "banana",
              "orange",
              "nond",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "inet",
              "banana",
              "orange",
              "nond",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the nogia on the table, the potted plant in the aling and the peach in the aling.",
      "initial_state": [
        "at(rably1floor1,rably1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,rably1)",
        "at(refrigerator1,pantry1)",
        "at(aling1,rably1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(nogia1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(trionee1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,rably1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(rably1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(aling1,aling)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(nogia1,nogia)",
        "type(mop1,mop)",
        "type(trionee1,trionee)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(rably1,rably)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(rably1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,rably1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(nogia1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(aling1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(trionee1,refrigerator1)",
        "exit(rably1,pantry1)",
        "exit(rably1,livingroom1)",
        "exit(rably1,hallway1)",
        "exit(pantry1,rably1)",
        "exit(hallway1,rably1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,rably1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(aling1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(aling1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(aling1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(nogia1)",
        "takeable(mop1)",
        "takeable(trionee1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(nogia1)",
        "movable(mop1)",
        "movable(trionee1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(nogia1)",
        "needs_support(mop1)",
        "needs_support(trionee1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(nogia1,table1)",
        "in(pottedplant1,aling1)",
        "in(peach1,aling1)"
      ],
      "optimal_turns": 16,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "nogia1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "take",
          "pottedplant1"
        ],
        [
          "go",
          "rably1"
        ],
        [
          "open",
          "aling1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "refrigerator1"
        ],
        [
          "take",
          "peach1"
        ],
        [
          "go",
          "rably1"
        ],
        [
          "put",
          "peach1",
          "aling1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "nogia1",
          "table1"
        ],
        [
          "go",
          "rably1"
        ],
        [
          "put",
          "pottedplant1",
          "aling1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "go broom closet",
        "take nogia",
        "go hallway",
        "take potted plant",
        "go rably",
        "open aling",
        "go pantry",
        "open refrigerator",
        "take peach",
        "go rably",
        "put peach in aling",
        "go living room",
        "put nogia on table",
        "go rably",
        "put potted plant in aling"
      ],
      "replacement_dict": {
        "rooms": {
          "kitchen": "rably"
        },
        "entities": {
          "sandwich": "trionee",
          "broom": "nogia",
          "cupboard": "aling"
        },
        "actions": {
          "open": "vater"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"vater\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To vater is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "vater",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "rably",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "rably"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "rably",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "rably",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "rably",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "nogia"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "rably",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "rably"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "rably",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "aling",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "rably"
          ],
          "type_name": "aling"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "rably",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "nogia",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "nogia"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "trionee",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rably",
            "pantry"
          ],
          "type_name": "trionee"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rably",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rably",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rably",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rably",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rably"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "rably",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "aling",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "nogia",
              "mop",
              "trionee",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "aling",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "aling",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "aling",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "nogia",
              "mop",
              "trionee",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "nogia",
              "mop",
              "trionee",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "nogia",
              "mop",
              "trionee",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the ousnee on the table, the potted plant on the delly and the peach on the delly.",
      "initial_state": [
        "at(ationee1floor1,ationee1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,ationee1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,ationee1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(delly1,livingroom1)",
        "at(ousnee1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(het1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,ationee1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(ationee1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(delly1,delly)",
        "type(ousnee1,ousnee)",
        "type(mop1,mop)",
        "type(het1,het)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(ationee1,ationee)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(ationee1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(delly1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,ationee1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(ousnee1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(het1,refrigerator1)",
        "exit(ationee1,pantry1)",
        "exit(ationee1,livingroom1)",
        "exit(ationee1,hallway1)",
        "exit(pantry1,ationee1)",
        "exit(hallway1,ationee1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,ationee1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(delly1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(ousnee1)",
        "takeable(mop1)",
        "takeable(het1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(ousnee1)",
        "movable(mop1)",
        "movable(het1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(ousnee1)",
        "needs_support(mop1)",
        "needs_support(het1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(ousnee1,table1)",
        "on(pottedplant1,delly1)",
        "on(peach1,delly1)"
      ],
      "optimal_turns": 18,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "take",
          "pottedplant1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "ousnee1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "ationee1"
        ],
        [
          "go",
          "pantry1"
        ],
        [
          "open",
          "refrigerator1"
        ],
        [
          "take",
          "peach1"
        ],
        [
          "go",
          "ationee1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "peach1",
          "delly1"
        ],
        [
          "go",
          "ationee1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "pottedplant1",
          "delly1"
        ],
        [
          "go",
          "ationee1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "ousnee1",
          "table1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "take potted plant",
        "go broom closet",
        "take ousnee",
        "go hallway",
        "go ationee",
        "go pantry",
        "open refrigerator",
        "take peach",
        "go ationee",
        "go living room",
        "put peach on delly",
        "go ationee",
        "go living room",
        "put potted plant on delly",
        "go ationee",
        "go living room",
        "put ousnee on table"
      ],
      "replacement_dict": {
        "rooms": {
          "kitchen": "ationee"
        },
        "entities": {
          "broom": "ousnee",
          "sandwich": "het",
          "couch": "delly"
        },
        "actions": {
          "open": "unalin"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"unalin\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To unalin is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "unalin",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "ationee",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "ationee"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "ationee",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "ationee",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "delly"
          ],
          "exit_targets": [
            "ationee",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "ousnee"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "ationee",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "ationee"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "ationee",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "ationee"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "ationee",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "delly",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "delly"
        },
        {
          "repr_str": "ousnee",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "ousnee"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "het",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ationee",
            "pantry"
          ],
          "type_name": "het"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ationee",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ationee",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ationee",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ationee",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "ationee"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "ationee",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "delly",
              "ousnee",
              "mop",
              "het",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "delly"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "delly"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "ousnee",
              "mop",
              "het",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "ousnee",
              "mop",
              "het",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "ousnee",
              "mop",
              "het",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the penol on the table, the mop on the micon and the broom on the micon.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(thot1floor1,thot1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,thot1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(micon1,livingroom1)",
        "at(freezer1,thot1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(couch1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(ceoust1,thot1)",
        "at(apple1,thot1)",
        "at(banana1,thot1)",
        "at(orange1,thot1)",
        "at(peach1,thot1)",
        "at(penol1,kitchen1)",
        "at(book1,bedroom1)",
        "at(pillow1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(thot1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(micon1,micon)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(ceoust1,ceoust)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(penol1,penol)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(thot1,thot)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(thot1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(micon1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(penol1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(ceoust1,refrigerator1)",
        "exit(kitchen1,thot1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(thot1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(micon1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(ceoust1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(penol1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(ceoust1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(penol1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(ceoust1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(penol1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(penol1,table1)",
        "on(mop1,micon1)",
        "on(broom1,micon1)"
      ],
      "optimal_turns": 15,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "take",
          "broom1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "mop1",
          "micon1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "broom1",
          "micon1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "penol1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "penol1",
          "table1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "go broom closet",
        "take mop",
        "take broom",
        "go hallway",
        "go kitchen",
        "go living room",
        "put mop on micon",
        "go kitchen",
        "go living room",
        "put broom on micon",
        "go kitchen",
        "take penol",
        "go living room",
        "put penol on table"
      ],
      "replacement_dict": {
        "rooms": {
          "pantry": "thot"
        },
        "entities": {
          "sandwich": "ceoust",
          "plate": "penol",
          "shelf": "micon"
        },
        "actions": {
          "close": "fress"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"fress\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To fress is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "new_word": "fress",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "thot",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "thot",
          "standard_content": [
            "refrigerator",
            "micon",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "thot"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "thot",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "thot"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "micon",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "thot",
            "livingroom"
          ],
          "type_name": "micon"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "thot"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "ceoust",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "thot"
          ],
          "type_name": "ceoust"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "thot"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "thot"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "thot"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "thot"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "penol",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "penol"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "thot",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "micon",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "ceoust",
              "apple",
              "banana",
              "orange",
              "peach",
              "penol",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "micon",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "micon",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "ceoust",
              "apple",
              "banana",
              "orange",
              "peach",
              "penol",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "ceoust",
              "apple",
              "banana",
              "orange",
              "peach",
              "penol",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "ceoust",
              "apple",
              "banana",
              "orange",
              "peach",
              "penol",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the enerk on the table, the book on the alism and the plate on the alism.",
      "initial_state": [
        "at(catint1floor1,catint1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,catint1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,catint1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(soriced1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(alism1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,catint1)",
        "at(book1,bedroom1)",
        "at(enerk1,bedroom1)",
        "at(player1,bedroom1)",
        "type(catint1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(soriced1,soriced)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(alism1,alism)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(enerk1,enerk)",
        "room(catint1,catint)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(catint1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(alism1)",
        "on(enerk1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,catint1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(soriced1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(catint1,pantry1)",
        "exit(catint1,livingroom1)",
        "exit(catint1,hallway1)",
        "exit(pantry1,catint1)",
        "exit(hallway1,catint1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,catint1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(alism1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(soriced1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(enerk1)",
        "movable(soriced1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(enerk1)",
        "needs_support(soriced1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(enerk1)"
      ],
      "goal_state": [
        "on(enerk1,table1)",
        "on(book1,alism1)",
        "on(plate1,alism1)"
      ],
      "optimal_turns": 13,
      "optimal_solution": [
        [
          "take",
          "enerk1"
        ],
        [
          "take",
          "book1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "catint1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "book1",
          "alism1"
        ],
        [
          "go",
          "catint1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "enerk1",
          "table1"
        ],
        [
          "go",
          "catint1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "plate1",
          "alism1"
        ]
      ],
      "optimal_commands": [
        "take enerk",
        "take book",
        "go hallway",
        "go catint",
        "take plate",
        "go living room",
        "put book on alism",
        "go catint",
        "go living room",
        "put enerk on table",
        "go catint",
        "go living room",
        "put plate on alism"
      ],
      "replacement_dict": {
        "rooms": {
          "kitchen": "catint"
        },
        "entities": {
          "pottedplant": "soriced",
          "pillow": "enerk",
          "couch": "alism"
        },
        "actions": {
          "open": "ortid"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"ortid\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To ortid is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "new_word": "ortid",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "catint",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "catint"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "catint",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "soriced"
          ],
          "exit_targets": [
            "catint",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "soriced",
            "table",
            "chair",
            "alism"
          ],
          "exit_targets": [
            "catint",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "catint",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "catint"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "catint",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "catint"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "catint",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "soriced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "soriced"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "alism",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "alism"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "catint",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "catint",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "catint",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "catint",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "catint",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "catint"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "enerk",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "enerk"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "catint",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "soriced",
              "chair",
              "bed",
              "alism",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "enerk"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "alism"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "alism"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "soriced",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "enerk"
            ],
            "movable": [
              "soriced",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "enerk"
            ],
            "needs_support": [
              "soriced",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "peach",
              "plate",
              "book",
              "enerk"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the unflued on the table, the plate in the pacia and the mop in the pacia.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(uncest1floor1,uncest1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(pacia1,uncest1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,uncest1)",
        "at(couch1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(tulacy1,pantry1)",
        "at(plate1,kitchen1)",
        "at(unflued1,uncest1)",
        "at(pillow1,uncest1)",
        "at(player1,uncest1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(uncest1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(pacia1,pacia)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(tulacy1,tulacy)",
        "type(plate1,plate)",
        "type(unflued1,unflued)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(uncest1,uncest)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(uncest1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(pillow1,bed1)",
        "on(unflued1,uncest1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(pacia1)",
        "container(freezer1)",
        "in(tulacy1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(pantry1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(uncest1,hallway1)",
        "exit(hallway1,uncest1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(pacia1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(pacia1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(pacia1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(tulacy1)",
        "takeable(plate1)",
        "takeable(unflued1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(tulacy1)",
        "movable(plate1)",
        "movable(unflued1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(tulacy1)",
        "needs_support(plate1)",
        "needs_support(unflued1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(unflued1,table1)",
        "in(plate1,pacia1)",
        "in(mop1,pacia1)"
      ],
      "optimal_turns": 17,
      "optimal_solution": [
        [
          "open",
          "pacia1"
        ],
        [
          "take",
          "unflued1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "unflued1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "uncest1"
        ],
        [
          "put",
          "plate1",
          "pacia1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "uncest1"
        ],
        [
          "put",
          "mop1",
          "pacia1"
        ]
      ],
      "optimal_commands": [
        "open pacia",
        "take unflued",
        "go hallway",
        "go broom closet",
        "take mop",
        "go hallway",
        "go kitchen",
        "take plate",
        "go living room",
        "put unflued on table",
        "go kitchen",
        "go hallway",
        "go uncest",
        "put plate in pacia",
        "go hallway",
        "go uncest",
        "put mop in pacia"
      ],
      "replacement_dict": {
        "rooms": {
          "bedroom": "uncest"
        },
        "entities": {
          "peach": "tulacy",
          "book": "unflued",
          "wardrobe": "pacia"
        },
        "actions": {
          "put": "sious"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"sious\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To sious is to physically place something somewhere.",
          "new_word": "sious",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "uncest",
          "standard_content": [
            "bed",
            "pacia"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "uncest"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "uncest"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "pacia",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "uncest"
          ],
          "type_name": "pacia"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "uncest"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "uncest"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "tulacy",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "tulacy"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "unflued",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "uncest"
          ],
          "type_name": "unflued"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "uncest"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "uncest"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "pacia",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "tulacy",
              "plate",
              "unflued",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "pacia",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "pacia",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "pacia",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "tulacy",
              "plate",
              "unflued",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "tulacy",
              "plate",
              "unflued",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "tulacy",
              "plate",
              "unflued",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the menny on the reele, the book on the reele and the plate on the reele.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(rist1floor1,rist1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(bedroom1floor1,bedroom1)",
        "at(reele1,rist1)",
        "at(sidetable1,rist1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,rist1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,rist1)",
        "at(bed1,bedroom1)",
        "at(couch1,rist1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(inging1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(plate1,kitchen1)",
        "at(book1,bedroom1)",
        "at(menny1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(rist1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(reele1,reele)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(couch1,couch)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(inging1,inging)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(menny1,menny)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(rist1,rist)",
        "room(broomcloset1,broomcloset)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(rist1floor1)",
        "support(broomcloset1floor1)",
        "support(bedroom1floor1)",
        "support(reele1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(couch1)",
        "on(menny1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(inging1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,rist1)",
        "exit(kitchen1,hallway1)",
        "exit(pantry1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(rist1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(reele1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(couch1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(inging1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(menny1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(inging1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(menny1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(inging1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(menny1)"
      ],
      "goal_state": [
        "on(menny1,reele1)",
        "on(book1,reele1)",
        "on(plate1,reele1)"
      ],
      "optimal_turns": 13,
      "optimal_solution": [
        [
          "take",
          "menny1"
        ],
        [
          "take",
          "book1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "rist1"
        ],
        [
          "put",
          "menny1",
          "reele1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "rist1"
        ],
        [
          "put",
          "plate1",
          "reele1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "rist1"
        ],
        [
          "put",
          "book1",
          "reele1"
        ]
      ],
      "optimal_commands": [
        "take menny",
        "take book",
        "go hallway",
        "go kitchen",
        "go rist",
        "put menny on reele",
        "go kitchen",
        "take plate",
        "go rist",
        "put plate on reele",
        "go kitchen",
        "go rist",
        "put book on reele"
      ],
      "replacement_dict": {
        "rooms": {
          "livingroom": "rist"
        },
        "entities": {
          "pillow": "menny",
          "banana": "inging",
          "table": "reele"
        },
        "actions": {
          "take": "prust"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"prust\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To prust is to get something into one's hands, possession or control.",
          "new_word": "prust",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "reele"
          ],
          "exit_targets": [
            "pantry",
            "rist",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "rist",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "rist",
          "standard_content": [
            "pottedplant",
            "reele",
            "chair",
            "couch"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "rist"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "rist",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "reele",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "rist"
          ],
          "type_name": "reele"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "rist",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "rist"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "rist",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "rist"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "couch",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "rist"
          ],
          "type_name": "couch"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "inging",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "inging"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "rist",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "menny",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "menny"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "hallway",
              "rist",
              "broomcloset",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "reele",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "couch",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "inging",
              "orange",
              "peach",
              "plate",
              "book",
              "menny"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "reele",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "couch"
            ],
            "support": [
              "floor",
              "reele",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "couch"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "inging",
              "orange",
              "peach",
              "plate",
              "book",
              "menny"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "inging",
              "orange",
              "peach",
              "plate",
              "book",
              "menny"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "inging",
              "orange",
              "peach",
              "plate",
              "book",
              "menny"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the ramiced on the table, the book on the derman and the plate on the derman.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(logal1floor1,logal1)",
        "at(bedroom1floor1,bedroom1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,bedroom1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,bedroom1)",
        "at(derman1,livingroom1)",
        "at(broom1,logal1)",
        "at(mop1,logal1)",
        "at(sandwich1,pantry1)",
        "at(apple1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(sulphy1,pantry1)",
        "at(plate1,kitchen1)",
        "at(book1,bedroom1)",
        "at(ramiced1,bedroom1)",
        "at(player1,bedroom1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(logal1floor1,floor)",
        "type(bedroom1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(derman1,derman)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(apple1,apple)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(sulphy1,sulphy)",
        "type(plate1,plate)",
        "type(book1,book)",
        "type(ramiced1,ramiced)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(logal1,logal)",
        "room(bedroom1,bedroom)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(logal1floor1)",
        "support(bedroom1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(derman1)",
        "on(ramiced1,bed1)",
        "on(book1,bedroom1floor1)",
        "on(plate1,kitchen1floor1)",
        "on(mop1,logal1floor1)",
        "on(broom1,logal1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(sulphy1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(apple1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(pantry1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,logal1)",
        "exit(livingroom1,kitchen1)",
        "exit(logal1,hallway1)",
        "exit(bedroom1,hallway1)",
        "exit(hallway1,bedroom1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(derman1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(apple1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(sulphy1)",
        "takeable(plate1)",
        "takeable(book1)",
        "takeable(ramiced1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(apple1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(sulphy1)",
        "movable(plate1)",
        "movable(book1)",
        "movable(ramiced1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(apple1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(sulphy1)",
        "needs_support(plate1)",
        "needs_support(book1)",
        "needs_support(ramiced1)"
      ],
      "goal_state": [
        "on(ramiced1,table1)",
        "on(book1,derman1)",
        "on(plate1,derman1)"
      ],
      "optimal_turns": 13,
      "optimal_solution": [
        [
          "take",
          "ramiced1"
        ],
        [
          "take",
          "book1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "plate1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "book1",
          "derman1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "ramiced1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "plate1",
          "derman1"
        ]
      ],
      "optimal_commands": [
        "take ramiced",
        "take book",
        "go hallway",
        "go kitchen",
        "take plate",
        "go living room",
        "put book on derman",
        "go kitchen",
        "go living room",
        "put ramiced on table",
        "go kitchen",
        "go living room",
        "put plate on derman"
      ],
      "replacement_dict": {
        "rooms": {
          "broomcloset": "logal"
        },
        "entities": {
          "pillow": "ramiced",
          "peach": "sulphy",
          "couch": "derman"
        },
        "actions": {
          "take": "tedne"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: \"tedne\" WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To tedne is to get something into one's hands, possession or control.",
          "new_word": "tedne",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: (\"put\" | \"leave\" | \"place\" | \"drop\") WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to physically place something somewhere.",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "livingroom",
            "logal"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "derman"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "logal",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "logal"
        },
        {
          "repr_str": "bedroom",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "bedroom"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "bedroom"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "derman",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "derman"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "logal"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "logal"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "apple",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "apple"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "sulphy",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sulphy"
        },
        {
          "repr_str": "plate",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "plate"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "bedroom"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "ramiced",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "bedroom"
          ],
          "type_name": "ramiced"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "hallway",
              "livingroom",
              "logal",
              "bedroom"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "derman",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "sulphy",
              "plate",
              "book",
              "ramiced"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "derman"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "derman"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "sulphy",
              "plate",
              "book",
              "ramiced"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "sulphy",
              "plate",
              "book",
              "ramiced"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "apple",
              "banana",
              "orange",
              "sulphy",
              "plate",
              "book",
              "ramiced"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    },
    {
      "adventure_type": "new-words_home-delivery_easy",
      "goal": "Put the lator on the table, the mop on the comper and the broom on the comper.",
      "initial_state": [
        "at(kitchen1floor1,kitchen1)",
        "at(pantry1floor1,pantry1)",
        "at(hallway1floor1,hallway1)",
        "at(livingroom1floor1,livingroom1)",
        "at(broomcloset1floor1,broomcloset1)",
        "at(tuat1floor1,tuat1)",
        "at(table1,livingroom1)",
        "at(sidetable1,livingroom1)",
        "at(counter1,kitchen1)",
        "at(refrigerator1,pantry1)",
        "at(cupboard1,kitchen1)",
        "at(wardrobe1,tuat1)",
        "at(shelf1,livingroom1)",
        "at(freezer1,pantry1)",
        "at(pottedplant1,hallway1)",
        "at(chair1,livingroom1)",
        "at(bed1,tuat1)",
        "at(comper1,livingroom1)",
        "at(broom1,broomcloset1)",
        "at(mop1,broomcloset1)",
        "at(sandwich1,pantry1)",
        "at(chross1,pantry1)",
        "at(banana1,pantry1)",
        "at(orange1,pantry1)",
        "at(peach1,pantry1)",
        "at(lator1,kitchen1)",
        "at(book1,tuat1)",
        "at(pillow1,tuat1)",
        "at(player1,tuat1)",
        "type(kitchen1floor1,floor)",
        "type(pantry1floor1,floor)",
        "type(hallway1floor1,floor)",
        "type(livingroom1floor1,floor)",
        "type(broomcloset1floor1,floor)",
        "type(tuat1floor1,floor)",
        "type(player1,player)",
        "type(table1,table)",
        "type(sidetable1,sidetable)",
        "type(counter1,counter)",
        "type(refrigerator1,refrigerator)",
        "type(cupboard1,cupboard)",
        "type(wardrobe1,wardrobe)",
        "type(shelf1,shelf)",
        "type(freezer1,freezer)",
        "type(pottedplant1,pottedplant)",
        "type(chair1,chair)",
        "type(bed1,bed)",
        "type(comper1,comper)",
        "type(broom1,broom)",
        "type(mop1,mop)",
        "type(sandwich1,sandwich)",
        "type(chross1,chross)",
        "type(banana1,banana)",
        "type(orange1,orange)",
        "type(peach1,peach)",
        "type(lator1,lator)",
        "type(book1,book)",
        "type(pillow1,pillow)",
        "room(kitchen1,kitchen)",
        "room(pantry1,pantry)",
        "room(hallway1,hallway)",
        "room(livingroom1,livingroom)",
        "room(broomcloset1,broomcloset)",
        "room(tuat1,tuat)",
        "support(kitchen1floor1)",
        "support(pantry1floor1)",
        "support(hallway1floor1)",
        "support(livingroom1floor1)",
        "support(broomcloset1floor1)",
        "support(tuat1floor1)",
        "support(table1)",
        "support(sidetable1)",
        "support(counter1)",
        "support(shelf1)",
        "support(chair1)",
        "support(bed1)",
        "support(comper1)",
        "on(pillow1,bed1)",
        "on(book1,tuat1floor1)",
        "on(lator1,kitchen1floor1)",
        "on(mop1,broomcloset1floor1)",
        "on(broom1,broomcloset1floor1)",
        "on(pottedplant1,hallway1floor1)",
        "container(refrigerator1)",
        "container(cupboard1)",
        "container(wardrobe1)",
        "container(freezer1)",
        "in(peach1,refrigerator1)",
        "in(orange1,refrigerator1)",
        "in(banana1,refrigerator1)",
        "in(chross1,refrigerator1)",
        "in(sandwich1,refrigerator1)",
        "exit(kitchen1,pantry1)",
        "exit(kitchen1,livingroom1)",
        "exit(kitchen1,hallway1)",
        "exit(pantry1,kitchen1)",
        "exit(hallway1,kitchen1)",
        "exit(hallway1,broomcloset1)",
        "exit(livingroom1,kitchen1)",
        "exit(broomcloset1,hallway1)",
        "exit(tuat1,hallway1)",
        "exit(hallway1,tuat1)",
        "receptacle(table1)",
        "receptacle(sidetable1)",
        "receptacle(counter1)",
        "receptacle(refrigerator1)",
        "receptacle(cupboard1)",
        "receptacle(wardrobe1)",
        "receptacle(shelf1)",
        "receptacle(freezer1)",
        "receptacle(chair1)",
        "receptacle(bed1)",
        "receptacle(comper1)",
        "openable(refrigerator1)",
        "openable(cupboard1)",
        "openable(wardrobe1)",
        "openable(freezer1)",
        "closed(refrigerator1)",
        "closed(cupboard1)",
        "closed(wardrobe1)",
        "closed(freezer1)",
        "takeable(pottedplant1)",
        "takeable(broom1)",
        "takeable(mop1)",
        "takeable(sandwich1)",
        "takeable(chross1)",
        "takeable(banana1)",
        "takeable(orange1)",
        "takeable(peach1)",
        "takeable(lator1)",
        "takeable(book1)",
        "takeable(pillow1)",
        "movable(pottedplant1)",
        "movable(broom1)",
        "movable(mop1)",
        "movable(sandwich1)",
        "movable(chross1)",
        "movable(banana1)",
        "movable(orange1)",
        "movable(peach1)",
        "movable(lator1)",
        "movable(book1)",
        "movable(pillow1)",
        "needs_support(pottedplant1)",
        "needs_support(broom1)",
        "needs_support(mop1)",
        "needs_support(sandwich1)",
        "needs_support(chross1)",
        "needs_support(banana1)",
        "needs_support(orange1)",
        "needs_support(peach1)",
        "needs_support(lator1)",
        "needs_support(book1)",
        "needs_support(pillow1)"
      ],
      "goal_state": [
        "on(lator1,table1)",
        "on(mop1,comper1)",
        "on(broom1,comper1)"
      ],
      "optimal_turns": 15,
      "optimal_solution": [
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "broomcloset1"
        ],
        [
          "take",
          "broom1"
        ],
        [
          "take",
          "mop1"
        ],
        [
          "go",
          "hallway1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "broom1",
          "comper1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "take",
          "lator1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "lator1",
          "table1"
        ],
        [
          "go",
          "kitchen1"
        ],
        [
          "go",
          "livingroom1"
        ],
        [
          "put",
          "mop1",
          "comper1"
        ]
      ],
      "optimal_commands": [
        "go hallway",
        "go broom closet",
        "take broom",
        "take mop",
        "go hallway",
        "go kitchen",
        "go living room",
        "put broom on comper",
        "go kitchen",
        "take lator",
        "go living room",
        "put lator on table",
        "go kitchen",
        "go living room",
        "put mop on comper"
      ],
      "replacement_dict": {
        "rooms": {
          "bedroom": "tuat"
        },
        "entities": {
          "apple": "chross",
          "plate": "lator",
          "couch": "comper"
        },
        "actions": {
          "put": "comess"
        }
      },
      "action_definitions": [
        {
          "lark": "open: OPEN thing\nOPEN.1: \"open\" WS",
          "pddl": "(:action OPEN\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (closed ?e)\n        )\n    :effect (and\n        (open ?e)\n        (not (closed ?e))\n        (forall (?c - takeable)\n            (when\n                (in ?c ?e)\n                (and\n                    (accessible ?c)\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not closed.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now open. {{ container_content }}",
          "asp": "{ action_t(TURN,open,THING):at_t(TURN,THING,ROOM),closed_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nopen_t(TURN+1,THING) :- action_t(TURN,open,THING).\nopen_t(TURN+1,THING) :- turn(TURN), open_t(TURN,THING), not action_t(TURN,close,THING).",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to make something physically unobstructed and uncovered, and make its contents available for use or interaction.",
          "type_name": "open"
        },
        {
          "lark": "close: CLOSE thing\nCLOSE.1: \"close\" WS",
          "pddl": "(:action CLOSE\n    :parameters (?e - openable ?r - room ?p - player)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (open ?e)\n        )\n    :effect (and\n        (closed ?e)\n        (not (open ?e))\n        (forall (?i - takeable)\n            (when\n                (in ?i ?e)\n                (and\n                    (not (accessible ?i))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?r": [
              "current_player_room"
            ],
            "?p": [
              "player"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not openable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not open.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "The {{ e }} is now closed.",
          "asp": "{ action_t(TURN,close,THING):at_t(TURN,THING,ROOM),open_t(TURN,THING) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nclosed_t(TURN+1,THING) :- action_t(TURN,close,THING).\nclosed_t(TURN+1,THING) :- turn(TURN), closed_t(TURN,THING), not action_t(TURN,open,THING).",
          "epistemic": false,
          "pragmatic": false,
          "explanation": "To VERB is to remove or block an opening of something, and make its contents unavailable for use or interaction.",
          "type_name": "close"
        },
        {
          "lark": "take: TAKE PREP* thing (PREP thing)*\nTAKE.1: (\"take\" | \"grab\" | \"pick\" | \"get\") WS",
          "pddl": "(:action TAKE\n    :parameters (?e - takeable ?s - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (or \n            (in ?e inventory)\n            (at ?s ?r)\n            )        \n        (accessible ?e)\n        (or\n            (and\n                (on ?e ?s)\n                (support ?s)\n                )\n            (and\n                (open ?s)\n                (container ?s)\n                (in ?e ?s)\n                )\n            )\n        )\n    :effect (and\n        (in ?e ?i)\n        (when\n            (and\n                (support ?s)\n                (on ?e ?s)\n                )\n            (not (on ?e ?s))\n            )\n        (when\n            (and\n                (container ?s)\n                (in ?e ?s)\n                )\n            (not (in ?e ?s))\n            )\n    )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?s": [
              "arg2",
              "arg1_receptacle"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not takeable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ s }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is already in your inventory.",
                "entity_already_inventory"
              ],
              [
                "You can't see a {{ s }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ e }} is not on the {{ s }}.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a support.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ s }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ s }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ e }} is not in the {{ s }}.",
                "entity_state_mismatch"
              ]
            ]
          },
          "success_feedback": "You take the {{ e }}. {{ inventory_desc }}",
          "asp": "{ action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),in_t(TURN,THING,CONTAINER),open_t(TURN,CONTAINER),at_t(TURN,player1,ROOM);action_t(TURN,take,THING):at_t(TURN,THING,ROOM),takeable(THING),on_t(TURN,THING,SUPPORT),support(SUPPORT),at_t(TURN,player1,ROOM) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,inventory) :- action_t(TURN,take,THING).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), in_t(TURN,THING,TARGET), not action_t(TURN,take,THING), TARGET != inventory.\non_t(TURN+1,THING,TARGET) :- turn(TURN), on_t(TURN,THING,TARGET), not action_t(TURN,take,THING).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to get something into one's hands, possession or control.",
          "type_name": "take"
        },
        {
          "lark": "put: PUT thing (\"back\" WS)* PREP* thing\nPUT.1: \"comess\" WS",
          "pddl": "(:action PUT\n    :parameters (?e - movable ?t - receptacle ?p - player ?i - inventory ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        (at ?e ?r)\n        (at ?t ?r)\n        (or\n            (and\n                (container ?t)\n                (open ?t)\n                )\n            (support ?t)\n            )\n        )\n    :effect (and\n        (not (in ?e ?i))\n        (when\n            (support ?t)\n            (on ?e ?t)\n            )\n        (when\n            (container ?t)\n            (in ?e ?t)\n            )\n        )\n)",
          "pddl_parameter_mapping": {
            "?e": [
              "arg1"
            ],
            "?t": [
              "arg2"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ e }} is not moveable.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ t }} is not a receptacle.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "You can't see a {{ t }} here.",
                "entity_not_accessible"
              ],
              [
                "The {{ t }} is not a container.",
                "entity_trait_mismatch"
              ],
              [
                "The {{ t }} is not open.",
                "entity_state_mismatch"
              ],
              [
                "The {{ t }} is not a support.",
                "entity_trait_mismatch"
              ]
            ]
          },
          "success_feedback": "You put the {{ e }} {{ prep }} the {{ t }}.",
          "asp": "{ action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),at_t(TURN,SOURCE,ROOM),movable(THING),container(SOURCE),in_t(TURN,THING,SOURCE),open_t(TURN,SOURCE),support(TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),support(TARGET),movable(THING),on_t(TURN,THING,SOURCE),support(SOURCE);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),container(TARGET),open_t(TURN,TARGET);action_t(TURN,put,THING,TARGET):at_t(TURN,THING,ROOM),at_t(TURN,player1,ROOM),at_t(TURN,TARGET,ROOM),movable(THING),in_t(TURN,THING,inventory),support(TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nin_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), container(TARGET).\non_t(TURN+1,THING,TARGET) :- turn(TURN), action_t(TURN,put,THING,TARGET), support(TARGET).\nin_t(TURN+1,THING,inventory) :- turn(TURN), in_t(TURN,THING,inventory), not action_t(TURN,put,THING,_).",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To comess is to physically place something somewhere.",
          "new_word": "comess",
          "type_name": "put"
        },
        {
          "lark": "go: GO (\"back\" WS)* (\"to\" WS)* thing\nGO.1: (\"go\" | \"enter\" | \"return\" | \"proceed\" | \"move\") WS",
          "pddl": "(:action GO\n    :parameters (?c ?d - room ?p - player ?i - inventory)\n    :precondition (and\n        (at ?p ?c)\n        (not (at ?p ?d))\n        (exit ?c ?d)\n        )\n    :effect (and\n        (at ?p ?d)\n        (not (at ?p ?c))\n        (forall (?e - takeable)\n            (when\n                (in ?e ?i)\n                (and\n                    (at ?e ?d)\n                    (not (at ?e ?c))\n                )\n            )\n        )\n    )\n)",
          "pddl_parameter_mapping": {
            "?c": [
              "current_player_room"
            ],
            "?d": [
              "arg1"
            ],
            "?p": [
              "player"
            ],
            "?i": [
              "inventory"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ c }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ d }} is not a room.",
                "domain_trait_type_mismatch"
              ],
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ i }} is not an inventory. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You are already in the {{ d }}.",
                "going_to_current_room"
              ],
              [
                "You can't go to a {{ d }} from here.",
                "no_exit_to"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "{ action_t(TURN,go,TARGET):exit(ROOM,TARGET) } 1 :- turn(TURN), at_t(TURN,player1,ROOM), not turn_limit(TURN).\nat_t(TURN+1,player1,TARGET) :- action_t(TURN,go,TARGET).\nat_t(TURN+1,player1,ROOM) :- turn(TURN), at_t(TURN,player1,ROOM), not action_t(TURN,go,_).\nat_t(TURN+1,THING,TARGET) :- action_t(TURN,go,TARGET), in_t(TURN,THING,inventory).\nat_t(TURN+1,THING,ROOM) :- turn(TURN), at_t(TURN,THING,ROOM), not in_t(TURN,THING,inventory), not turn_limit(TURN), THING != player1.",
          "epistemic": true,
          "pragmatic": true,
          "explanation": "To VERB is to move through space, especially to a place.",
          "type_name": "go"
        },
        {
          "lark": "done: DONE\nDONE.1: (\"done\" | \"quit\" | \"finish\") WS*",
          "pddl": "(:action DONE\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n        )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "You consider yourself done.",
          "asp": "",
          "epistemic": false,
          "pragmatic": true,
          "explanation": "To VERB is to end the game.",
          "type_name": "done"
        },
        {
          "lark": "examine: EXAMINE thing\nEXAMINE.1: (\"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action EXAMINE\n    :parameters (?p - player ?r - room ?e - entity)\n    :precondition (and\n        (at ?p ?r)\n        (or\n            (at ?e ?r)\n            (type ?e inventory)\n            )\n        (accessible ?e)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ],
            "?e": [
              "arg1"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ e }} is not an entity. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ],
              [
                "Your inventory is not an entity. (This should not occur.)",
                "world_state_discrepancy"
              ],
              [
                "You can't see a {{ e }} here.",
                "entity_not_accessible"
              ]
            ]
          },
          "success_feedback": "{{ arg1_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to observe or inspect carefully.",
          "type_name": "examine"
        },
        {
          "lark": "look: LOOK (\"at\"* ( thing | \"around\" | \"room\" ) )\nLOOK.1: (\"look\" | \"examine\" | \"check\" | \"inspect\" | \"search\") WS",
          "pddl": "(:action LOOK\n    :parameters (?p - player ?r - room)\n    :precondition (and\n        (at ?p ?r)\n            )\n    :effect (and\n    )\n)",
          "pddl_parameter_mapping": {
            "?p": [
              "player"
            ],
            "?r": [
              "current_player_room"
            ]
          },
          "failure_feedback": {
            "parameters": [
              [
                "{{ p }} is not a player. (This should not occur.)",
                "domain_type_discrepancy"
              ],
              [
                "{{ r }} is not a room. (This should not occur.)",
                "domain_type_discrepancy"
              ]
            ],
            "precondition": [
              [
                "You are not where you are! (This should not occur.)",
                "world_state_discrepancy"
              ]
            ]
          },
          "success_feedback": "{{ room_desc }}",
          "asp": "",
          "epistemic": true,
          "pragmatic": false,
          "explanation": "To VERB is to inspect a room.",
          "type_name": "look"
        }
      ],
      "room_definitions": [
        {
          "repr_str": "kitchen",
          "standard_content": [
            "refrigerator",
            "counter",
            "table"
          ],
          "exit_targets": [
            "pantry",
            "livingroom",
            "hallway"
          ],
          "max_connections": 3,
          "type_name": "kitchen"
        },
        {
          "repr_str": "pantry",
          "standard_content": [
            "refrigerator",
            "shelf",
            "freezer"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "pantry"
        },
        {
          "repr_str": "hallway",
          "standard_content": [
            "pottedplant"
          ],
          "exit_targets": [
            "kitchen",
            "pantry",
            "livingroom",
            "broomcloset"
          ],
          "max_connections": 4,
          "type_name": "hallway"
        },
        {
          "repr_str": "living room",
          "standard_content": [
            "pottedplant",
            "table",
            "chair",
            "comper"
          ],
          "exit_targets": [
            "kitchen",
            "hallway"
          ],
          "max_connections": 2,
          "type_name": "livingroom"
        },
        {
          "repr_str": "broom closet",
          "standard_content": [
            "broom"
          ],
          "exit_targets": [
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "broomcloset"
        },
        {
          "repr_str": "tuat",
          "standard_content": [
            "bed",
            "wardrobe"
          ],
          "exit_targets": [
            "livingroom",
            "hallway"
          ],
          "max_connections": 1,
          "type_name": "tuat"
        }
      ],
      "entity_definitions": [
        {
          "repr_str": "you",
          "hidden": true,
          "traits": [],
          "type_name": "player"
        },
        {
          "repr_str": "inventory",
          "hidden": true,
          "container": true,
          "traits": [
            "container",
            "receptacle"
          ],
          "type_name": "inventory"
        },
        {
          "repr_str": "floor",
          "hidden": true,
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "type_name": "floor"
        },
        {
          "repr_str": "table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "livingroom"
          ],
          "type_name": "table"
        },
        {
          "repr_str": "side table",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "tuat"
          ],
          "type_name": "sidetable"
        },
        {
          "repr_str": "counter",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "counter"
        },
        {
          "repr_str": "refrigerator",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "refrigerator"
        },
        {
          "repr_str": "cupboard",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "cupboard"
        },
        {
          "repr_str": "wardrobe",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "large",
            "fancy"
          ],
          "standard_locations": [
            "tuat"
          ],
          "type_name": "wardrobe"
        },
        {
          "repr_str": "shelf",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "wooden",
            "metal",
            "low",
            "high"
          ],
          "standard_locations": [
            "kitchen",
            "pantry",
            "livingroom"
          ],
          "type_name": "shelf"
        },
        {
          "repr_str": "freezer",
          "container": true,
          "openable": true,
          "traits": [
            "container",
            "openable",
            "receptacle"
          ],
          "possible_adjs": [
            "large",
            "deep"
          ],
          "standard_locations": [
            "pantry"
          ],
          "type_name": "freezer"
        },
        {
          "repr_str": "potted plant",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "possible_adjs": [
            "large",
            "small"
          ],
          "standard_locations": [
            "livingroom",
            "hallway",
            "tuat"
          ],
          "type_name": "pottedplant"
        },
        {
          "repr_str": "chair",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "chair"
        },
        {
          "repr_str": "bed",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden"
          ],
          "standard_locations": [
            "tuat"
          ],
          "type_name": "bed"
        },
        {
          "repr_str": "comper",
          "support": true,
          "traits": [
            "support",
            "receptacle"
          ],
          "possible_adjs": [
            "comfy",
            "wooden",
            "padded"
          ],
          "standard_locations": [
            "livingroom"
          ],
          "type_name": "comper"
        },
        {
          "repr_str": "broom",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "broom"
        },
        {
          "repr_str": "mop",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "broomcloset"
          ],
          "type_name": "mop"
        },
        {
          "repr_str": "sandwich",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "sandwich"
        },
        {
          "repr_str": "chross",
          "takeable": true,
          "movable": true,
          "supported": true,
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "chross"
        },
        {
          "repr_str": "banana",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "jelly"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "banana"
        },
        {
          "repr_str": "orange",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "orange"
        },
        {
          "repr_str": "peach",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ripe",
            "fresh"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen",
            "pantry"
          ],
          "type_name": "peach"
        },
        {
          "repr_str": "lator",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "ceramic",
            "glass"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "kitchen"
          ],
          "type_name": "lator"
        },
        {
          "repr_str": "book",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "old",
            "thin"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "livingroom",
            "tuat"
          ],
          "type_name": "book"
        },
        {
          "repr_str": "pillow",
          "takeable": true,
          "movable": true,
          "supported": true,
          "possible_adjs": [
            "down",
            "small"
          ],
          "traits": [
            "takeable",
            "movable",
            "needs_support"
          ],
          "standard_locations": [
            "tuat"
          ],
          "type_name": "pillow"
        }
      ],
      "domain_definitions": [
        {
          "domain_id": "partial_new_words",
          "types": {
            "room": [
              "kitchen",
              "pantry",
              "hallway",
              "livingroom",
              "broomcloset",
              "tuat"
            ],
            "entity": [
              "player",
              "inventory",
              "floor",
              "player",
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "pottedplant",
              "chair",
              "bed",
              "comper",
              "broom",
              "mop",
              "sandwich",
              "chross",
              "banana",
              "orange",
              "peach",
              "lator",
              "book",
              "pillow"
            ],
            "container": [
              "inventory",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "receptacle": [
              "inventory",
              "floor",
              "table",
              "sidetable",
              "counter",
              "refrigerator",
              "cupboard",
              "wardrobe",
              "shelf",
              "freezer",
              "chair",
              "bed",
              "comper"
            ],
            "support": [
              "floor",
              "table",
              "sidetable",
              "counter",
              "shelf",
              "chair",
              "bed",
              "comper"
            ],
            "openable": [
              "refrigerator",
              "cupboard",
              "wardrobe",
              "freezer"
            ],
            "takeable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "chross",
              "banana",
              "orange",
              "peach",
              "lator",
              "book",
              "pillow"
            ],
            "movable": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "chross",
              "banana",
              "orange",
              "peach",
              "lator",
              "book",
              "pillow"
            ],
            "needs_support": [
              "pottedplant",
              "broom",
              "mop",
              "sandwich",
              "chross",
              "banana",
              "orange",
              "peach",
              "lator",
              "book",
              "pillow"
            ]
          },
          "predicates": [
            {
              "predicate_id": "open",
              "variable": "e",
              "mutability": "openable"
            },
            {
              "predicate_id": "closed",
              "variable": "e",
              "mutability": "openable"
            }
          ]
        }
      ],
      "prompt_template_set": "new-words_replace_explanation",
      "bench_turn_limit": 50
    }
  ]
}